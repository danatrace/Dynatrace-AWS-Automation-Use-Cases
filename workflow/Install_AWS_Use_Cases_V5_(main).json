{
  "id": "1fc55164-d225-45a9-9281-07d7e62ce89d",
  "title": "Install AWS Use Cases V5 (main)",
  "tasks": {
    "get-users-id": {
      "name": "get-users-id",
      "input": {
        "url": "{% if 'sprint' in environment().url %}https://api-hardening.internal.dynatracelabs.com/iam/v1/accounts/{{input()[\"dtaccountuid\"] }}/users{% else %}https://api.dynatrace.com/iam/v1/accounts/{{input()[\"dtaccountuid\"] }}/users{% endif %}",
        "method": "GET",
        "headers": {
          "authorization": "Bearer {{ result(\"get-dt-oauth-token\").token }}"
        },
        "failOnResponseCodes": "400-599"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:http-function",
      "position": {
        "x": -3,
        "y": 3
      },
      "conditions": {
        "else": "SKIP",
        "states": {
          "create-service-user": "OK"
        }
      },
      "description": "Issue an HTTP request to any API.",
      "predecessors": [
        "create-service-user"
      ]
    },
    "create-policies": {
      "name": "create-policies",
      "input": {
        "workflowId": "45b907ff-076a-4aad-8733-7159b7fed89e",
        "workflowInput": "{\n  \"token\": \"{{ result(\"get-dt-oauth-token\").token }}\",\n  \"dtaccountuid\": \"{{input()[\"dtaccountuid\"] }}\",\n  \"serviceuseremail\": \"{{result(\"create-service-user\").json.email }}\"\n}"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:run-workflow",
      "active": true,
      "position": {
        "x": -2,
        "y": 1
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{input()[\"create_workflow_groups_and_policies\"] == true}}",
        "states": {
          "create-policy-workflow": "OK"
        }
      },
      "description": "Modularize your workflows, run any existing workflow.",
      "predecessors": [
        "create-policy-workflow"
      ]
    },
    "create-dashboards": {
      "name": "create-dashboards",
      "input": {
        "script": "// optional import of sdk modules\nimport { execution } from '@dynatrace-sdk/automation-utils';\nimport { workflowsClient } from \"@dynatrace-sdk/client-automation\";\nimport { getEnvironmentUrl } from '@dynatrace-sdk/app-environment';\nimport { documentsClient } from \"@dynatrace-sdk/client-document\";\n\nexport default async function ({ executionId , action_execution_id }) {\n  // your code goes here\n  // e.g. get the current execution\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\n  const configGet = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/get-users-id/result`);\n  const configBody = await configGet.json();\n  let owner = \"\"\n  for (let items of configBody[\"json\"][\"items\"]) {\n    if(items.email == input[\"owner_email\"])\n     owner = items.uid\n  }\n\n  //dashboard\n  let content = { \"version\": 19, \"variables\": [ { \"version\": 2, \"key\": \"ProblemType\", \"type\": \"csv\", \"visible\": true, \"editable\": true, \"input\": \"cpu,storage,security,securityhub,S3,all\", \"multiple\": false, \"defaultValue\": \"all\" }, { \"version\": 2, \"key\": \"Remediations\", \"type\": \"query\", \"visible\": false, \"editable\": true, \"input\": \"fetch events\\n| filter matchesPhrase(event.name, \\\"*Remediation -*\\\") \\n| filter matchesPhrase(entity_tags,\\\"Dynatrace-SSM-Action-Demo_\"+input.awsaccountid+\"\\\")\\n| fieldsadd msg=event.name\\n| summarize count()\", \"multiple\": true, \"defaultValue\": [ \"3420b2ac-f1cf-4b24-b62d-61ba1ba8ed05*\" ] } ], \"tiles\": { \"0\": { \"title\": \"Losses by Membership id\", \"type\": \"data\", \"query\": \"fetch bizevents\\n| filter matchesPhrase(content, \\\"gameplay tracking\\\")\\n| makeTimeseries sum(amount.lost), by:{membership.id}\", \"visualization\": \"lineChart\", \"visualizationSettings\": { \"chartSettings\": { \"truncationMode\": \"middle\", \"xAxisLabel\": \"timeframe\", \"xAxisScaling\": \"analyzedTimeframe\", \"fieldMapping\": { \"leftAxisValues\": [ \"sum(amount.lost)\" ], \"timestamp\": \"timeframe\" } }, \"autoSelectVisualization\": false, \"thresholds\": [], \"dataMapping\": { \"displayedFields\": [ \"membership.id\" ] } }, \"querySettings\": { \"maxResultRecords\": 1000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 1, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } } }, \"1\": { \"title\": \"Wins by Membership id\", \"type\": \"data\", \"query\": \"fetch bizevents\\n| filter matchesPhrase(content, \\\"gameplay tracking\\\")\\n| makeTimeseries sum(amount.won), by:{membership.id}\", \"visualization\": \"lineChart\", \"visualizationSettings\": { \"chartSettings\": { \"truncationMode\": \"middle\", \"xAxisLabel\": \"timeframe\", \"xAxisScaling\": \"analyzedTimeframe\", \"fieldMapping\": { \"leftAxisValues\": [ \"sum(amount.won)\" ], \"timestamp\": \"timeframe\" } }, \"autoSelectVisualization\": true, \"thresholds\": [], \"dataMapping\": { \"displayedFields\": [ \"membership.id\" ] } }, \"querySettings\": { \"maxResultRecords\": 1000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 1, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } } }, \"3\": { \"title\": \"Losses by Game\", \"type\": \"data\", \"query\": \"fetch bizevents\\n| filter matchesPhrase(content, \\\"gameplay tracking\\\")\\n| makeTimeseries sum(amount.lost), by:{wager.type}\", \"visualization\": \"lineChart\", \"visualizationSettings\": { \"chartSettings\": { \"truncationMode\": \"middle\", \"legend\": { \"position\": \"right\" }, \"xAxisLabel\": \"timeframe\", \"xAxisScaling\": \"analyzedTimeframe\", \"fieldMapping\": { \"leftAxisValues\": [ \"sum(amount.lost)\" ], \"timestamp\": \"timeframe\" } }, \"autoSelectVisualization\": false, \"thresholds\": [], \"dataMapping\": { \"displayedFields\": [ \"wager.type\" ] } }, \"querySettings\": { \"maxResultRecords\": 1000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 1, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } } }, \"4\": { \"title\": \"Total Losses\", \"type\": \"data\", \"query\": \"fetch bizevents\\n| filter matchesPhrase(content, \\\"gameplay tracking\\\")\\n| summarize sum(amount.lost)\", \"visualization\": \"singleValue\", \"visualizationSettings\": { \"singleValue\": { \"labelMode\": \"none\", \"label\": \"sum(amount.lost)\", \"recordField\": \"sum(amount.lost)\", \"isIconVisible\": true, \"prefixIcon\": \"MoneyIcon\", \"trend\": { \"isVisible\": true, \"trendField\": \"sum(amount.lost)\", \"isRelative\": false } }, \"autoSelectVisualization\": false, \"thresholds\": [], \"unitsOverrides\": [ { \"identifier\": \"sum(amount.lost)\", \"unitCategory\": \"currency\", \"baseUnit\": \"usd\", \"displayUnit\": null, \"decimals\": 0, \"suffix\": \"$\", \"delimiter\": true, \"added\": 1751738699710 } ] }, \"querySettings\": { \"maxResultRecords\": 1000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 1, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } } }, \"5\": { \"title\": \"Total Wins\", \"type\": \"data\", \"query\": \"fetch bizevents\\n| filter matchesPhrase(content, \\\"gameplay tracking\\\")\\n| summarize sum(amount.won)\", \"visualization\": \"singleValue\", \"visualizationSettings\": { \"singleValue\": { \"labelMode\": \"none\", \"label\": \"$\", \"recordField\": \"sum(amount.won)\", \"isIconVisible\": true, \"prefixIcon\": \"MoneyIcon\", \"trend\": { \"isVisible\": true, \"trendField\": \"sum(amount.won)\", \"isRelative\": false } }, \"autoSelectVisualization\": false, \"thresholds\": [], \"unitsOverrides\": [ { \"identifier\": \"sum(amount.won)\", \"unitCategory\": \"unspecified\", \"baseUnit\": \"none\", \"displayUnit\": null, \"decimals\": 0, \"suffix\": \"$\", \"delimiter\": true, \"added\": 1751738747620 } ] }, \"querySettings\": { \"maxResultRecords\": 1000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 1, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } } }, \"6\": { \"title\": \"Total Plays\", \"type\": \"data\", \"query\": \"fetch bizevents\\n| filter matchesPhrase(content, \\\"gameplay tracking\\\")\\n| summarize count()\", \"visualization\": \"singleValue\", \"visualizationSettings\": { \"singleValue\": { \"labelMode\": \"none\", \"label\": \"sum(amount.lost)\", \"recordField\": \"count()\", \"trend\": { \"isVisible\": true, \"trendField\": \"count()\", \"isRelative\": false } }, \"autoSelectVisualization\": false, \"thresholds\": [] }, \"querySettings\": { \"maxResultRecords\": 1000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 1, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } } }, \"7\": { \"title\": \"Avg. Loss by Player\", \"type\": \"data\", \"query\": \"fetch bizevents\\n| filter matchesPhrase(content, \\\"gameplay tracking\\\")\\n| summarize avg(amount.lost)\", \"visualization\": \"singleValue\", \"visualizationSettings\": { \"singleValue\": { \"labelMode\": \"none\", \"label\": \"sum(amount.lost)\", \"recordField\": \"avg(amount.lost)\", \"isIconVisible\": true, \"prefixIcon\": \"MoneyIcon\", \"trend\": { \"isVisible\": true, \"trendField\": \"avg(amount.lost)\", \"isRelative\": false } }, \"autoSelectVisualization\": false, \"thresholds\": [], \"unitsOverrides\": [ { \"identifier\": \"avg(amount.lost)\", \"unitCategory\": \"unspecified\", \"baseUnit\": \"none\", \"displayUnit\": null, \"decimals\": 0, \"suffix\": \"$\", \"delimiter\": true, \"added\": 1751740362028 } ] }, \"querySettings\": { \"maxResultRecords\": 1000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 1, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } } }, \"8\": { \"title\": \"Avg. wins by Player\", \"type\": \"data\", \"query\": \"fetch bizevents\\n| filter matchesPhrase(content, \\\"gameplay tracking\\\")\\n| summarize avg(amount.won)\", \"visualization\": \"singleValue\", \"visualizationSettings\": { \"singleValue\": { \"labelMode\": \"none\", \"label\": \"sum(amount.lost)\", \"recordField\": \"avg(amount.won)\", \"isIconVisible\": true, \"prefixIcon\": \"MoneyIcon\", \"trend\": { \"isVisible\": true, \"trendField\": \"avg(amount.won)\", \"isRelative\": false } }, \"autoSelectVisualization\": false, \"thresholds\": [], \"unitsOverrides\": [ { \"identifier\": \"avg(amount.won)\", \"unitCategory\": \"unspecified\", \"baseUnit\": \"none\", \"displayUnit\": null, \"decimals\": 0, \"suffix\": \"$\", \"delimiter\": true, \"added\": 1751740413784 } ] }, \"querySettings\": { \"maxResultRecords\": 1000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 1, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } } }, \"9\": { \"title\": \"Count Players\", \"type\": \"data\", \"query\": \"fetch bizevents\\n| filter matchesPhrase(content, \\\"gameplay tracking\\\")\\n| summarize plays=countdistinct(membership.id) * 100\", \"visualization\": \"singleValue\", \"visualizationSettings\": { \"singleValue\": { \"labelMode\": \"none\", \"label\": \"sum(amount.lost)\", \"recordField\": \"plays\", \"trend\": { \"isVisible\": true, \"trendField\": \"plays\", \"isRelative\": false } }, \"autoSelectVisualization\": false, \"thresholds\": [] }, \"querySettings\": { \"maxResultRecords\": 1000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 1, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } } }, \"10\": { \"title\": \"Plays with Losses\", \"type\": \"data\", \"query\": \"fetch bizevents\\n| filter matchesPhrase(content, \\\"gameplay tracking\\\")\\n| filter amount.lost > 0\\n| makeTimeseries count()\", \"visualization\": \"barChart\", \"visualizationSettings\": { \"chartSettings\": { \"truncationMode\": \"middle\", \"legend\": { \"hidden\": true }, \"leftYAxisSettings\": { \"min\": null, \"max\": null }, \"xAxisLabel\": \"timeframe\", \"xAxisScaling\": \"analyzedTimeframe\", \"seriesOverrides\": [ { \"seriesId\": [ \"count()\" ], \"override\": { \"color\": { \"Default\": \"var(--dt-colors-charts-apdex-unacceptable-default, #cd3741)\" } } } ], \"fieldMapping\": { \"leftAxisValues\": [ \"count()\" ], \"timestamp\": \"timeframe\" } }, \"autoSelectVisualization\": false, \"thresholds\": [], \"dataMapping\": { \"displayedFields\": [ \"count()\" ] } }, \"querySettings\": { \"maxResultRecords\": 1000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 1, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } } }, \"13\": { \"title\": \"Wins by Game\", \"type\": \"data\", \"query\": \"fetch bizevents\\n| filter matchesPhrase(content, \\\"gameplay tracking\\\")\\n| makeTimeseries sum(amount.won), by:{wager.type}\", \"visualization\": \"lineChart\", \"visualizationSettings\": { \"chartSettings\": { \"truncationMode\": \"middle\", \"legend\": { \"position\": \"right\" }, \"xAxisLabel\": \"timeframe\", \"xAxisScaling\": \"analyzedTimeframe\", \"fieldMapping\": { \"leftAxisValues\": [ \"sum(amount.won)\" ], \"timestamp\": \"timeframe\" } }, \"autoSelectVisualization\": false, \"thresholds\": [], \"dataMapping\": { \"displayedFields\": [ \"wager.type\" ] } }, \"querySettings\": { \"maxResultRecords\": 1000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 1, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } } }, \"15\": { \"title\": \"Game Outages by Location\", \"type\": \"data\", \"query\": \"fetch bizevents\\n| filter matchesPhrase(content, \\\"gameplay tracking\\\")\\n| filter amount.lost > 0\\n| limit 1000\\n| fieldsadd latitude=lat, longtitude=long\\n| fieldsadd rem=tostring($Remediations)\\n| fieldsAdd amount.lost = if( rem >= \\\"2\\\" , 0 , else: amount.lost ) // Conditional assignment,\", \"visualization\": \"heatmap\", \"visualizationSettings\": { \"dataMapping\": { \"xAxis\": \"wager.type\", \"yAxis\": \"casino\", \"bucketValue\": \"amount.lost\" }, \"colorModeType\": { \"numericColorPalette\": \"brown-inverted\", \"sequentialCustomColors\": [ { \"id\": 241047, \"value\": 0, \"color\": { \"Default\": \"var(--dt-colors-charts-categorical-color-13-default, #1c520a)\" }, \"comparator\": \"≥\" }, { \"id\": 249617.19999992847, \"value\": 1, \"color\": \"#FFFF33\", \"comparator\": \"≥\" }, { \"id\": 255899.29999995232, \"value\": 1000, \"color\": { \"Default\": \"var(--dt-colors-charts-apdex-unacceptable-default, #cd3741)\" }, \"comparator\": \"≥\" } ], \"colorMode\": \"custom-colors\" }, \"unitsOverrides\": [ { \"identifier\": \"amount.lost\", \"unitCategory\": \"unspecified\", \"baseUnit\": \"none\", \"displayUnit\": null, \"decimals\": 0, \"suffix\": \"\", \"delimiter\": false, \"added\": 1758865907522 } ], \"autoSelectVisualization\": false, \"thresholds\": [] }, \"querySettings\": { \"maxResultRecords\": 100000, \"defaultScanLimitGbytes\": 50, \"maxResultMegaBytes\": 50, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } } }, \"16\": { \"title\": \"Membership Card scan errors\", \"type\": \"data\", \"query\": \"fetch  events\\n| filter dt.davis.is_duplicate==false\\n| filter matchesValue(event.name, \\\"Process memory Saturation\\\") or matchesValue(event.name, \\\"Process CPU Saturation\\\") or matchesValue(event.name, \\\"Low Storage Warning\\\") or matchesPhrase(event.name, \\\"*AWS Security group*\\\") and  matchesPhrase(display_id, \\\"*P*\\\") or matchesPhrase(event.name, \\\"*Public access to remote server administration*\\\") and  matchesPhrase(display_id, \\\"*P*\\\") or matchesPhrase(event.name, \\\"*AwsS3Bucket*\\\") and  matchesPhrase(display_id, \\\"*P*\\\")\\n| filter matchesPhrase(entity_tags, \\\"Dynatrace-SSM-Action-Demo_\"+input.awsaccountid+\"\\\")\\n| filter matchesValue(event.kind, \\\"DAVIS_PROBLEM\\\") and matchesValue(event.status, \\\"ACTIVE\\\") \\n| fieldsadd none = \\\"none\\\"\\n| summarize countDistinct(display_id)*137, alias: scanerrors\", \"visualization\": \"singleValue\", \"visualizationSettings\": { \"singleValue\": { \"labelMode\": \"none\", \"label\": \"sum(amount.lost)\", \"recordField\": \"scanerrors\", \"isIconVisible\": true, \"prefixIcon\": \"WarningIcon\", \"trend\": { \"isVisible\": true, \"trendField\": \"plays\", \"trendType\": \"custom\", \"isRelative\": false } }, \"autoSelectVisualization\": false, \"thresholds\": [ { \"id\": 1, \"field\": \"scanerrors\", \"title\": \"\", \"isEnabled\": true, \"rules\": [ { \"id\": 0, \"color\": { \"Default\": \"var(--dt-colors-charts-status-ideal-default, #2f6863)\" }, \"comparator\": \"=\", \"label\": \"\", \"value\": 0 }, { \"id\": 1, \"color\": { \"Default\": \"var(--dt-colors-charts-status-warning-default, #eca440)\" }, \"comparator\": \"≥\", \"label\": \"\" }, { \"id\": 2, \"color\": { \"Default\": \"var(--dt-colors-charts-status-critical-default, #c4233b)\" }, \"comparator\": \"≥\", \"label\": \"\", \"value\": 0 } ] } ] }, \"querySettings\": { \"maxResultRecords\": 1000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 1, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } } }, \"17\": { \"title\": \"Outages scans erros by location\", \"type\": \"data\", \"query\": \"fetch bizevents\\n| filter matchesPhrase(content, \\\"gameplay tracking\\\")\\n| filter amount.lost > 0\\n| limit 1000\\n| fieldsadd latitude=lat, longtitude=long\\n| fieldsadd rem=tostring($Remediations)\\n| fieldsAdd amount.lost = if( rem >= \\\"2\\\" , 0 , else: amount.lost ) // Conditional assignment,\\n\", \"visualization\": \"bubbleMap\", \"visualizationSettings\": { \"mapView\": { \"defaultZoom\": \"custom\", \"longitude\": -90.62808913721756, \"latitude\": 39.07635758405766, \"zoom\": 1.5880055347521806 }, \"dataMapping\": { \"latitude\": \"latitude\", \"longitude\": \"long\", \"radius\": \"amount.lost\", \"dimension\": \"amount.lost\", \"displayedFields\": [ \"loglevel\", \"log.source\", \"status\", \"wager.type\", \"event.provider\", \"casino\", \"dt.openpipeline.source\", \"content\", \"event.kind\", \"membership.id\", \"event.type\" ] }, \"legend\": { \"ratio\": 10, \"showLegend\": false, \"textTruncationMode\": \"middle\" }, \"mapRadius\": { \"radiusRange\": [ 1, 15 ] }, \"colorModeType\": { \"numericColorPalette\": \"orange-blue\", \"color\": { \"Default\": \"var(--dt-colors-charts-loglevel-emergency-default, #ae132d)\" }, \"colorMode\": \"custom-colors\", \"sequentialCustomColors\": [ { \"id\": 594580.7999999523, \"value\": 0, \"color\": { \"Default\": \"var(--dt-colors-charts-categorical-color-13-default, #1c520a)\" }, \"comparator\": \"≥\" }, { \"id\": 605646.7999999523, \"value\": 1, \"color\": \"#FFFF33\", \"comparator\": \"≥\" }, { \"id\": 613067.0999999046, \"value\": 1500, \"color\": { \"Default\": \"var(--dt-colors-charts-apdex-unacceptable-default, #cd3741)\" }, \"comparator\": \"≥\" } ] }, \"tooltip\": { \"showCustomFields\": true }, \"autoSelectVisualization\": false, \"thresholds\": [] }, \"querySettings\": { \"maxResultRecords\": 15000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 50, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } } }, \"18\": { \"title\": \"Outages\", \"type\": \"data\", \"query\": \"fetch  events\\n| filter dt.davis.is_duplicate==false\\n| filter matchesValue(event.name, \\\"Process memory Saturation\\\") or matchesValue(event.name, \\\"Process CPU Saturation\\\") or matchesValue(event.name, \\\"Low Storage Warning\\\") or matchesPhrase(event.name, \\\"*AWS Security group*\\\") and  matchesPhrase(display_id, \\\"*P*\\\") or matchesPhrase(event.name, \\\"*Public access to remote server administration*\\\") and  matchesPhrase(display_id, \\\"*P*\\\") or matchesPhrase(event.name, \\\"*AwsS3Bucket*\\\") and  matchesPhrase(display_id, \\\"*P*\\\")\\n| filter matchesPhrase(entity_tags, \\\"Dynatrace-SSM-Action-Demo_\"+input.awsaccountid+\"\\\")\\n| filter matchesValue(event.kind, \\\"DAVIS_PROBLEM\\\") and matchesValue(event.status, \\\"ACTIVE\\\") \\n| fieldsadd none = \\\"none\\\"\\n| summarize countDistinct(display_id)*37, alias: outages\", \"visualization\": \"singleValue\", \"visualizationSettings\": { \"singleValue\": { \"labelMode\": \"none\", \"label\": \"sum(amount.lost)\", \"recordField\": \"outages\", \"isIconVisible\": true, \"prefixIcon\": \"WarningIcon\", \"trend\": { \"isVisible\": true, \"trendField\": \"plays\", \"trendType\": \"custom\", \"isRelative\": false } }, \"autoSelectVisualization\": false, \"thresholds\": [ { \"id\": 1, \"field\": \"outages\", \"title\": \"\", \"isEnabled\": true, \"rules\": [ { \"id\": 0, \"color\": { \"Default\": \"var(--dt-colors-charts-status-ideal-default, #2f6863)\" }, \"comparator\": \"=\", \"label\": \"\", \"value\": 0 }, { \"id\": 1, \"color\": { \"Default\": \"var(--dt-colors-charts-status-warning-default, #eca440)\" }, \"comparator\": \"≥\", \"label\": \"\" }, { \"id\": 2, \"color\": { \"Default\": \"var(--dt-colors-charts-status-critical-default, #c4233b)\" }, \"comparator\": \"≥\", \"label\": \"\", \"value\": 0 } ] } ] }, \"querySettings\": { \"maxResultRecords\": 1000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 1, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } } }, \"21\": { \"type\": \"markdown\", \"content\": \" \" }, \"22\": { \"title\": \"Plays with Wins\", \"type\": \"data\", \"query\": \"fetch bizevents\\n| filter matchesPhrase(content, \\\"gameplay tracking\\\")\\n| filter amount.won> 0\\n| makeTimeseries count()\", \"visualization\": \"barChart\", \"visualizationSettings\": { \"chartSettings\": { \"truncationMode\": \"middle\", \"legend\": { \"hidden\": true }, \"xAxisLabel\": \"timeframe\", \"xAxisScaling\": \"analyzedTimeframe\", \"seriesOverrides\": [ { \"seriesId\": [ \"count()\" ], \"override\": { \"color\": { \"Default\": \"var(--dt-colors-charts-categorical-color-13-default, #1c520a)\" } } } ], \"fieldMapping\": { \"leftAxisValues\": [ \"count()\" ], \"timestamp\": \"timeframe\" } }, \"autoSelectVisualization\": false, \"thresholds\": [], \"dataMapping\": { \"displayedFields\": [ \"count()\" ] } }, \"querySettings\": { \"maxResultRecords\": 1000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 1, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } } }, \"23\": { \"type\": \"markdown\", \"content\": \"[AWS Management Console](https://us-east-1.console.aws.amazon.com/ec2/home?region=us-east-1#Instances:instanceState=running;tag:Name=:Dynatrace-SSM;v=3;$case=tags:true%5C,client:false;$regex=tags:false%5C,client:false)\\n[AWS Systems Manager Automations](https://us-east-1.console.aws.amazon.com/systems-manager/automation/executions?region=us-east-1#)\\n[AWS Systems Manager Documents](https://us-east-1.console.aws.amazon.com/systems-manager/documents?region=us-east-1#) [Problems/Anomalies](/ui/apps/dynatrace.davis.problems/)\\n\\n\\n\" }, \"24\": { \"title\": \"\", \"type\": \"data\", \"query\": \"fetch events\\n| filter matchesValue(event.name, \\\"Process memory Saturation\\\") or matchesValue(event.name, \\\"Process CPU Saturation\\\")  or matchesValue(event.name, \\\"Low Storage Warning\\\") or matchesPhrase(event.name, \\\"*AWS Security group*\\\") and  matchesPhrase(display_id, \\\"*P*\\\")\\n| filter matchesPhrase(entity_tags, \\\"Dynatrace-SSM-Action-Demo_\"+input.awsaccountid+\"\\\")\\n| filter matchesValue(event.kind, \\\"DAVIS_PROBLEM\\\")  and matchesValue(event.status, \\\"CLOSED\\\") \\n//| filter matchesPhrase( entity_tags, \\\"remediation:on\\\")  \\n| filter matchesPhrase(display_id, \\\"*P*\\\") \\n| fieldsadd none = \\\"none\\\"\\n| filter if(matchesPhrase($ProblemType, \\\"All\\\"), none==none,else:matchesPhrase(event.name, $ProblemType))\\n| summarize average_open_time = avg(resolved_problem_duration)\", \"visualization\": \"singleValue\", \"visualizationSettings\": { \"singleValue\": { \"label\": \"Avg. Problem Duration\", \"recordField\": \"average_open_time\", \"isIconVisible\": true, \"prefixIcon\": \"ClockIcon\", \"trend\": { \"isVisible\": true } }, \"thresholds\": [ { \"id\": 1, \"field\": \"result\", \"title\": \"\", \"isEnabled\": true, \"rules\": [ { \"id\": 0, \"color\": { \"Default\": \"var(--dt-colors-charts-status-ideal-default, #2f6863)\" }, \"comparator\": \"=\", \"label\": \"\", \"value\": 0 }, { \"id\": 1, \"color\": { \"Default\": \"var(--dt-colors-charts-categorical-themed-fireplace-color-01-default, #ae132d)\" }, \"comparator\": \">\", \"label\": \"\", \"value\": 0 }, { \"id\": 2, \"color\": { \"Default\": \"var(--dt-colors-charts-status-critical-default, #c4233b)\" }, \"comparator\": \">\", \"label\": \"\", \"value\": 0 } ] } ], \"unitsOverrides\": [] }, \"querySettings\": { \"maxResultRecords\": 1000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 100, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": {}, \"timeframe\": { \"tileTimeframe\": { \"from\": \"now()-7d\", \"to\": \"now()\" }, \"tileTimeframeEnabled\": false } }, \"25\": { \"title\": \"Disk Usage\", \"type\": \"data\", \"subType\": \"dql-builder-metrics\", \"query\": \"timeseries { max(dt.host.disk.used.percent), value.A = avg(dt.host.disk.used.percent, scalar: true) }, by: { host.name, dt.source_entity, dt.entity.host, dt.entity.ec2_instance }, filter: { matchesValue(entityAttr(dt.entity.host, \\\"tags\\\"), \\\"*[AWS]Name:Dynatrace-SSM-Action-Demo_\"+input.awsaccountid+\"*\\\") }\\n| fieldsAdd dt.entity.host.name = entityName(dt.entity.host)\\n| fieldsAdd dt.entity.ec2_instance.name = entityName(dt.entity.ec2_instance)\", \"visualization\": \"lineChart\", \"visualizationSettings\": { \"chartSettings\": { \"truncationMode\": \"middle\", \"legend\": { \"hidden\": true }, \"leftYAxisSettings\": { \"label\": \"Disk used %\", \"max\": 100 }, \"xAxisLabel\": \"timeframe\", \"xAxisScaling\": \"auto\", \"fieldMapping\": { \"leftAxisValues\": [ \"max(dt.host.disk.used.percent)\" ], \"timestamp\": \"timeframe\" } }, \"autoSelectVisualization\": false, \"thresholds\": [ { \"id\": 1, \"field\": \"\", \"title\": \"\", \"isEnabled\": true, \"rules\": [ { \"id\": 0, \"color\": { \"Default\": \"var(--dt-colors-charts-status-ideal-default, #2f6863)\" }, \"comparator\": \"≥\", \"label\": \"\", \"value\": 0 }, { \"id\": 1, \"color\": { \"Default\": \"var(--dt-colors-charts-status-warning-default, #eca440)\" }, \"comparator\": \"≥\", \"label\": \"\", \"value\": 70 }, { \"id\": 2, \"color\": { \"Default\": \"var(--dt-colors-charts-status-critical-default, #c4233b)\" }, \"comparator\": \"≥\", \"label\": \"\", \"value\": 90 } ] } ], \"unitsOverrides\": [ { \"identifier\": \"avg(dt.host.disk.used.percent)\", \"unitCategory\": \"percentage\", \"baseUnit\": \"percent\", \"displayUnit\": null, \"decimals\": 0, \"suffix\": \"\", \"delimiter\": false, \"added\": 1741137751484 } ], \"dataMapping\": { \"displayedFields\": [ \"host.name\", \"dt.source_entity\", \"dt.entity.host\", \"dt.entity.ec2_instance\", \"dt.entity.host.name\", \"dt.entity.ec2_instance.name\" ] } }, \"querySettings\": { \"maxResultRecords\": 10000, \"defaultScanLimitGbytes\": 100, \"maxResultMegaBytes\": 10, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"queryConfig\": { \"version\": \"16.3.1\", \"subQueries\": [ { \"id\": \"A\", \"isEnabled\": true, \"datatype\": \"metrics\", \"metric\": { \"key\": \"dt.host.disk.used.percent\", \"aggregation\": \"max\" }, \"by\": [ \"host.name\", \"dt.source_entity\", \"dt.entity.host\", \"dt.entity.ec2_instance\" ], \"filter\": \"dt.entity.host.tags = \\\"*[AWS]Name:Dynatrace-SSM-Action-Demo_\"+input.awsaccountid+\"*\\\"\" } ] }, \"davis\": {} }, \"26\": { \"title\": \"Process CPU Usage\", \"type\": \"data\", \"subType\": \"dql-builder-metrics\", \"query\": \"timeseries { max(dt.process.cpu.usage), value.A = avg(dt.process.cpu.usage, scalar: true) }, by: { dt.entity.process_group_instance }, filter: { matchesValue(entityAttr(dt.entity.host, \\\"tags\\\"), \\\"*[AWS]Name:Dynatrace-SSM-Action-Demo_\"+input.awsaccountid+\"*\\\") }\\n| fieldsAdd dt.entity.process_group_instance.name = entityName(dt.entity.process_group_instance)\", \"visualization\": \"lineChart\", \"visualizationSettings\": { \"chartSettings\": { \"truncationMode\": \"middle\", \"legend\": { \"hidden\": true }, \"leftYAxisSettings\": { \"label\": \"Process CPU usage\", \"max\": 100 }, \"xAxisLabel\": \"timeframe\", \"xAxisScaling\": \"analyzedTimeframe\", \"tooltip\": { \"seriesDisplayMode\": \"multi-line\" }, \"fieldMapping\": { \"leftAxisValues\": [ \"max(dt.process.cpu.usage)\" ], \"timestamp\": \"timeframe\" }, \"curve\": \"smooth\", \"pointsDisplay\": \"always\" }, \"autoSelectVisualization\": false, \"thresholds\": [ { \"id\": 1, \"field\": \"\", \"title\": \"\", \"isEnabled\": true, \"rules\": [ { \"id\": 0, \"color\": { \"Default\": \"var(--dt-colors-charts-status-ideal-default, #2f6863)\" }, \"comparator\": \"≥\", \"label\": \"Good\", \"value\": 0 }, { \"id\": 1, \"color\": { \"Default\": \"var(--dt-colors-charts-status-warning-default, #eca440)\" }, \"comparator\": \"≥\", \"label\": \"Warning\", \"value\": 60 }, { \"id\": 2, \"color\": { \"Default\": \"var(--dt-colors-charts-status-critical-default, #c4233b)\" }, \"comparator\": \"≥\", \"label\": \"Problem\", \"value\": 90 } ] } ], \"dataMapping\": { \"displayedFields\": [ \"dt.entity.process_group_instance.name\" ] } }, \"querySettings\": { \"maxResultRecords\": 10000, \"defaultScanLimitGbytes\": 100, \"maxResultMegaBytes\": 10, \"defaultSamplingRatio\": 10, \"enableSampling\": true }, \"queryConfig\": { \"version\": \"16.3.1\", \"subQueries\": [ { \"id\": \"A\", \"isEnabled\": true, \"datatype\": \"metrics\", \"metric\": { \"key\": \"dt.process.cpu.usage\", \"aggregation\": \"max\" }, \"by\": [ \"dt.entity.process_group_instance\" ], \"filter\": \"dt.entity.host.tags = \\\"*[AWS]Name:Dynatrace-SSM-Action-Demo_\"+input.awsaccountid+\"*\\\"\" } ], \"globalCommands\": {} }, \"davis\": { \"enabled\": false, \"componentState\": { \"selectedAnalyzerName\": \"dt.statistics.ui.ForecastAnalyzer\", \"inputData\": { \"dt.statistics.ui.ForecastAnalyzer\": { \"generalParameters\": { \"timeframe\": { \"startTime\": \"@d\", \"endTime\": \"now()\" }, \"resolveDimensionalQueryData\": true, \"logVerbosity\": \"INFO\" }, \"forecastHorizon\": 100, \"forecastOffset\": 1, \"query\": \"timeseries avg(dt.process.cpu.usage), by: { dt.entity.process_group_instance }, filter: { matchesValue(entityAttr(dt.entity.host, \\\"tags\\\"), \\\"[AWS]Name:Dynatrace-SSM-Action-Demo_\"+input.awsaccountid+\"\\\") }\\n| fieldsAdd dt.entity.process_group_instance.name = entityName(dt.entity.process_group_instance)\\n| fieldsAdd value.A = arrayAvg(`avg(dt.process.cpu.usage)`)\" } }, \"analyzerHints\": { \"dt.statistics.ui.ForecastAnalyzer\": { \"unit\": { \"unitCategory\": \"percentage\", \"baseUnit\": \"percent\" } } } } } }, \"27\": { \"title\": \"\", \"type\": \"data\", \"query\": \"fetch dt.entity.ec2_instance\\n| filter matchesPhrase(tags,\\\"Dynatrace-SSM-Action-Demo_\"+input.awsaccountid+\"\\\")\\n| summarize instances=count()\", \"visualization\": \"singleValue\", \"visualizationSettings\": { \"singleValue\": { \"label\": \"🖧 Servers 🖧\", \"recordField\": \"instances\", \"isIconVisible\": true, \"prefixIcon\": \"\", \"trend\": { \"isVisible\": true, \"trendField\": \"instances\" } }, \"autoSelectVisualization\": false, \"thresholds\": [ { \"id\": 3, \"field\": \"instances\", \"title\": \"\", \"isEnabled\": true, \"rules\": [ { \"id\": 0, \"color\": { \"Default\": \"var(--dt-colors-charts-categorical-color-13-default, #1c520a)\" }, \"comparator\": \">\", \"label\": \"\", \"value\": 0 }, { \"id\": 2, \"color\": { \"Default\": \"var(--dt-colors-charts-status-critical-default, #c4233b)\" }, \"comparator\": \"=\", \"label\": \"\", \"value\": 0 } ] } ], \"unitsOverrides\": [ { \"identifier\": \"instances\", \"unitCategory\": \"unspecified\", \"baseUnit\": \"none\", \"displayUnit\": null, \"decimals\": 0, \"suffix\": \"\", \"delimiter\": false, \"added\": 1741918504196 } ] }, \"querySettings\": { \"maxResultRecords\": 1000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 1, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } } }, \"28\": { \"title\": \"\", \"type\": \"data\", \"query\": \"fetch  events\\n| filter dt.davis.is_duplicate==false\\n| filter matchesValue(event.name, \\\"Process memory Saturation\\\") or matchesValue(event.name, \\\"Process CPU Saturation\\\") or matchesValue(event.name, \\\"Low Storage Warning\\\") or matchesPhrase(event.name, \\\"*AWS Security group*\\\") and  matchesPhrase(display_id, \\\"*P*\\\") or matchesPhrase(event.name, \\\"*Public access to remote server administration*\\\") and  matchesPhrase(display_id, \\\"*P*\\\") or matchesPhrase(event.name, \\\"*AwsS3Bucket*\\\") and  matchesPhrase(display_id, \\\"*P*\\\")\\n| filter matchesPhrase(entity_tags, \\\"Dynatrace-SSM-Action-Demo_\"+input.awsaccountid+\"\\\")\\n| filter matchesValue(event.kind, \\\"DAVIS_PROBLEM\\\") and matchesValue(event.status, \\\"ACTIVE\\\") \\n| fieldsadd none = \\\"none\\\"\\n| filter if(matchesPhrase($ProblemType, \\\"All\\\"), none==none,else:if(matchesPhrase($ProblemType, \\\"securityhub\\\"), matchesPhrase(event.name, \\\"*Public access to remote server administration*\\\"),else:matchesPhrase(event.name, $ProblemType)))\\n| summarize countDistinct(display_id), alias: Number_of_open_davis_problems\\n//| fields concat( Number_of_open_davis_problems,\\\" 🧠 \\\")\", \"visualization\": \"singleValue\", \"visualizationSettings\": { \"singleValue\": { \"label\": \"Detected Problems 🧠\", \"recordField\": \"Number_of_open_davis_problems\", \"prefixIcon\": \"DavisAiIcon\", \"trend\": { \"isVisible\": true } }, \"thresholds\": [ { \"id\": 1, \"field\": \"Number_of_open_davis_problems\", \"title\": \"\", \"isEnabled\": true, \"rules\": [ { \"id\": 0, \"color\": { \"Default\": \"var(--dt-colors-charts-categorical-color-13-default, #1c520a)\" }, \"comparator\": \"≥\", \"label\": \"\", \"value\": 0 }, { \"id\": 1, \"color\": { \"Default\": \"var(--dt-colors-charts-categorical-themed-fireplace-color-01-default, #ae132d)\" }, \"comparator\": \"≥\", \"label\": \"\", \"value\": 1 }, { \"id\": 2, \"color\": { \"Default\": \"var(--dt-colors-charts-categorical-themed-fireplace-color-01-default, #ae132d)\" }, \"comparator\": \"≥\", \"label\": \"\", \"value\": 2 } ] } ] }, \"querySettings\": { \"maxResultRecords\": 1000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 100, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": {} }, \"29\": { \"title\": \"Problems Map\", \"type\": \"data\", \"query\": \"fetch  events\\n| filter dt.davis.is_duplicate==false\\n| filter matchesValue(event.name, \\\"Process memory Saturation\\\") and  matchesPhrase(display_id, \\\"*P*\\\") and  matchesValue(event.status_transition, \\\"CREATED\\\") or matchesValue(event.name, \\\"Process CPU Saturation\\\") and  matchesPhrase(display_id, \\\"*P*\\\") and  matchesValue(event.status_transition, \\\"CREATED\\\") or matchesValue(event.name, \\\"Low Storage Warning\\\") and  matchesPhrase(display_id, \\\"*P*\\\") and  matchesValue(event.status_transition, \\\"CREATED\\\")  or matchesPhrase(event.name, \\\"*Remediation -*\\\")  or matchesPhrase(event.name, \\\"*AWS Security group*\\\") and  matchesPhrase(display_id, \\\"*P*\\\") or matchesPhrase(event.name, \\\"*Public access to remote server administration*\\\") and  matchesPhrase(display_id, \\\"*P*\\\") or matchesPhrase(event.name, \\\"*AwsS3Bucket*\\\") and  matchesPhrase(display_id, \\\"*P*\\\")\\n| fieldsadd none = \\\"none\\\"\\n| filter matchesValue(event.kind, \\\"DAVIS_PROBLEM\\\") and matchesValue(event.status, \\\"ACTIVE\\\") \\n| filter if(matchesPhrase($ProblemType, \\\"All\\\"), none==none,else:if(matchesPhrase($ProblemType, \\\"securityhub\\\"), matchesPhrase(event.name, \\\"*Public access to remote server administration*\\\"),else:matchesPhrase(event.name, $ProblemType)))\\n| lookup [\\nfetch dt.entity.ec2_instance\\n| filter matchesPhrase(tags,\\\"Dynatrace-SSM-Action-Demo_\"+input.awsaccountid+\"\\\")\\n| fieldsadd cpuusage = lookup([ timeseries max = max(dt.host.cpu.usage), by:{dt.entity.host} \\n| fieldsadd awsname=entityAttr(dt.entity.host, \\\"awsNameTag\\\"), cpumax = arrayLast(max)] , sourceField:entity.name, lookupField:awsname)\\n| fieldsadd memusage = lookup([ timeseries max = max(dt.host.memory.avail.percent), by:{dt.entity.host} \\n| fieldsadd awsname=entityAttr(dt.entity.host, \\\"awsNameTag\\\"), memmax = arrayLast(max)] , sourceField:entity.name, lookupField:awsname)\\n| fieldsadd diskusage = lookup([ timeseries max = max(dt.host.disk.used.percent), by:{dt.entity.host} \\n| fieldsadd awsname=entityAttr(dt.entity.host, \\\"awsNameTag\\\"), diskmax = arrayLast(max)] , sourceField:entity.name, lookupField:awsname)\\n| fieldsadd entity.name,regionName,awsInstanceType, HostCpuUsage=cpuusage[cpumax], HostMemoryUsage=100 - memusage[memmax],HostDiskUsage=diskusage[diskmax],awsInstanceId,awsSecurityGroup, awsVpcName, arn, tags, id, amiId,virtualizedDiskType, awsBasicMonitoring, localHostName, publicHostName\\n],sourceField:host.name[0], lookupField:localHostName\\n| lookup [fetch dt.entity.aws_availability_zone | fields id,entity.name, name=entity.name  ],sourceField:dt.entity.aws_availability_zone[0], lookupField:id, prefix:\\\"zone_\\\"\\n//| fieldsadd latitude=if(matchesphrase(zone_name,\\\"us-east-1*\\\"), 42.600833 + nr, else:if(matchesphrase(zone_name,\\\"us-east-2*\\\"), 40.0946354 + nr,else:42.600833 + nr)), longitude=if(matchesphrase(zone_name,\\\"us-east-1*\\\"), -111.456667 + nr, else:if(matchesphrase(zone_name,\\\"us-east-2*\\\"), -82.7541337 + nr, else:111.456667))\\n|  fields display_id, host=lookup.entity.name, zone_name,  region=lookup.regionName, event.category, event.name, event.description, event.start, instance_id=lookup.awsInstanceId, ami=lookup.amiId, arn=lookup.arn, instance_type=lookup.awsInstanceType, VPC=lookup.awsVpcName, root_cause_entity_name, ip=lookup.localHostName, HostCpuUsage=lookup.HostCpuUsage, HostMemoryUsage=lookup.HostMemoryUsage,HostDiskUsage=lookup.diskusage ,problem_link=concat(\\\"https://kyw96254.apps.dynatrace.com/ui/apps/dynatrace.davis.problems/problem/\\\",event.id), Classic_Problem_link=concat(\\\"https://kyw96254.apps.dynatrace.com/ui/apps/dynatrace.classic.problems/#problems/problemdetails;gtf=-2h;gf=all;pid=\\\",event.id),\\nhost_link=concat(\\\"https://kyw96254.apps.dynatrace.com/ui/apps/dynatrace.infraops/hosts/\\\",dt.entity.host[0]), problem_id=concat(concat(display_id,\\\" - \\\"), event.name)\\n| fieldsadd  nr=0.9 + random() \\n| fieldsadd lat=42.600833 + nr, long=-111.456667 + nr\\n//| fieldsadd lat=if(matchesphrase(zone_name,\\\"us-east-1*\\\"), 42.600833 + nr, else:if(matchesphrase(zone_name,\\\"us-east-2*\\\"), 40.0946354 + nr,else:42.600833 + nr)), long=if(matchesphrase(zone_name,\\\"us-east-1*\\\"), -111.456667 + nr, else:if(matchesphrase(zone_name,\\\"us-east-2*\\\"), -42.7541337 + nr, else:111.456667))\\n\", \"visualization\": \"bubbleMap\", \"visualizationSettings\": { \"mapView\": { \"defaultZoom\": \"custom\", \"latitude\": 50.73173766848333, \"zoom\": 0.37294521206354503 }, \"dataMapping\": { \"latitude\": \"lat\", \"longitude\": \"long\", \"radius\": \"lat\", \"dimension\": \"problem_id\", \"displayedFields\": [ \"event.start\", \"root_cause_entity_name\", \"HostDiskUsage\", \"problem_id\" ] }, \"legend\": { \"position\": \"right\" }, \"mapRadius\": { \"radiusRange\": [ 1, 100 ] }, \"colorModeType\": { \"numericColorPalette\": \"magenta\", \"color\": { \"Default\": \"var(--dt-colors-charts-security-risk-level-high-default, #cd3741)\" } }, \"tooltip\": { \"showCustomFields\": true }, \"valueBoundaries\": { \"min\": { \"mode\": \"custom\", \"value\": 0 }, \"max\": { \"mode\": \"custom\", \"value\": 100 } }, \"unitsOverrides\": [ { \"identifier\": \"lookup.HostCpuUsage\", \"unitCategory\": \"percentage\", \"baseUnit\": \"percent\", \"displayUnit\": null, \"decimals\": 0, \"suffix\": \"\", \"delimiter\": false, \"added\": 1744252126944 } ], \"autoSelectVisualization\": false, \"thresholds\": [] }, \"querySettings\": { \"maxResultRecords\": 10000, \"defaultScanLimitGbytes\": 50, \"maxResultMegaBytes\": 10, \"defaultSamplingRatio\": 10, \"enableSampling\": true }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } }, \"timeframe\": { \"tileTimeframe\": { \"from\": \"now()-15m\", \"to\": \"now()\" }, \"tileTimeframeEnabled\": false } }, \"30\": { \"title\": \"Problem and Remediation Events\", \"type\": \"data\", \"query\": \"fetch events\\n| filter matchesValue(event.name, \\\"Process memory Saturation\\\") and  matchesPhrase(display_id, \\\"*P*\\\") and  matchesValue(event.status_transition, \\\"CREATED\\\") or matchesValue(event.name, \\\"Process CPU Saturation\\\") and  matchesPhrase(display_id, \\\"*P*\\\") and  matchesValue(event.status_transition, \\\"CREATED\\\") or matchesValue(event.name, \\\"Low Storage Warning\\\") and  matchesPhrase(display_id, \\\"*P*\\\")  or matchesPhrase(event.name, \\\"*Remediation -*\\\")  or matchesPhrase(event.name, \\\"*AWS Security group*\\\") and  matchesPhrase(display_id, \\\"*P*\\\")or matchesPhrase(event.name, \\\"*Public access to remote server administration*\\\") and  matchesPhrase(display_id, \\\"*P*\\\") or matchesPhrase(event.name, \\\"*AwsS3Bucket*\\\") and  matchesPhrase(display_id, \\\"*P*\\\")\\n| filter matchesPhrase(entity_tags,\\\"Dynatrace-SSM-Action-Demo_\"+input.awsaccountid+\"\\\")\\n| fieldsadd Problemid=concat(\\\"🔥 \\\" ,display_id, \\\" \\\")\\n//| filter dt.davis.is_duplicate==false\\n| fieldsadd msg=if(matchesPhrase(event.name, \\\"*Remediation -*\\\") == true, concat(\\\"♻️ \\\", event.name), else:if(matchesPhrase(event.name, \\\"*Remediation Email*\\\") == true, concat(\\\"📨 \\\", event.name), else:concat(Problemid,event.name)))\\n| fieldsadd none = \\\"none\\\"\\n//| filter if(matchesPhrase($ProblemType, \\\"All\\\"), none==none,else:matchesPhrase(event.name, $ProblemType))\\n| filter if(matchesPhrase($ProblemType, \\\"All\\\"), none==none,else:if(matchesPhrase($ProblemType, \\\"securityhub\\\"), matchesPhrase(event.name, \\\"*Public access to remote server administration*\\\"),else:matchesPhrase(event.name, $ProblemType)))\\n\\n| fields  timestamp, msg, event.id, workflow, Url, event.start\\n| fieldsadd url=if(matchesPhrase(msg, \\\"*Remediation -*\\\") == true, workflow, else:concat(\\\"https://hfy97933.apps.dynatrace.com/ui/apps/dynatrace.davis.problems/problem/\\\",event.id)), urlcl=concat(\\\"https://hfy97933.apps.dynatrace.com/ui/apps/dynatrace.classic.problems/#problems/problemdetails;gtf=-2h;gf=all;pid=\\\",event.id)\\n| fieldsadd none = \\\"none\\\"\\n| summarize time=takeFirst(event.start), Message=collectDistinct(msg),url=takeFirst(url),snowurl=takeFirst(Url),by:{msg}\\n| sort time desc\\n|  fieldsRemove msg\\n\", \"visualization\": \"table\", \"visualizationSettings\": { \"table\": { \"colorThresholdTarget\": \"background\", \"linewrapEnabled\": true, \"monospacedFontColumns\": [ [ \"Message\" ] ], \"rowDensity\": \"comfortable\", \"lineWrapIds\": [ [ \"time\" ], [ \"Message\" ], [ \"url\" ], [ \"snowurl\" ] ], \"columnWidths\": { \"[\\\"msg\\\"]\": 297.34375, \"[\\\"time\\\"]\": 135.16, \"[\\\"Message\\\"]\": 380 }, \"columnTypeOverrides\": [ { \"id\": 508766.40000009537, \"fields\": [ \"url\" ], \"value\": \"markdown\" }, { \"id\": 156139.8999999985, \"fields\": [ \"snowurl\" ], \"value\": \"markdown\" } ], \"columnOrder\": [ \"[\\\"time\\\"]\", \"[\\\"Message\\\"]\", \"[\\\"url\\\"]\", \"[\\\"snowurl\\\"]\" ] }, \"thresholds\": [ { \"id\": 1, \"field\": \"\", \"title\": \"\", \"isEnabled\": true, \"rules\": [ { \"id\": 0, \"color\": { \"Default\": \"var(--dt-colors-charts-status-ideal-default, #2f6863)\" }, \"comparator\": \"≥\", \"label\": \"\" }, { \"id\": 1, \"color\": { \"Default\": \"var(--dt-colors-charts-status-warning-default, #eca440)\" }, \"comparator\": \"≥\", \"label\": \"\" }, { \"id\": 2, \"color\": { \"Default\": \"var(--dt-colors-charts-status-critical-default, #c4233b)\" }, \"comparator\": \"≥\", \"label\": \"\" } ] } ] }, \"querySettings\": { \"maxResultRecords\": 10000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 1, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": { \"enabled\": false, \"davisVisualization\": { \"isAvailable\": true } }, \"timeframe\": { \"tileTimeframe\": { \"from\": \"now()-1h\", \"to\": \"now()\" }, \"tileTimeframeEnabled\": false } }, \"31\": { \"title\": \"\", \"type\": \"data\", \"query\": \"fetch  events\\n| filter matchesValue(event.name, \\\"Process memory Saturation\\\") or matchesValue(event.name, \\\"Process CPU Saturation\\\") or matchesValue(event.name, \\\"Low Storage Warning\\\") or matchesPhrase(event.name, \\\"*AWS Security group*\\\") and  matchesPhrase(display_id, \\\"*P*\\\") or matchesPhrase(event.name, \\\"*Public access to remote server administration*\\\") and  matchesPhrase(display_id, \\\"*P*\\\") or matchesPhrase(event.name, \\\"*AwsS3Bucket*\\\") and  matchesPhrase(display_id, \\\"*P*\\\")\\n| filter dt.davis.is_duplicate==false\\n| filter matchesPhrase(entity_tags, \\\"Dynatrace-SSM-Action-Demo_\"+input.awsaccountid+\"\\\") \\n| filter matchesValue(event.kind, \\\"DAVIS_PROBLEM\\\") and matchesValue(event.status, \\\"CLOSED\\\") \\n| fieldsadd none = \\\"none\\\"\\n| filter if(matchesPhrase($ProblemType, \\\"All\\\"), none==none,else:if(matchesPhrase($ProblemType, \\\"securityhub\\\"), matchesPhrase(event.name, \\\"*Public access to remote server administration*\\\"),else:matchesPhrase(event.name, $ProblemType)))\\n| summarize countDistinct(display_id) , alias: Number_of_open_davis_problems\\n//| fields concat( Number_of_open_davis_problems,\\\" 🧠 \\\")\", \"visualization\": \"singleValue\", \"visualizationSettings\": { \"singleValue\": { \"label\": \"Solved Problems 🧠\", \"recordField\": \"Number_of_open_davis_problems\", \"prefixIcon\": \"DavisAiIcon\", \"trend\": { \"isVisible\": true } }, \"thresholds\": [ { \"id\": 1, \"field\": \"Number_of_open_davis_problems\", \"title\": \"\", \"isEnabled\": true, \"rules\": [ { \"id\": 0, \"color\": { \"Default\": \"var(--dt-colors-charts-categorical-color-13-default, #1c520a)\" }, \"comparator\": \"≥\", \"label\": \"\", \"value\": 0 }, { \"id\": 1, \"color\": { \"Default\": \"var(--dt-colors-charts-categorical-color-13-default, #1c520a)\" }, \"comparator\": \"≥\", \"label\": \"\", \"value\": 1 }, { \"id\": 2, \"color\": { \"Default\": \"var(--dt-colors-charts-categorical-color-13-default, #1c520a)\" }, \"comparator\": \"≥\", \"label\": \"\", \"value\": 2 } ] } ] }, \"querySettings\": { \"maxResultRecords\": 1000, \"defaultScanLimitGbytes\": 500, \"maxResultMegaBytes\": 100, \"defaultSamplingRatio\": 10, \"enableSampling\": false }, \"davis\": {} }, \"32\": { \"type\": \"markdown\", \"content\": \"# Casino Observability\\n--- \\n \" } }, \"layouts\": { \"0\": { \"x\": 0, \"y\": 11, \"w\": 7, \"h\": 4 }, \"1\": { \"x\": 7, \"y\": 11, \"w\": 7, \"h\": 4 }, \"3\": { \"x\": 0, \"y\": 7, \"w\": 7, \"h\": 4 }, \"4\": { \"x\": 0, \"y\": 1, \"w\": 3, \"h\": 2 }, \"5\": { \"x\": 3, \"y\": 1, \"w\": 3, \"h\": 2 }, \"6\": { \"x\": 6, \"y\": 1, \"w\": 3, \"h\": 2 }, \"7\": { \"x\": 9, \"y\": 1, \"w\": 3, \"h\": 2 }, \"8\": { \"x\": 12, \"y\": 1, \"w\": 3, \"h\": 2 }, \"9\": { \"x\": 15, \"y\": 1, \"w\": 3, \"h\": 2 }, \"10\": { \"x\": 0, \"y\": 3, \"w\": 7, \"h\": 4 }, \"13\": { \"x\": 7, \"y\": 7, \"w\": 7, \"h\": 4 }, \"15\": { \"x\": 14, \"y\": 3, \"w\": 10, \"h\": 5 }, \"16\": { \"x\": 18, \"y\": 1, \"w\": 3, \"h\": 2 }, \"17\": { \"x\": 14, \"y\": 8, \"w\": 10, \"h\": 7 }, \"18\": { \"x\": 21, \"y\": 1, \"w\": 3, \"h\": 2 }, \"21\": { \"x\": 0, \"y\": 15, \"w\": 24, \"h\": 2 }, \"22\": { \"x\": 7, \"y\": 3, \"w\": 7, \"h\": 4 }, \"23\": { \"x\": 0, \"y\": 17, \"w\": 24, \"h\": 1 }, \"24\": { \"x\": 15, \"y\": 18, \"w\": 9, \"h\": 4 }, \"25\": { \"x\": 9, \"y\": 18, \"w\": 6, \"h\": 4 }, \"26\": { \"x\": 3, \"y\": 18, \"w\": 6, \"h\": 4 }, \"27\": { \"x\": 0, \"y\": 18, \"w\": 3, \"h\": 4 }, \"28\": { \"x\": 0, \"y\": 22, \"w\": 3, \"h\": 4 }, \"29\": { \"x\": 3, \"y\": 22, \"w\": 12, \"h\": 8 }, \"30\": { \"x\": 15, \"y\": 22, \"w\": 9, \"h\": 8 }, \"31\": { \"x\": 0, \"y\": 26, \"w\": 3, \"h\": 4 }, \"32\": { \"x\": 0, \"y\": 0, \"w\": 24, \"h\": 1 } }, \"importedWithCode\": false, \"settings\": {} }\n  let content_blob = new Blob([JSON.stringify(content, null, 2)], {\n    type: 'application/json',\n  });\n  let config = {\n    \"body\": {\n      \"name\": \"AWS Automation \"+input.awsaccountid+\"\",\n      \"type\": \"dashboard\",\n      \"content\": content_blob\n      }\n  }; \n  let dashboard_url =\"\"\n  try {\n      let create = await documentsClient.createDocument(config);  \n      dashboard_url = getEnvironmentUrl()+\"/ui/apps/dynatrace.dashboards/dashboard/\"+ create.id;  \n      let share = await documentsClient.transferDocumentOwner({\n        id: create.id,\n        body: { newOwnerId: \"\"+owner+\"\" },\n      }); \n    \n    } catch (error: unknown) {\n      \n  }\nn  return { \"Dashboard\": dashboard_url   };\n}"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:run-javascript",
      "active": true,
      "position": {
        "x": 0,
        "y": 1
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{input()[\"create_dashboards\"] == true}}",
        "states": {
          "add-user-to-groups": "OK"
        }
      },
      "description": "Run custom JavaScript code.",
      "predecessors": [
        "add-user-to-groups"
      ]
    },
    "add-user-to-groups": {
      "name": "add-user-to-groups",
      "input": {
        "url": "{% if 'sprint' in environment().url %}https://api-hardening.internal.dynatracelabs.com/iam/v1/accounts/{{input()[\"dtaccountuid\"] }}/users/{{input()[\"owner_email\"]}}{% else %}https://api.dynatrace.com/iam/v1/accounts/{{input()[\"dtaccountuid\"] }}/users/{{input()[\"owner_email\"]}}{% endif %}",
        "method": "POST",
        "headers": {
          "authorization": "Bearer {{ result(\"get-dt-oauth-token-2\").token }}"
        },
        "payload": "[\"{{_.item.json[0].uuid }}\"]",
        "failOnResponseCodes": "400-599"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:http-function",
      "active": true,
      "position": {
        "x": -1,
        "y": 4
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{input()[\"create_workflow_groups_and_policies\"] == true}}",
        "states": {
          "add-policies-to-service-user-group": "OK"
        }
      },
      "withItems": "item in {{result(\"create-workflow-groups\")}}",
      "concurrency": 1,
      "description": "Issue an HTTP request to any API.",
      "predecessors": [
        "add-policies-to-service-user-group"
      ]
    },
    "get-dt-oauth-token": {
      "name": "get-dt-oauth-token",
      "input": {
        "script": "import { execution } from '@dynatrace-sdk/automation-utils';\nimport { executionsClient, actionExecutionsClient  } from '@dynatrace-sdk/client-automation';\nimport { queryExecutionClient } from '@dynatrace-sdk/client-query';\nimport { credentialVaultClient } from '@dynatrace-sdk/client-classic-environment-v2';\nimport { workflowsClient } from \"@dynatrace-sdk/client-automation\";\nimport { getEnvironmentUrl } from '@dynatrace-sdk/app-environment';\n\n\nexport default async function ({ execution_id, action_execution_id }) {\n\n  const { input } = await fetch(`/platform/automation/v1/executions/${execution_id}`).then((res) => res.json());\n  let data1 = \"\"\n  let workflow1 = \"\"\n  // import workflow\n\n  const grant_type = encodeURIComponent(\"client_credentials\");\n  const scope = encodeURIComponent(\"iam-policies-management iam:policies:write iam:policies:read iam:bindings:write iam:bindings:read iam:effective-permissions:read iam:service-users:use iam:limits:read iam:boundaries:read iam:boundaries:write account-idm-read iam:users:read iam:groups:read account-idm-write account-env-read account-env-write account-uac-read account-uac-write\");\n  //const scope = encodeURIComponent(\"automation:workflows:read automation:workflows:write\");\n  const client_id = encodeURIComponent(input[\"dt_oauth_client_id\"]);\n  const client_secret = encodeURIComponent(input[\"dt_oauth_client_secret\"]);\n\n  const options = {\n    method: \"POST\",\n    headers: {\n      'content-type': \"application/x-www-form-urlencoded\",\n    },\n      body: \"grant_type=\" + grant_type + \"&scope=\" + scope + \"&client_id=\" + client_id + \"&client_secret=\" + client_secret\n  };\n\n  let ssourl = \"\"\n  var url = getEnvironmentUrl()\n  if( url.indexOf('sprint') >= 0){\n   ssourl = \"https://sso-sprint.dynatracelabs.com/sso/oauth2/token\"\n  } else {\n   ssourl=\"https://sso.dynatrace.com/sso/oauth2/token\"\n  }\n  console.log(ssourl);\n  \n  const resp = await fetch(ssourl,options);\n  console.log(resp.status);\n\n\n  const resp_json = await resp.json();\n  const bearer_token = await resp_json['access_token'];\n  return { \"token\": bearer_token, \"policy_workflow\": workflow1 };\n}"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:run-javascript",
      "active": true,
      "position": {
        "x": -3,
        "y": 1
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{input()[\"create_workflow_groups_and_policies\"] == true}}",
        "states": {}
      },
      "description": "Run custom JavaScript code.",
      "predecessors": []
    },
    "print-delete-array": {
      "name": "print-delete-array",
      "input": {
        "script": "// optional import of sdk modules\nimport { execution } from '@dynatrace-sdk/automation-utils';\n\nexport default async function ({ executionId }) {\n  // your code goes here\n  // e.g. get the current execution\n  const configGet = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/create-policies/result`);\n  const configBody = await configGet.json();\n\n  let policies: string[] = [];\n  for (const key in configBody) {\n  console.log(`${key}: ${configBody[key as keyof configBody]}`);\n  policies.unshift(`${configBody[key as keyof configBody]}`)  \n  }\n\n  console.log(policies)\n\n  const configGet1 = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/create-workflow-groups/result`);\n  const configBody1 = await configGet1.json();\n  let groups: string[] = [];\n  groups = [\"\"+configBody1[0].json[0].uuid+\"\",\"\"+configBody1[1].json[0].uuid+\"\",\"\"+configBody1[2].json[0].uuid+\"\"]\n  console.log(groups)\n\n\n  return { policies: policies, groups: groups };\n}"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:run-javascript",
      "active": true,
      "position": {
        "x": 3,
        "y": 2
      },
      "conditions": {
        "else": "SKIP",
        "states": {
          "create-aws-ebs-remediate-low-storage-remediation-wf": "ANY"
        }
      },
      "withItems": "item in [{{ result(\"create-policies\") }}]",
      "concurrency": 1,
      "description": "Run custom JavaScript code.",
      "predecessors": [
        "create-aws-ebs-remediate-low-storage-remediation-wf"
      ]
    },
    "s3_delete_bucket_1": {
      "name": "s3_delete_bucket_1",
      "input": {
        "Bucket": "dynatraceinstall{{execution().id | replace(\"-\",\"\")}}",
        "region": "{{ input()[\"awsregion\"]}}",
        "schema": "builtin:hyperscaler-authentication.aws.connection",
        "connection": "{% set awsconnection = input()[\"create-dynatrace-oidc-connection-settings\"][\"dynatraceawsconnection\"] %}\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}"
      },
      "action": "dynatrace.aws.connector:s3-delete-bucket",
      "position": {
        "x": 3,
        "y": 4
      },
      "conditions": {
        "states": {
          "remove_objects_from_s3": "OK"
        }
      },
      "description": "Deletes the S3 bucket.",
      "predecessors": [
        "remove_objects_from_s3"
      ]
    },
    "wait-till-agent-up": {
      "name": "wait-till-agent-up",
      "input": {
        "query": "timeseries { max(dt.host.disk.used.percent), from:now()-5m,  value.A = avg(dt.host.disk.used.percent, scalar: true) }, by: { host.name, dt.source_entity, dt.entity.host, dt.entity.ec2_instance }, filter: { matchesValue(entityAttr(dt.entity.host, \"entity.name\"), \"Dynatrace-SSM-Action-Demo_{{input()[\"awsaccountid\"] }}*\") }\n| fieldsAdd dt.entity.host.name = entityName(dt.entity.host)\n| fieldsAdd dt.entity.ec2_instance.name = entityName(dt.entity.ec2_instance)",
        "failOnEmptyResult": true
      },
      "retry": {
        "count": 99,
        "delay": 60,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:execute-dql-query",
      "position": {
        "x": 4,
        "y": 2
      },
      "conditions": {
        "states": {
          "create-delete-workflow": "OK"
        }
      },
      "description": "Make use of Dynatrace Grail data in your workflow.",
      "predecessors": [
        "create-delete-workflow"
      ]
    },
    "create-service-user": {
      "name": "create-service-user",
      "input": {
        "url": "{% if 'sprint' in environment().url %}https://api-hardening.internal.dynatracelabs.com/iam/v1/accounts/{{input()[\"dtaccountuid\"] }}/service-users{% else %}https://api.dynatrace.com/iam/v1/accounts/{{input()[\"dtaccountuid\"] }}/service-users{% endif %}",
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "authorization": "Bearer {{ result(\"get-dt-oauth-token\").token }}"
        },
        "payload": "{\n  \"name\": \"workflow-service-user\"\n}",
        "failOnResponseCodes": "400-599"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:http-function",
      "active": true,
      "position": {
        "x": -3,
        "y": 2
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{input()[\"create_workflow_groups_and_policies\"] == true}}",
        "states": {
          "get-dt-oauth-token": "OK"
        }
      },
      "description": "Issue an HTTP request to any API.",
      "predecessors": [
        "get-dt-oauth-token"
      ]
    },
    "create-subworkflows": {
      "name": "create-subworkflows",
      "input": {
        "script": "// optional import of sdk modules\nimport { execution } from '@dynatrace-sdk/automation-utils';\nimport { workflowsClient } from \"@dynatrace-sdk/client-automation\";\nimport { getEnvironmentUrl } from '@dynatrace-sdk/app-environment';\nimport { documentsClient } from \"@dynatrace-sdk/client-document\";\nimport { getEnvironmentId } from '@dynatrace-sdk/app-environment';\n\nexport default async function ({ executionId , action_execution_id }) {\n  // your code goes here\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\n\n  const configGet = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/create-service-user/result`);\n  const configBody = await configGet.json();\n\n  const environmentId = getEnvironmentId();\n  const actor = configBody.json.uid  \n\n  const configGetx = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/get-users-id/result`);\n  const configBodyx = await configGetx.json();\n  let owner = \"\"\n  for (let items of configBodyx[\"json\"][\"items\"]) {\n    if(items.email == input[\"owner_email\"])\n     owner = items.uid\n  }\n\n  \n  \n\n\n  \n  // e.g. get the current execution\n  var endresult = {}\n  let subworkflow = \"\"\n\n  //console.log(input)\n  //console.log(input[\"create-s3bucket-remediation-workflows\"][\"install\"])\n  if (input[\"create-s3bucket-remediation-workflows\"][\"install\"] == true){\n   try {\n      const data2 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"74a063e4-576a-4955-b477-1c531bcf7ad1\", \"title\": \"subworkflow - dynatrace ingest custom info event\", \"tasks\": { \"ingest-event\": { \"name\": \"ingest-event\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\nimport { EventIngest, EventIngestEventType, eventsClient } from '@dynatrace-sdk/client-classic-environment-v2';\\nimport { getEnvironmentUrl } from \\\"@dynatrace-sdk/app-environment\\\";\\n\\nexport default async function ({ executionId }) {\\n\\n  \\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\\n\\n  console.log(input.entitySelector)\\n\\n\\n  let final: string | undefined | null;\\n  if (input.entitySelector == \\\"\\\") {\\n      const xevent: EventIngest = {\\n        eventType: EventIngestEventType.CustomInfo,\\n        title: input.title,\\n        properties: input.properties, \\n      };\\n      console.log(xevent)\\n      const result = await eventsClient.createEvent({ body: xevent })\\n      while (final  === undefined  || final  === null || final  === \\\"\\\") {\\n          const data = await eventsClient.getEvents({\\n            eventSelector: \\\"correlationId(\\\\\\\"\\\"+result.eventIngestResults[0].correlationId+\\\"\\\\\\\")\\\"\\n          });\\n          final = data.events[0]\\n      }\\n\\n    \\n      return final;\\n   \\n  } else {\\n      const xevent: EventIngest = {\\n            eventType: EventIngestEventType.CustomInfo,\\n            title: input.title,\\n            entitySelector: input.entitySelector,\\n            properties: input.properties,\\n      };\\n      console.log(xevent)\\n      const result = await eventsClient.createEvent({ body: xevent })\\n      while (final  === undefined  || final  === null || final  === \\\"\\\") {\\n          const data = await eventsClient.getEvents({\\n            eventSelector: \\\"correlationId(\\\\\\\"\\\"+result.eventIngestResults[0].correlationId+\\\"\\\\\\\")\\\"\\n          });\\n          final = data.events[0]\\n      }\\n\\n    \\n      return final;\\n  }\\n    \\n\\n  \\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [] } }, \"description\": \"Subworkflow to ingest a custom event into dynatrace without needed to know javascript\\n\\nParameters:\\n(Required) Custom Event Json\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"ingest-event\\\") }}\", \"input\": { \"title\": \"start disk cleanup on host\", \"properties\": { \"workflow\": \"test\", \"remediation_step\": \"start disk cleanup\", \"remediation_host_name\": \"test\", \"remediation_entity_name\": \"test\" }, \"entitySelector\": \"\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data2.id;\n      console.log(subworkflow);\n      let workflow2 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data2.id;\n      endresult[\"subworkflow - dynatrace ingest custom info event\"] = workflow2;\n    } catch (error: unknown) {\n      console.log(error)\n    }\n    \n   try {   \n      const data3 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"4486e1fc-6862-4a42-a6e8-39f080f57ff1\", \"title\": \"subworkflow - dynatrace close problem\", \"tasks\": { \"close-problem\": { \"name\": \"close-problem\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\nimport { problemsClient } from '@dynatrace-sdk/client-classic-environment-v2';\\nimport { getEnvironmentUrl } from \\\"@dynatrace-sdk/app-environment\\\";\\n\\nexport default async function ({ executionId }) {\\n  // your code goes here\\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\\n\\n  \\n  console.log(input)\\n\\n  \\n\\n  const data = await problemsClient.closeProblem({\\n    problemId: \\\"\\\"+input['event.id']+\\\"\\\",\\n    body: { message: \\\"solved\\\" }\\n  });\\n\\n\\n  \\n\\n  return data;\\n}\" }, \"retry\": { \"count\": 5, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-javascript\", \"position\": { \"x\": 0, \"y\": 1 }, \"conditions\": { \"states\": {} }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [] } }, \"description\": \"Subworkflow to close a Davis Problem\\n\\nParameters:\\n\\nevent.id = Dyantrace event id of the Davis Problem\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"close-problem\\\") }}\", \"input\": { \"event.id\": \"2847618168410183866_1744904520000V2\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data3.id;\n      console.log(subworkflow);\n      let workflow3 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data3.id;\n      endresult[\"subworkflow - dynatrace close problem\"] = workflow3; \n    } catch (error: unknown) {\n      console.log(error)\n    }\n\n   try {\n      const data12x = await workflowsClient.createWorkflow({\n        body: { \"id\": \"20661ec0-29d5-471f-9973-29679d5fe908\", \"title\": \"subworkflow - aws wait for systems manager  document execution\", \"tasks\": { \"get-status\": { \"name\": \"get-status\", \"input\": { \"region\": \"{{ input()[\\\"awsregion\\\"] }}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"AutomationExecutionId\": \"{{ input()[\\\"AutomationExecutionId\\\"] }}\" }, \"action\": \"dynatrace.aws.connector:ssm-get-automation-execution\", \"active\": true, \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Get detailed information about a particular Automation execution\", \"predecessors\": [] }, \"check-status\": { \"name\": \"check-status\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\n\\nexport default async function ({ execution_id }) {\\n  const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/get-status/result`);\\n  const configBody = await configGet.json();\\n  const status = configBody.AutomationExecution.AutomationExecutionStatus.toUpperCase()\\n  console.log(status)\\n  \\n  if (status ==\\\"INPROGRESS\\\" || status ==\\\"PENDING\\\" ) {\\n        console.log(\\\"Automation still running, restarting again!\\\");\\n        throw new Error(\\\"Automation still running, restarting again!\\\");\\n  } \\n\\n  return configBody;\\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"active\": true, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"get-status\": \"OK\" } }, \"description\": \"Build a custom task running js Code\", \"predecessors\": [ \"get-status\" ] } }, \"description\": \"Subworkflow to wait for aws ssm document execution to finish\\n\\nThis subworkflow is used in subworkflows that execute ssm documents\\nto wait for the execution to finish and check the status of the execution.\\nIf the execution wasnt successful the subworklow will fail so that\\nparent workflows can respond with rerun on error.\\n\\nParameters: \\n\\nawsregion: (Required) Region in which the SSM document runs\\nAutomationExecutionId: (Required) Execution id of the SSM document (Returned by Start SSM actions)\\ndynatraceawsconnection: (Required) Dynatrace oidc connection name\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"check-status\\\").AutomationExecution }}\", \"input\": { \"awsregion\": \"us-east-1\", \"AutomationExecutionId\": \"08093423-3443-4182-8397-12e802518f29\", \"dynatraceawsconnection\": \"awsplayground\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data12x.id;\n      console.log(subworkflow);\n      let workflow12x = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data12x.id;\n      endresult[\"subworkflow - aws wait for systems manager  document execution\"] = workflow12x;\n    } catch (error: unknown) {\n      console.log(error)\n    }\n\n   try {\n      const data13x = await workflowsClient.createWorkflow({\n        body: { \"id\": \"9a868582-bf92-4d2c-aea5-90898f7e86b8\", \"title\": \"subworkflow - dynatrace ingest custom alert\", \"tasks\": { \"ingest-event\": { \"name\": \"ingest-event\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\nimport { EventIngest, EventIngestEventType, eventsClient } from '@dynatrace-sdk/client-classic-environment-v2';\\nimport { getEnvironmentUrl } from \\\"@dynatrace-sdk/app-environment\\\";\\n\\nexport default async function ({ executionId }) {\\n\\n  \\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\\n\\n  //console.log(input)\\n\\n  const xevent: EventIngest = {\\n    eventType: EventIngestEventType.CustomAlert,\\n    title: input.title,\\n    properties: input.properties,\\n  };\\n  //console.log(xevent)\\n  const result = await eventsClient.createEvent({ body: xevent })\\n  console.log(result.eventIngestResults[0].correlationId)\\n  let final: string | undefined | null;\\n  while (final  === undefined  || final  === null || final  === \\\"\\\") {\\n      const data = await eventsClient.getEvents({\\n        eventSelector: \\\"correlationId(\\\\\\\"\\\"+result.eventIngestResults[0].correlationId+\\\"\\\\\\\")\\\"\\n      });\\n      final = data.events[0]\\n  }\\n  //console.log(data)\\n  //console.log(data.events[0])\\n  console.log(final)\\n  return final;\\n\\n   \\n\\n  \\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"position\": { \"x\": 0, \"y\": 1 }, \"conditions\": { \"custom\": \"\", \"states\": {} }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [] } }, \"description\": \"Subworkflow to ingest/create a custom alert into dynatrace without needed to know javascript\\n\\nParameters:\\nCustom Alert Json\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"ingest-event\\\") }}\", \"input\": { \"title\": \"Security group 5.2 EC2 security groups should not allow ingress from 0.0.0.0/0 to remote server administration ports\", \"properties\": { \"region\": \"us-east-1\", \"source\": \"aws.securityhub\", \"account\": \"589650258462\", \"version\": \"0\", \"object.id\": \"arn:aws:ec2:us-east-1:589650258462:security-group/sg-067c64eafd2851f4c\", \"aws.region\": \"us-east-1\", \"event.kind\": \"SECURITY_EVENT\", \"event.name\": \"Compliance finding event\", \"finding.id\": \"arn:aws:securityhub:us-east-1:589650258462:subscription/cis-aws-foundations-benchmark/v/3.0.0/5.2/finding/325d0d40-09a2-4211-883a-b1952df68dba\", \"detail-type\": \"Security Hub Findings - Imported\", \"object.name\": \"arn:aws:ec2:us-east-1:589650258462:security-group/sg-067c64eafd2851f4c\", \"object.type\": \"AwsEc2SecurityGroup\", \"product.name\": \"Security Hub\", \"connection_id\": \"vu9U3hXa3q0AAAABAClhcHA6ZHluYXRyYWNlLmF3cy5zZWN1cml0eWh1Yjpjb25uZWN0aW9ucwAGdGVuYW50AAZ0ZW5hbnQAJGMzZjY1YTUwLTA2YTktM2NkNC1hODJhLTA0OTNhM2Y1NzJjOb7vVN4V2t6t\", \"event.version\": \"1.308\", \"finding.score\": \"0\", \"finding.title\": \"5.2 EC2 security groups should not allow ingress from 0.0.0.0/0 to remote server administration ports\", \"aws.account.id\": \"589650258462\", \"event.category\": \"COMPLIANCE\", \"event.provider\": \"AWS Security Hub\", \"finding.status\": \"FAILED\", \"product.vendor\": \"AWS\", \"aws.account.name\": \"AWS Sandbox Environments\", \"finding.severity\": \"INFORMATIONAL\", \"event.description\": \"A compliance control EC2.53 on an AwsEc2SecurityGroup object arn:aws:ec2:us-east-1:589650258462:security-group/sg-067c64eafd2851f4c had FAILED status.\", \"security_group_id\": \"sg-067c64eafd2851f4c\", \"compliance.control\": \"EC2.53\", \"affected_entity_ids\": \"https://us-east-1.console.aws.amazon.com/ec2/home?region=us-east-1#SecurityGroup:groupId=sg-067c64eafd2851f4c\", \"finding.description\": \"Public access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise.\", \"finding.time.created\": \"2025-07-09T09:46:54.123000000Z\", \"affected_entity_types\": \"AWS Security Group\", \"dt.openpipeline.source\": \"/platform/ingest/v1/events.security\", \"dt.security.risk.level\": \"NONE\", \"dt.security.risk.score\": 0, \"aws.link.to.security.group\": \"https://us-east-1.console.aws.amazon.com/ec2/home?region=us-east-1#SecurityGroup:groupId=sg-067c64eafd2851f4c\" } }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data13x.id;\n      console.log(subworkflow);\n      let workflow13x = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data13x.id;\n      endresult[\"subworkflow - dynatrace ingest custom alert\"] = workflow13x;\n    } catch (error: unknown) {\n      console.log(error)\n    }\n    \n  }\n\n  if (input[\"create-aws-security-group-remediation-workflows\"][\"install\"] == true){\n\n    try {\n      const data77 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"f8fdc88c-9a8c-4f3b-8198-9a021996515e\", \"title\": \"subworkflow - aws disable public access for security group\", \"tasks\": { \"check-status\": { \"name\": \"check-status\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\n\\nexport default async function ({ execution_id }) {\\n  const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/wait-for-ssm-execution-completed/result`);\\n  const configBody = await configGet.json();\\n  const status = configBody.AutomationExecutionStatus.toUpperCase()\\n  console.log(status)\\n  \\n  if (status !=\\\"SUCCESS\\\") {\\n        console.log(\\\"SSM Document Execution has Failed!\\\");\\n        throw new Error(\\\"SSM Document Execution has Failed!\\\");\\n  } \\n\\n  return configBody;\\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"states\": { \"wait-for-ssm-execution-completed\": \"OK\" } }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [ \"wait-for-ssm-execution-completed\" ] }, \"wait-for-ssm-execution-completed\": { \"name\": \"wait-for-ssm-execution-completed\", \"input\": { \"workflowId\": \"20661ec0-29d5-471f-9973-29679d5fe908\", \"workflowInput\": \"{\\n\\\"AutomationExecutionId\\\":\\\"{{result(\\\"systems_manager_start_automation_execution_1\\\").AutomationExecutionId }}\\\",\\n\\\"awsregion\\\": \\\"{{input()[\\\"awsregion\\\"] }}\\\",\\n\\\"dynatraceawsconnection\\\": \\\"{{ input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"retry\": { \"count\": 99, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"timeout\": 604800, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"systems_manager_start_automation_execution_1\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"systems_manager_start_automation_execution_1\" ] }, \"systems_manager_start_automation_execution_1\": { \"name\": \"systems_manager_start_automation_execution_1\", \"input\": { \"region\": \"{{ input()[\\\"awsregion\\\"]}}\", \"Parameters\": \"{ \\n  \\\"GroupId\\\": [\\\"{{input()[\\\"awssecuritygroupid\\\"] }}\\\"],\\n  \\\"IpAddressToBlock\\\": [\\\"{{input()[\\\"ipaddresstoblock\\\"] }}\\\"]\\n}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"DocumentName\": \"AWS-DisablePublicAccessForSecurityGroup\" }, \"retry\": { \"count\": 5, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.aws.connector:ssm-start-automation-execution\", \"active\": true, \"timeout\": 604800, \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Initiates execution of an Automation runbook\", \"predecessors\": [] } }, \"description\": \"Subworkflow to disable SSH and RDP ports opened to IP address specified, or open  to all addresses (0.0.0.0/0) if no address is specified.\\n\\nThe security group must have existing rules specifically on the SSH and RDP ports in order for ingress to be disabled.\\n\\nParameters:\\n\\nawssecuritygroupid: (Required) aws security group id to close traffic \\nipaddresstoblock: (Optional) Additional Ipv4 or Ipv6 address to block access from (ex:1.2.3.4/32) (if not given all ip addresses will be taken into consideration)\\nawsregion: (Required) region in which the security group resides\\ndynatraceawsconnection: (Required) the connection name of the Dynatrace OIDC Connection\\n\\nThis subworkflow Needs subworkflow \\\"subworkflow - aws wait for systems manager document execution\\\"\\nSubworkflow will wait for ssm document execution and will fail if ssm document fails\\n\\nThis subworkflow uses the out of the box AWS SSM document AWS-DisablePublicAccessForSecurityGroup\\nhttps://us-east-1.console.aws.amazon.com/systems-manager/documents/AWS-DisablePublicAccessForSecurityGroup/description?region=us-east-1\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"wait-for-ssm-execution-completed\\\") }}\", \"input\": { \"awsregion\": \"us-east-1\", \"ipaddresstoblock\": \"0.0.0.0/0\", \"awssecuritygroupid\": \"sg-010d8b10c89d61c2c\", \"dynatraceawsconnection\": \"\"+input[ \"create-dynatrace-oidc-connection-settings\" ].dynatraceawsconnection+\"\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data77.id;\n      console.log(subworkflow);\n      let workflow77 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data77.id;\n      endresult[\"subworkflow - aws disable public access for security group\"] = workflow77;\n    } catch (error: unknown) {\n      console.log(error)\n    }   \n    \n  \n  }\n\n  \n\n  if (input[\"AWS-Ec2-remediate-high-cpu-or-memory-consumption-by-processes\"][\"install\"] == true){\n   try {\n      const data4 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"67df876f-6e4a-4942-b565-7f40c502daec\", \"title\": \"subworkflow - dynatrace get all problem data\", \"tasks\": { \"get-problem-info\": { \"name\": \"get-problem-info\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\nimport { problemsClient } from '@dynatrace-sdk/client-classic-environment-v2';\\nimport { getEnvironmentUrl } from \\\"@dynatrace-sdk/app-environment\\\";\\n\\nexport default async function ({ executionId }) {\\n  // your code goes here\\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\\n\\n  \\n  console.log(input)\\n  console.log(input.display_id)\\n  \\n\\n  const data = await problemsClient.getProblem({\\n    problemId: \\\"\\\"+input['event.id']+\\\"\\\"\\n  });\\n  //console.log(data)\\n  // Leave comment\\n\\n\\n  // calculate jira impact level\\n  let impact = \\\"Lowest\\\"; // possible jira impact values Lowest, Low, Medium, High, Highest\\n  let affected_users: number = 0;\\n\\n    // calculate amount of impacted users\\n  for (let impacts of data.impactAnalysis.impacts) {\\n      \\n  affected_users = affected_users + impacts.estimatedAffectedUsers\\n  console.log(affected_users);\\n    \\n    \\n  }\\n  \\n  // if impactLevel equals APPLICATION and severityLevel equals AVAILABILITY and no affected users set priority to high\\n  if (data.impactLevel == \\\"APPLICATION\\\" && data.severityLevel == \\\"AVAILABILITY\\\" && affected_users == 0) {\\n  impact = \\\"High\\\";    \\n  }\\n  // if impactLevel equals APPLICATION and severityLevel equals AVAILABILITY and affected users set priority to highest\\n  if (data.impactLevel == \\\"APPLICATION\\\" && data.severityLevel == \\\"AVAILABILITY\\\" &&  affected_users > 0) {\\n  impact = \\\"Highest\\\";     \\n  }\\n\\n  if (data.impactLevel == \\\"APPLICATION\\\" && data.severityLevel == \\\"RESOURCE_CONTENTION\\\" &&  affected_users > 0) {\\n  impact = \\\"Highest\\\";     \\n  }\\n\\n  if (data.impactLevel == \\\"APPLICATION\\\" && data.severityLevel == \\\"RESOURCE_CONTENTION\\\" && affected_users == 0) {\\n  impact = \\\"High\\\";     \\n  }\\n  \\n  \\n  \\n  \\n  // with a focus on Business Resilience we always chose the highest priority if end users are affected\\n  if (affected_users > 0) {\\n  impact = \\\"Highest\\\";     \\n  }\\n\\n  // add jira impact to problem details\\n  data[\\\"jira_impact\\\"] = impact;\\n  \\n  console.log(\\\"Problem Impact Level: \\\"+data.impactLevel);\\n  console.log(\\\"Problem Severity Level: \\\"+data.severityLevel);\\n  console.log(\\\"Number of affected users: \\\"+affected_users);\\n  console.log(\\\"Setting Jira Impact to: \\\"+impact);\\n  \\n\\n  return data;\\n}\" }, \"retry\": { \"count\": 5, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-javascript\", \"position\": { \"x\": 0, \"y\": 1 }, \"conditions\": { \"states\": {} }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [] } }, \"description\": \"Subworkflow to get all data of a Davis Problem.\\n\\nThe Davis Problem trigger does not contain all necessary information\\nfrom a Problem card, for example the Impact field and affected users\\nwhich is important to determine the Priority of a Problem, to then\\nset a Priority in tracking tools like Jira and Service now. \\nThis Sub Workflow makes it easy to get that addtional information\\nwithout needing to know Javascript.\\n\\nThe Subworkflow also contains setting the priority for a Jira\\nissue from the Data of the Problem card. This might not\\nbe the same for every customer, but easy adjustable in the \\nsection \\\"// calculate jira impact level\\\" in the get-problem-info\\ntask.\\n\\nParameters:\\n\\nevent.id: (Required) Dyantrace event id\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"get-problem-info\\\") }}\", \"input\": { \"event.id\": \"2847618168410183866_1744904520000V2\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data4.id;\n      console.log(subworkflow);\n    \n      let workflow4 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data4.id;\n      endresult[\"subworkflow - dynatrace get all problem data\"] = workflow4; \n    } catch (error: unknown) {\n      console.log(error)\n    }\n\n   try {    \n      const data5 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"3e5454a4-50ad-4dab-914c-638b6df5b283\", \"title\": \"subworkflow - aws get host data of ec2 instance\", \"tasks\": { \"dql-get-host-info\": { \"name\": \"dql-get-host-info\", \"input\": { \"query\": \"fetch dt.entity.host\\n| filter matchesPhrase(id, \\\"{{input()[\\\"host_entity_id\\\"]}}\\\")\\n| fieldsadd  additionalSystemInfo,belongs_to,ec2_id=runs_on[dt.entity.ec2_instance], entity.name, hostname=entity.detected_name, osArchitecture, osType, cpuCores, autoInjection, bitness, cloudType, clustered_by,  ebpfHasPublicTraffic,  state\\n| lookup  [fetch dt.entity.ec2_instance\\n| fieldsadd awscredentials=accessible_by[dt.entity.aws_credentials], awsInstanceId,awsInstanceType,awsNameTag, awsSecurityGroup, awsVpcName, arn, tags, id, regionName, accessible_by,amiId,balanced_by,beanstalkEnvironmentName,belongs_to,boshName,contains,publicHostName,publicIp,localIp,virtualizedDiskType,entity.name,lifetime, entity.type  ] , sourceField:ec2_id, lookupField:id, prefix:\\\"ec2_\\\"\\n| lookup  [smartscapeNodes \\\"AWS_EC2_INSTANCE\\\"\\n| parse aws.object,\\\"JSON:object\\\"\\n| fieldsadd object\\n| fieldsadd configuration=object[configuration] \\n| fieldsadd instanceId=configuration[instanceId]\\n| filter matchesPhrase(tags[Name],\\\"Dynatrace-SSM-Action-Demo_554565918391\\\")\\n| filter matchesPhrase(configuration[state][name],\\\"running\\\")\\n| fieldsadd blockDeviceMappings=configuration[blockDeviceMappings]\\n| expand blockDeviceMappings\\n| fieldsadd deviceName=blockDeviceMappings[deviceName], volumeid=blockDeviceMappings[ebs][volumeId], deleteOnTermination=blockDeviceMappings[ebs][deleteOnTermination] ] , sourceField:ec2_awsInstanceId, lookupField:instanceId, prefix:\\\"ebs_\\\"\\n| fieldsadd volumeid=ebs_volumeid\\n| lookup  [ timeseries max(dt.host.disk.used), by: { dt.entity.host, dt.entity.disk }\\n| fieldsAdd disksizex = arrayLast(`max(dt.host.disk.used)`)/1000000000\\n| fieldsadd disksize=round(disksizex), dt.entity.host, diskid=dt.entity.disk\\n] , sourceField:id, lookupField:dt.entity.host, prefix:\\\"disk_\\\"\\n| fieldsadd ebs_id=disk_diskid\\n| lookup  [ timeseries max(dt.host.disk.avail), by: { dt.entity.host }\\n| fieldsAdd disksizex = arrayLast(`max(dt.host.disk.avail)`)/1000000000\\n| fields disksize=round(disksizex), dt.entity.host\\n] , sourceField:id, lookupField:dt.entity.host, prefix:\\\"disk_avail_\\\"\\n| fieldsadd total_disk_size=disk_disksize + disk_avail_disksize, disk_used=disk_disksize, disk_available=disk_avail_disksize\\n| fieldsremove disk_avail_disksize,disk_disksize\", \"failOnEmptyResult\": true }, \"action\": \"dynatrace.automations:execute-dql-query\", \"active\": true, \"position\": { \"x\": 0, \"y\": 1 }, \"conditions\": { \"states\": {} }, \"description\": \"Executes DQL query\", \"predecessors\": [] } }, \"description\": \"Subworkflow to get data of an aws ec2 instance without needing to know dql\\n\\nAn easy way to get additional data of an aws host\\nsuch as instance id, volume id etc. which is needed\\nto for example resize an aws volume.\\n\\nParameters:\\n\\nhost_entity_id: (Required) Dynatrace Host Entity Id\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"dql-get-host-info\\\").records[0] }}\", \"input\": { \"host_entity_id\": \"HOST-EA0E775A9C448B02\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data5.id;\n      console.log(subworkflow);\n    \n      let workflow5 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data5.id;\n      endresult[\"subworkflow - aws get host data of ec2 instance\"] = workflow5; \n\n    } catch (error: unknown) {\n      console.log(error)\n    }\n\n\n   try {\n      const data6 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"cba39ee3-78da-4bb9-9caa-f42a3990cf3d\", \"title\": \"template - dynatrace remediate aws ec2 instance process or memory saturation\", \"tasks\": { \"calculate-size\": { \"name\": \"calculate-size\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\n\\nexport default async function ({ executionId }) {\\n  // your code goes here\\n  // e.g. get the current execution\\n  const aws_instance_sizes = [\\\"small\\\",\\\"medium\\\",\\\"large\\\",\\\"xlarge\\\",\\\"2xlarge\\\", \\\"4xlarge\\\", \\\"8xlarge\\\"]\\n  console.log(\\\"get AutomationExecutionId\\\")\\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\\n  const instance_type_split: string[] = input.ec2_instance_type.split(\\\".\\\");\\n  const current_instance_type = input.ec2_instance_type\\n\\n  const posof_c = aws_instance_sizes.indexOf(instance_type_split[1])\\n  const calc = posof_c + 1\\n  const resize_to = instance_type_split[0]+\\\".\\\"+aws_instance_sizes[calc] \\n  console.log(\\\"Resize to \\\"+resize_to+\\\"\\\")\\n\\n  return { \\\"current_instancetype\\\": current_instance_type,\\\"future_instancetype\\\": resize_to }}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"active\": true, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"else\": \"STOP\", \"custom\": \"\", \"states\": { \"check-for-recent-remediation\": \"OK\" } }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [ \"check-for-recent-remediation\" ] }, \"reboot-ec2-instance\": { \"name\": \"reboot-ec2-instance\", \"input\": { \"workflowId\": \"b9de7879-6723-43a0-92ca-5bae8294da4b\", \"workflowInput\": \"{\\n \\\"awsRegion\\\": \\\"{{input()[\\\"aws_region_name\\\"] }}\\\",\\n \\\"instanceIds\\\": \\\"{{input()[\\\"instance_id\\\"] }}\\\",\\n \\\"dynatraceawsconnection\\\":\\\"{{input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": -2, \"y\": 5 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").killprocess == true }}\", \"states\": { \"check-if-problem-is-solved-1\": \"ERROR\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"check-if-problem-is-solved-1\" ] }, \"resize-ec2-instance\": { \"name\": \"resize-ec2-instance\", \"input\": { \"workflowId\": \"e1ef703b-88ac-496a-a4a0-38805fe6e91c\", \"workflowInput\": \"{\\n\\\"awsregion\\\":\\\"{{input()[\\\"aws_region_name\\\"] }}\\\",\\n\\\"instanceid\\\":\\\"{{input()[\\\"instance_id\\\"] }}\\\",\\n\\\"resize_to_instance_type\\\":\\\"{{result(\\\"calculate-size\\\").future_instancetype }}\\\",\\n\\\"dynatraceawsconnection\\\":\\\"{{input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": -2, \"y\": 7 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").killprocess == true }}\", \"states\": { \"check-if-problem-is-solved-2\": \"ERROR\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"check-if-problem-is-solved-2\" ] }, \"reboot-ec2-instance-2\": { \"name\": \"reboot-ec2-instance-2\", \"input\": { \"workflowId\": \"b9de7879-6723-43a0-92ca-5bae8294da4b\", \"workflowInput\": \"{\\n \\\"awsRegion\\\": \\\"{{input()[\\\"aws_region_name\\\"] }}\\\",\\n \\\"instanceIds\\\": \\\"{{input()[\\\"instance_id\\\"] }}\\\",\\n \\\"dynatraceawsconnection\\\":\\\"{{input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"else\": \"STOP\", \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").restartinstance == true }}\", \"states\": { \"calculate-size\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"calculate-size\" ] }, \"resize-ec2-instance-2\": { \"name\": \"resize-ec2-instance-2\", \"input\": { \"workflowId\": \"e1ef703b-88ac-496a-a4a0-38805fe6e91c\", \"workflowInput\": \"{\\n\\\"awsregion\\\":\\\"{{input()[\\\"aws_region_name\\\"] }}\\\",\\n\\\"instanceid\\\":\\\"{{input()[\\\"instance_id\\\"] }}\\\",\\n\\\"resize_to_instance_type\\\":\\\"{{result(\\\"calculate-size\\\").future_instancetype }}\\\",\\n\\\"dynatraceawsconnection\\\":\\\"{{input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": 0, \"y\": 5 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").restartinstance == true }}\", \"states\": { \"check-if-problem-is-solved-5\": \"ERROR\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"check-if-problem-is-solved-5\" ] }, \"resize-ec2-instance-3\": { \"name\": \"resize-ec2-instance-3\", \"input\": { \"workflowId\": \"e1ef703b-88ac-496a-a4a0-38805fe6e91c\", \"workflowInput\": \"{\\n\\\"awsregion\\\":\\\"{{input()[\\\"aws_region_name\\\"] }}\\\",\\n\\\"instanceid\\\":\\\"{{input()[\\\"instance_id\\\"] }}\\\",\\n\\\"resize_to_instance_type\\\":\\\"{{result(\\\"calculate-size\\\").future_instancetype }}\\\",\\n\\\"dynatraceawsconnection\\\":\\\"{{input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": 3, \"y\": 3 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").resizeinstance == true }}\", \"states\": { \"calculate-size\": \"SUCCESS\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"calculate-size\" ] }, \"send-escalation-email\": { \"name\": \"send-escalation-email\", \"input\": { \"cc\": [], \"to\": [ \"daniel.braaf@dynatrace.com\" ], \"bcc\": [], \"taskId\": \"{{ task().id }}\", \"content\": \"Auto Remediation was not Successful\\nDynatrace Remediation Workflow: {{ result(\\\"set-variables\\\").dynatrace_apps_tenant_url }}/ui/apps/dynatrace.automations/executions/{{ execution().id }}\\nProblem id: {{result(\\\"get-problem-info\\\").records[0]['display_id']}} {{ result(\\\"set-variables\\\").dynatrace_apps_tenant_url }}/ui/apps/dynatrace.classic.problems/problems/problemdetails;gtf=-6h;gf=all;pid={{result(\\\"get-problem-info\\\").records[0][\\\"event.id\\\"] }}\\n\", \"subject\": \"Auto Remediation was not Successful\", \"executionId\": \"{{ execution().id }}\", \"environmentUrl\": \"https://kyw96254.apps.dynatrace.com\" }, \"action\": \"dynatrace.email:send-email\", \"active\": true, \"position\": { \"x\": -2, \"y\": 9 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").killprocess == true }}\", \"states\": { \"check-if-problem-is-solved-4\": \"ERROR\" } }, \"description\": \"Send email\", \"predecessors\": [ \"check-if-problem-is-solved-4\" ] }, \"send-escalation-email-2\": { \"name\": \"send-escalation-email-2\", \"input\": { \"cc\": [], \"to\": [ \"daniel.braaf@dynatrace.com\" ], \"bcc\": [], \"taskId\": \"{{ task().id }}\", \"content\": \"Auto Remediation was not Successful\\nDynatrace Remediation Workflow: {{ result(\\\"set-variables\\\").dynatrace_apps_tenant_url }}/ui/apps/dynatrace.automations/executions/{{ execution().id }}\\nProblem id: {{result(\\\"get-problem-info\\\").records[0]['display_id']}} {{ result(\\\"set-variables\\\").dynatrace_apps_tenant_url }}/ui/apps/dynatrace.classic.problems/problems/problemdetails;gtf=-6h;gf=all;pid={{result(\\\"get-problem-info\\\").records[0][\\\"event.id\\\"] }}\\n\", \"subject\": \"Auto Remediation was not Successful\", \"executionId\": \"{{ execution().id }}\", \"environmentUrl\": \"{{ environment().url }}\" }, \"action\": \"dynatrace.email:send-email\", \"active\": true, \"position\": { \"x\": 0, \"y\": 7 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").restartinstance == true }}\", \"states\": { \"check-if-problem-is-solved-6\": \"ERROR\" } }, \"description\": \"Send email\", \"predecessors\": [ \"check-if-problem-is-solved-6\" ] }, \"send-escalation-email-3\": { \"name\": \"send-escalation-email-3\", \"input\": { \"cc\": [], \"to\": [ \"daniel.braaf@dynatrace.com\" ], \"bcc\": [], \"taskId\": \"{{ task().id }}\", \"content\": \"Auto Remediation was not Successful\\nDynatrace Remediation Workflow: {{ result(\\\"set-variables\\\").dynatrace_apps_tenant_url }}/ui/apps/dynatrace.automations/executions/{{ execution().id }}\\nProblem id: {{result(\\\"get-problem-info\\\").records[0]['display_id']}} {{ result(\\\"set-variables\\\").dynatrace_apps_tenant_url }}/ui/apps/dynatrace.classic.problems/problems/problemdetails;gtf=-6h;gf=all;pid={{result(\\\"get-problem-info\\\").records[0][\\\"event.id\\\"] }}\\n\", \"subject\": \"\", \"executionId\": \"{{ execution().id }}\", \"environmentUrl\": \"{{ environment().url }}\" }, \"action\": \"dynatrace.email:send-email\", \"active\": true, \"position\": { \"x\": 3, \"y\": 5 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").resizeinstance == true }}\", \"states\": { \"check-if-problem-is-solved-7\": \"ERROR\" } }, \"description\": \"Send email\", \"predecessors\": [ \"check-if-problem-is-solved-7\" ] }, \"check-for-recent-remediation\": { \"name\": \"check-for-recent-remediation\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\nimport { queryExecutionClient } from '@dynatrace-sdk/client-query';\\n\\nexport default async function ({ executionId }) {\\n  // your code goes here\\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\\n\\n  const res = await queryExecutionClient.queryExecute({\\n    body: { query: 'fetch events, from: now()-10m  | filter event.type==\\\"CUSTOM_INFO\\\" | filter matchesPhrase(event.name, \\\"Remediation - ('+input.display_id+') killing process\\\") | summarize count = count()',\\n\\n    requestTimeoutMilliseconds: 45 * 1000 },\\n  });\\n\\n\\n  let count = res.result.records[0].count;\\n  let killprocess = true;\\n  let restart_instance = false;\\n  let resizeinstance = false;\\n  if (count > 0) {\\n  killprocess = false; \\n  restart_instance = true;\\n  resizeinstance = false;\\n  //restart_instance = true;\\n  //resizeinstance = false;\\n  }\\n\\n  const res1 = await queryExecutionClient.queryExecute({\\n    body: { query: 'fetch events, from: now()-10m  | filter event.type==\\\"CUSTOM_INFO\\\" | filter matchesPhrase(event.name, \\\"Remediation - ('+input.display_id+') restarting\\\") | summarize count = count()',\\n\\n  requestTimeoutMilliseconds: 45 * 1000 },\\n  });\\n\\n  let count2 = res1.result.records[0].count;\\n  if (count2 > 0) {\\n  killprocess = false; \\n  restart_instance = false;\\n  resizeinstance = true;\\n\\n  }\\n  const res2 = await queryExecutionClient.queryExecute({\\n    body: { query: 'fetch events, from: now()-10m  | filter event.type==\\\"CUSTOM_INFO\\\" | filter matchesPhrase(event.name, \\\"Remediation - ('+input.display_id+') resizing\\\") | summarize count = count()',\\n\\n  requestTimeoutMilliseconds: 45 * 1000 },\\n  });\\n\\n  let count3 = res2.result.records[0].count;\\n  if (count3 > 0) {\\n  let killprocess = true;\\n  let restart_instance = false;\\n  let resizeinstance = false;\\n  }\\n\\n  return { \\\"killprocess\\\": killprocess,\\n          \\\"restartinstance\\\": restart_instance,\\n          \\\"resizeinstance\\\": resizeinstance\\n         };\\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [] }, \"check-if-problem-is-solved-1\": { \"name\": \"check-if-problem-is-solved-1\", \"input\": { \"workflowId\": \"d31cdf5e-f1ca-4583-a850-67af54e3dde7\", \"workflowInput\": \"{\\\"dynatrace_problem_display_id\\\": \\\"{{input()[\\\"display_id\\\"] }}\\\"}\" }, \"retry\": { \"count\": 20, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"timeout\": 90000, \"position\": { \"x\": -2, \"y\": 4 }, \"conditions\": { \"else\": \"STOP\", \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").killprocess == true }}\", \"states\": { \"kill-process-on-ec2-instance\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"waitBefore\": 720, \"predecessors\": [ \"kill-process-on-ec2-instance\" ] }, \"check-if-problem-is-solved-2\": { \"name\": \"check-if-problem-is-solved-2\", \"input\": { \"workflowId\": \"d31cdf5e-f1ca-4583-a850-67af54e3dde7\", \"workflowInput\": \"{\\\"dynatrace_problem_display_id\\\": \\\"{{input()[\\\"display_id\\\"] }}\\\"}\" }, \"retry\": { \"count\": 20, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"timeout\": 90000, \"position\": { \"x\": -2, \"y\": 6 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").killprocess == true }}\", \"states\": { \"reboot-ec2-instance\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"waitBefore\": 720, \"predecessors\": [ \"reboot-ec2-instance\" ] }, \"check-if-problem-is-solved-4\": { \"name\": \"check-if-problem-is-solved-4\", \"input\": { \"workflowId\": \"d31cdf5e-f1ca-4583-a850-67af54e3dde7\", \"workflowInput\": \"{\\\"dynatrace_problem_display_id\\\": \\\"{{input()[\\\"display_id\\\"] }}\\\"}\" }, \"retry\": { \"count\": 20, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"timeout\": 90000, \"position\": { \"x\": -2, \"y\": 8 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").killprocess == true }}\", \"states\": { \"resize-ec2-instance\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"waitBefore\": 720, \"predecessors\": [ \"resize-ec2-instance\" ] }, \"check-if-problem-is-solved-5\": { \"name\": \"check-if-problem-is-solved-5\", \"input\": { \"workflowId\": \"d31cdf5e-f1ca-4583-a850-67af54e3dde7\", \"workflowInput\": \"{\\\"dynatrace_problem_display_id\\\": \\\"{{input()[\\\"display_id\\\"] }}\\\"}\" }, \"retry\": { \"count\": 20, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"timeout\": 90000, \"position\": { \"x\": 0, \"y\": 4 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").restartinstance == true }}\", \"states\": { \"reboot-ec2-instance-2\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"waitBefore\": 720, \"predecessors\": [ \"reboot-ec2-instance-2\" ] }, \"check-if-problem-is-solved-6\": { \"name\": \"check-if-problem-is-solved-6\", \"input\": { \"workflowId\": \"d31cdf5e-f1ca-4583-a850-67af54e3dde7\", \"workflowInput\": \"{\\\"dynatrace_problem_display_id\\\": \\\"{{input()[\\\"display_id\\\"] }}\\\"}\" }, \"retry\": { \"count\": 20, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"timeout\": 90000, \"position\": { \"x\": 0, \"y\": 6 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").restartinstance == true }}\", \"states\": { \"resize-ec2-instance-2\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"waitBefore\": 720, \"predecessors\": [ \"resize-ec2-instance-2\" ] }, \"check-if-problem-is-solved-7\": { \"name\": \"check-if-problem-is-solved-7\", \"input\": { \"workflowId\": \"d31cdf5e-f1ca-4583-a850-67af54e3dde7\", \"workflowInput\": \"{\\\"dynatrace_problem_display_id\\\": \\\"{{input()[\\\"display_id\\\"] }}\\\"}\" }, \"retry\": { \"count\": 20, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": 3, \"y\": 4 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").resizeinstance == true }}\", \"states\": { \"resize-ec2-instance-3\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"waitBefore\": 720, \"predecessors\": [ \"resize-ec2-instance-3\" ] }, \"kill-process-on-ec2-instance\": { \"name\": \"kill-process-on-ec2-instance\", \"input\": { \"workflowId\": \"57fa7bc0-b0ee-406d-b231-b16fe35e4c79\", \"workflowInput\": \"{\\n\\\"commands\\\":[\\\"sudo pkill {{input()[\\\"process_name\\\"]}} || true\\\"], \\n\\\"awsregion\\\":\\\"{{input()[\\\"aws_region_name\\\"] }}\\\",\\n\\\"instanceid\\\":\\\"{{input()[\\\"instance_id\\\"] }}\\\",\\n\\\"executionTimeout\\\":\\\"172800\\\",\\n\\\"workingDirectory\\\":\\\"/home/ubuntu\\\",\\n\\\"dynatraceawsconnection\\\":\\\"{{input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": -2, \"y\": 3 }, \"conditions\": { \"else\": \"STOP\", \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").killprocess == true }}\", \"states\": { \"calculate-size\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"calculate-size\" ] }, \"ingest-remediation-event-kill-process\": { \"name\": \"ingest-remediation-event-kill-process\", \"input\": { \"workflowId\": \"74a063e4-576a-4955-b477-1c531bcf7ad1\", \"workflowInput\": \"{\\n  \\\"title\\\": \\\"Remediation - ({{input()[\\\"display_id\\\"] }} {{ input()[\\\"event_name\\\"] }}) killing process {{input()[\\\"process_name\\\"] }} on host {{input()[\\\"process_host_name\\\"] }}\\\",\\n  \\\"entitySelector\\\": \\\"entityId(\\\\\\\"{{input()[\\\"process_host_entity_id\\\"]}}\\\\\\\")\\\",\\n  \\\"properties\\\": {\\n    \\\"remediation_step\\\": \\\"kill process\\\",\\n    \\\"remediation_host_name\\\": \\\"{{input()[\\\"process_host_name\\\"]}}\\\",\\n    \\\"remediation_entity_name\\\": \\\"{{input()[\\\"process_name\\\"] }}\\\",\\n    \\\"workflow\\\":\\\"{{ environment().url }}/ui/apps/dynatrace.automations/executions/{{ execution().id }}\\\"\\n  }\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"position\": { \"x\": -3, \"y\": 4 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").killprocess == true }}\", \"states\": { \"kill-process-on-ec2-instance\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"waitBefore\": 10, \"predecessors\": [ \"kill-process-on-ec2-instance\" ] }, \"ingest-remediation-event-restart-server\": { \"name\": \"ingest-remediation-event-restart-server\", \"input\": { \"workflowId\": \"74a063e4-576a-4955-b477-1c531bcf7ad1\", \"workflowInput\": \"{\\n  \\\"title\\\": \\\"Remediation - ({{input()[\\\"display_id\\\"] }} {{ input()[\\\"event_name\\\"] }}) restarting host {{input()[\\\"process_host_name\\\"] }}\\\",\\n  \\\"entitySelector\\\": \\\"entityId(\\\\\\\"{{input()[\\\"process_host_entity_id\\\"]}}\\\\\\\")\\\",\\n  \\\"properties\\\": {\\n    \\\"remediation_step\\\": \\\"restart\\\",\\n    \\\"remediation_host_name\\\": \\\"{{input()[\\\"process_host_name\\\"]}}\\\",\\n    \\\"remediation_entity_name\\\": \\\"{{input()[\\\"process_name\\\"] }}\\\",\\n    \\\"workflow\\\":\\\"{{ environment().url }}/ui/apps/dynatrace.automations/executions/{{ execution().id }}\\\"\\n  }\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"position\": { \"x\": -3, \"y\": 6 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").killprocess == true }}\", \"states\": { \"reboot-ec2-instance\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"reboot-ec2-instance\" ] }, \"ingest-remediation-event-restart-server-2\": { \"name\": \"ingest-remediation-event-restart-server-2\", \"input\": { \"workflowId\": \"74a063e4-576a-4955-b477-1c531bcf7ad1\", \"workflowInput\": \"{\\n  \\\"title\\\": \\\"Remediation - ({{input()[\\\"display_id\\\"] }}) restarting host {{input()[\\\"process_host_name\\\"] }}\\\",\\n  \\\"entitySelector\\\": \\\"entityId(\\\\\\\"{{input()[\\\"process_host_entity_id\\\"]}}\\\\\\\")\\\",\\n  \\\"properties\\\": {\\n    \\\"remediation_step\\\": \\\"restart\\\",\\n    \\\"remediation_host_name\\\": \\\"{{input()[\\\"process_host_name\\\"]}}\\\",\\n    \\\"remediation_entity_name\\\": \\\"{{input()[\\\"process_name\\\"] }}\\\",\\n    \\\"workflow\\\":\\\"{{ environment().url }}/ui/apps/dynatrace.automations/executions/{{ execution().id }}\\\"\\n  }\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"position\": { \"x\": 1, \"y\": 4 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").restartinstance == true }}\", \"states\": { \"reboot-ec2-instance-2\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"waitBefore\": 120, \"predecessors\": [ \"reboot-ec2-instance-2\" ] }, \"ingest-remediation-event-restart-server-3\": { \"name\": \"ingest-remediation-event-restart-server-3\", \"input\": { \"workflowId\": \"74a063e4-576a-4955-b477-1c531bcf7ad1\", \"workflowInput\": \"{\\n  \\\"title\\\": \\\"Remediation - ({{input()[\\\"display_id\\\"] }}) resizing host {{input()[\\\"process_host_name\\\"] }} to {{result(\\\"calculate-size\\\").future_instancetype }}\\\",\\n  \\\"entitySelector\\\": \\\"entityId(\\\\\\\"{{input()[\\\"process_host_entity_id\\\"]}}\\\\\\\")\\\",\\n  \\\"properties\\\": {\\n    \\\"remediation_step\\\": \\\"resize\\\",\\n    \\\"remediation_host_name\\\": \\\"{{input()[\\\"process_host_name\\\"]}}\\\",\\n    \\\"remediation_entity_name\\\": \\\"{{input()[\\\"process_name\\\"] }}\\\",\\n    \\\"workflow\\\":\\\"{{ environment().url }}/ui/apps/dynatrace.automations/executions/{{ execution().id }}\\\"\\n  }\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"position\": { \"x\": 4, \"y\": 4 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").resizeinstance == true }}\", \"states\": { \"resize-ec2-instance-3\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"waitBefore\": 120, \"predecessors\": [ \"resize-ec2-instance-3\" ] }, \"ingest-remediation-event-resize-ec2-instance\": { \"name\": \"ingest-remediation-event-resize-ec2-instance\", \"input\": { \"workflowId\": \"74a063e4-576a-4955-b477-1c531bcf7ad1\", \"workflowInput\": \"{\\n  \\\"title\\\": \\\"Remediation - ({{input()[\\\"display_id\\\"] }} {{ input()[\\\"event_name\\\"] }}) resizing host {{input()[\\\"process_host_name\\\"] }} to {{result(\\\"calculate-size\\\").future_instancetype }}\\\",\\n  \\\"entitySelector\\\": \\\"entityId(\\\\\\\"{{input()[\\\"process_host_entity_id\\\"]}}\\\\\\\")\\\",\\n  \\\"properties\\\": {\\n    \\\"remediation_step\\\": \\\"resize\\\",\\n    \\\"remediation_host_name\\\": \\\"{{input()[\\\"process_host_name\\\"]}}\\\",\\n    \\\"remediation_entity_name\\\": \\\"{{input()[\\\"process_name\\\"] }}\\\",\\n    \\\"workflow\\\":\\\"{{ environment().url }}/ui/apps/dynatrace.automations/executions/{{ execution().id }}\\\"\\n  }\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": -3, \"y\": 8 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").killprocess == true }}\", \"states\": { \"resize-ec2-instance\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"resize-ec2-instance\" ] }, \"ingest-remediation-event-resize-ec2-instance-2\": { \"name\": \"ingest-remediation-event-resize-ec2-instance-2\", \"input\": { \"workflowId\": \"74a063e4-576a-4955-b477-1c531bcf7ad1\", \"workflowInput\": \"{\\n  \\\"title\\\": \\\"Remediation - ({{input()[\\\"display_id\\\"] }}) resizing host {{input()[\\\"process_host_name\\\"] }} to {{result(\\\"calculate-size\\\").future_instancetype }}\\\",\\n  \\\"entitySelector\\\": \\\"entityId(\\\\\\\"{{input()[\\\"process_host_entity_id\\\"]}}\\\\\\\")\\\",\\n  \\\"properties\\\": {\\n    \\\"remediation_step\\\": \\\"resize\\\",\\n    \\\"remediation_host_name\\\": \\\"{{input()[\\\"process_host_name\\\"]}}\\\",\\n    \\\"remediation_entity_name\\\": \\\"{{input()[\\\"process_name\\\"] }}\\\",\\n    \\\"workflow\\\":\\\"{{ environment().url }}/ui/apps/dynatrace.automations/executions/{{ execution().id }}\\\"\\n  }\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"position\": { \"x\": 1, \"y\": 6 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").restartinstance == true }}\", \"states\": { \"resize-ec2-instance-2\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"resize-ec2-instance-2\" ] } }, \"description\": \"Remediate CPU Saturation by Process on host\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": null, \"input\": { \"event_id\": \"\", \"display_id\": \"\", \"event_name\": \"\", \"instance_id\": \"\", \"process_name\": \"\", \"aws_region_name\": \"\", \"ec2_instance_type\": \"\", \"process_entity_id\": \"\", \"process_host_name\": \"\", \"dynatraceawsconnection\": \"\"+input[ \"create-dynatrace-oidc-connection-settings\" ].dynatraceawsconnection+\"\", \"process_host_entity_id\": \"\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data6.id;\n      console.log(subworkflow);\n    \n      let workflow6 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data6.id;\n      endresult[\"template - dynatrace remediate aws ec2 instance process or memory saturation\"] = workflow6; \n    } catch (error: unknown) {\n      console.log(error)\n    }\n\n   try {\n      const data7 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"d31cdf5e-f1ca-4583-a850-67af54e3dde7\", \"title\": \"subworkflow - dynatrace check if davis problem is solved or closed\", \"tasks\": { \"check-if-problem-solved\": { \"name\": \"check-if-problem-solved\", \"input\": { \"query\": \"fetch events, from: now()-7d\\n| filter matchesPhrase(display_id,\\\"{{input()[\\\"dynatrace_problem_display_id\\\"] }}\\\" ) and matchesValue(event.status_transition, \\\"RESOLVED\\\" ) or matchesPhrase(display_id,\\\"{{input()[\\\"dynatrace_problem_display_id\\\"] }}\\\" ) and matchesValue(event.status_transition, \\\"CLOSED\\\" )\", \"failOnEmptyResult\": true }, \"action\": \"dynatrace.automations:execute-dql-query\", \"position\": { \"x\": 0, \"y\": 1 }, \"conditions\": { \"custom\": \"\", \"states\": {} }, \"description\": \"Make use of Dynatrace Grail data in your workflow.\", \"predecessors\": [] } }, \"description\": \"Subworkflow to Check if a Davis Problem is Solved or Closed\\n\\nUse Case:\\nWhen executing multiple remediation steps in a workflow, this subworkflow can be used to validate whether a specific \\nstep has resolved the problem. If the problem is still open, the subworkflow will fail.\\n\\nYou can configure the \\\"retry on error\\\" setting in the parent workflow to retry this subworkflow for a specific duration—for example,\\nrun for 10 minutes and check periodically if the problem has been resolved.\\n\\nIf the problem is not resolved within the defined time window, you can:\\n\\n* Add another remediation step.\\n* Escalate the issue to a human operator.\\n\\nThis approach enables automated, iterative problem resolution while maintaining control over escalation and fallback strategies.\\n\\nParameters:\\n\\ndynatrace_problem_display_id: (Reguired) Davis Problem id (for example P-25051158)\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"check-if-problem-solved\\\") }}\", \"input\": { \"dynatrace_problem_display_id\": \"P-25051158\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data7.id;\n      console.log(subworkflow);\n    \n      let workflow7 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data7.id;\n      endresult[\"subworkflow - dynatrace check if davis problem is solved or closed\"] = workflow7; \n    } catch (error: unknown) {\n      console.log(error)\n    }\n\n   try {\n      const data8 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"57fa7bc0-b0ee-406d-b231-b16fe35e4c79\", \"title\": \"subworkflow - aws run command on ec2 instance\", \"tasks\": { \"wait-for-result\": { \"name\": \"wait-for-result\", \"input\": { \"workflowId\": \"97218693-adf0-4c82-a295-e43d848b0b4d\", \"workflowInput\": \"{\\n  \\\"CommandId\\\":\\\"{{result(\\\"systems_manager_send_command_1\\\")[\\\"Command\\\"].CommandId }}\\\",\\n  \\\"awsregion\\\":\\\"{{input()[\\\"awsregion\\\"] }}\\\",\\n  \\\"awsinstanceid\\\":\\\"{{input()[\\\"instanceid\\\"] }}\\\",\\n  \\\"dynatraceawsconnection\\\": \\\"{{ input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"retry\": { \"count\": 99, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"timeout\": 604800, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"systems_manager_send_command_1\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"systems_manager_send_command_1\" ] }, \"systems_manager_send_command_1\": { \"name\": \"systems_manager_send_command_1\", \"input\": { \"region\": \"{{ input()[\\\"awsregion\\\"] }}\", \"Parameters\": \"{\\n  \\\"commands\\\": {{ input()[\\\"commands\\\"] | replace(\\\"'\\\",'\\\"') }}\\n}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"InstanceIds\": \"{{ input()[\\\"instanceid\\\"] }}\", \"DocumentName\": \"AWS-RunShellScript\" }, \"retry\": { \"count\": 5, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.aws.connector:ssm-send-command\", \"active\": true, \"timeout\": 604800, \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Runs commands on one or more managed nodes\", \"predecessors\": [] } }, \"description\": \"Subworkflow to run a command running on an ec2 instance\\n\\nThis subworkflow provides an easy way to trigger\\nthe execution of a command on a aws ec2 instance\\nwithout needing to know how aws ssm works.\\n\\nThis subworkflow uses the out of the box AWS-RunShellScript\\nSSM document to run scripts on ec2 instances.\\nWaits until the command execution has finished and\\nchecks if the execution was succesful and fails\\nif it wasnt so the parent workflow is able to\\nrestart the subworkflow on error.\\n\\nIn order for this subworkflow to execute successfully the ec2 instance must be a systems manager managed instance:\\nhttps://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-ec2.html\\n\\nParameters \\n\\ncommands: (Required) command to run on the ec2 instance\\nawsregion: (Required) region in which the ec2 instance to run the command on resides\\ninstanceid: (Required) instance id on which the command will run\\nexecutionTimeout: (Required) execution timeout of the command\\nworkingDirectory: (Required) working directory of the command\\ndynatraceawsconnection: (Required) dynatrace aws connection\\n\\nThis subworkflow Needs subworkflow \\\"subworkflow - aws wait for send command execution\\\"\\n\\nThis subworkflow uses the out of the box AWS SSM document AWS-RunShellScript\\nhttps://us-east-1.console.aws.amazon.com/systems-manager/documents/AWS-RunShellScript/description?region=us-east-1\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"wait-for-result\\\") }}\", \"input\": { \"commands\": [ \"echo test\", \"sleep 100\" ], \"awsregion\": \"us-east-1\", \"instanceid\": \"i-0e831c54dc3f2f0c7\", \"executionTimeout\": \"3600\", \"workingDirectory\": \"/home/ubuntu\", \"dynatraceawsconnection\": \"awsplayground\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data8.id;\n      console.log(subworkflow);\n    \n      let workflow8 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data8.id;\n      endresult[\"subworkflow - aws run command on ec2 instance\"] = workflow8; \n     \n    } catch (error: unknown) {\n      console.log(error)\n    }\n\n   try {\n      const data8x = await workflowsClient.createWorkflow({\n        body: { \"id\": \"97218693-adf0-4c82-a295-e43d848b0b4d\", \"title\": \"subworkflow - aws wait for run command execution\", \"tasks\": { \"get-status\": { \"name\": \"get-status\", \"input\": { \"region\": \"{{ input()[\\\"awsregion\\\"] }}\", \"CommandId\": \"{{ input()[\\\"CommandId\\\"] }}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\" }, \"action\": \"dynatrace.aws.connector:ssm-list-commands\", \"active\": true, \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Lists the commands requested by users of the Amazon Web Services account\", \"predecessors\": [] }, \"check-status\": { \"name\": \"check-status\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\nimport { actionExecution } from \\\"@dynatrace-sdk/automation-utils\\\";\\n\\nexport default async function ({ execution_id, action_execution_id }) {\\n  const actionEx = await actionExecution(action_execution_id);\\n  console.log(actionEx.loopItem.item)\\n  const status = actionEx.loopItem.item.Status.toUpperCase()\\n  console.log(status)\\n  \\n  if (status ==\\\"INPROGRESS\\\") {\\n        console.log(\\\"Send Command Execution is still running, restarting again!\\\");\\n        throw new Error(\\\"Send Command Execution is still running, restarting again!\\\");\\n  } \\n\\n  return status;\\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"active\": true, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"get-status\": \"OK\" } }, \"withItems\": \"item in {{ result(\\\"get-status\\\").Commands }}\", \"concurrency\": 1, \"description\": \"Build a custom task running js Code\", \"predecessors\": [ \"get-status\" ] } }, \"description\": \"Subworkflow to wait for aws ssm run command execution to finish\\n\\nThis subworkflow is used in the \\\"aws run command on ec2 instance\\\" subworkflow\\nto wait for the execution to finish and check the status of the execution.\\nIf the execution wasnt successful the subworklow will fail so that\\nparent workflows can respond with rerun on error.\\n\\nParameters:\\n\\nawsregion: (Required) Region in which the SSM document runs\\nawsinstanceid: (Required) Instance id on which the run command ssm document was executed\\nCommandId: (Required) Command id of the run command execution (Returned by Run command actions)\\ndynatraceawsconnection: (Required) Dynatrace oidc connection name\", \"actor\": \"\"+input.actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"get-status\\\").Commands }}\", \"input\": { \"CommandId\": \"2824c2b0-29aa-40b5-8924-c5169c07c2cc\", \"awsregion\": \"us-east-1\", \"awsinstanceid\": \"i-0e831c54dc3f2f0c7\", \"dynatraceawsconnection\": \"awsplayground\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data8x.id;\n      console.log(subworkflow);\n    \n      let workflow8x = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data8x.id;\n      endresult[\"subworkflow - aws wait for run command execution\"] = workflow8x; \n     \n    } catch (error: unknown) {\n      console.log(error)\n    }\n\n   try {\n      const data9 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"b9de7879-6723-43a0-92ca-5bae8294da4b\", \"title\": \"subworkflow - aws reboot ec2 instances\", \"tasks\": { \"ec2_wait_for_state_1\": { \"name\": \"ec2_wait_for_state_1\", \"input\": { \"region\": \"{{ input()[\\\"awsRegion\\\"] }}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"InstanceIds\": \"{{input()[\\\"instanceIds\\\"]}}\", \"InstanceState\": \"running\" }, \"retry\": { \"count\": 5, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.aws.connector:ec2-wait-state\", \"timeout\": 9000, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"ec2_reboot_instances_1\": \"OK\" } }, \"description\": \"Wait for EC2 instances in a specific region to be in a specific state\", \"waitBefore\": 30, \"predecessors\": [ \"ec2_reboot_instances_1\" ] }, \"ec2_reboot_instances_1\": { \"name\": \"ec2_reboot_instances_1\", \"input\": { \"region\": \"{{ input()[\\\"awsRegion\\\"] }}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"InstanceIds\": \"{{input()[\\\"instanceIds\\\"]}}\" }, \"retry\": { \"count\": 5, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.aws.connector:ec2-reboot-instances\", \"timeout\": 9000, \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Requests a reboot of the specified instances\", \"predecessors\": [] } }, \"description\": \"Subworkflow to reboot an EC2 Instance\\n\\nThis subworkflow provides an easy way to trigger\\nthe reboot of an EC2 Instance and wait unitl the instance is back up\\n\\nParameters:\\n\\ninstanceIds: (Required) instance id to reboot\\nawsRegion: (Required) region in which you want to reboot the ec2 instance\\ndynatraceawsconnection: (Required) the connection name of the Dynatrace OIDC Connection\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"ec2_wait_for_state_1\\\") }}\", \"input\": { \"awsRegion\": \"us-east-1\", \"instanceIds\": \"i-0565781a37710692f\", \"dynatraceawsconnection\": \"awsplayground\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data9.id;\n      console.log(subworkflow);\n    \n      let workflow9 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data9.id;\n      endresult[\"subworkflow - aws reboot ec2 instances\"] = workflow9; \n     \n    } catch (error: unknown) {\n      console.log(error)\n    }\n\n   try {\n      const data10 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"e1ef703b-88ac-496a-a4a0-38805fe6e91c\", \"title\": \"subworkflow - aws resize ec2 instance\", \"tasks\": { \"check-status\": { \"name\": \"check-status\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\n\\nexport default async function ({ execution_id }) {\\n  const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/wait-for-ssm-execution-completed/result`);\\n  const configBody = await configGet.json();\\n  const status = configBody.AutomationExecutionStatus.toUpperCase()\\n  console.log(status)\\n  \\n  if (status !=\\\"SUCCESS\\\") {\\n        console.log(\\\"SSM Document Execution has Failed!\\\");\\n        throw new Error(\\\"SSM Document Execution has Failed!\\\");\\n  } \\n\\n  return configBody;\\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"states\": { \"wait-for-ssm-execution-completed\": \"OK\" } }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [ \"wait-for-ssm-execution-completed\" ] }, \"wait-for-ssm-execution-completed\": { \"name\": \"wait-for-ssm-execution-completed\", \"input\": { \"workflowId\": \"20661ec0-29d5-471f-9973-29679d5fe908\", \"workflowInput\": \"{\\n\\\"AutomationExecutionId\\\":\\\"{{result(\\\"systems_manager_start_automation_execution_1\\\").AutomationExecutionId }}\\\",\\n\\\"awsregion\\\": \\\"{{ input()[\\\"awsregion\\\"] }}\\\",\\n\\\"dynatraceawsconnection\\\": \\\"{{ input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n\\n}\" }, \"retry\": { \"count\": 99, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"timeout\": 9999, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"systems_manager_start_automation_execution_1\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"systems_manager_start_automation_execution_1\" ] }, \"systems_manager_start_automation_execution_1\": { \"name\": \"systems_manager_start_automation_execution_1\", \"input\": { \"region\": \"{{ input()[\\\"awsregion\\\"] }}\", \"Parameters\": \"{ \\n  \\\"InstanceId\\\": [\\\"{{ input()[\\\"instanceid\\\"] }}\\\"],\\n  \\\"InstanceType\\\": [\\\"{{input()[\\\"resize_to_instance_type\\\"] }}\\\"]\\n}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"DocumentName\": \"AWS-ResizeInstance\" }, \"retry\": { \"count\": 5, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.aws.connector:ssm-start-automation-execution\", \"active\": true, \"timeout\": 604800, \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Initiates execution of an Automation runbook\", \"predecessors\": [] } }, \"description\": \"Subworkflow to resize an ec2 instance (Changes the type of instance)\\n\\nThis subworkflow creates an easy way to trigger\\nthe resizing of an aws ec2 instance with\\n\\nParameters:\\n\\nresize_to_instance_type: (Required) instance type to resize ec2 instance (for example t3.small, t3.medium etc.)\\ninstanceid: (Required) instance id of the ec2 instance to resize \\nawsregion: (Required) region in which the ec2 instance to resize resides\\ndynatraceawsconnection: (Required) the connection name of the Dynatrace OIDC Connection\\n\\nThis subworkflow uses the out of the box SSM Document \\\"AWS-ResizeInstance\\\" \\nhttps://us-east-1.console.aws.amazon.com/systems-manager/documents/AWS-ResizeInstance/description?region=us-east-1\\n\\nSubworkflow will wait for ssm document execution and will fail if ssm document fails\\n\\nThe subworkflow sends the command to resize a ec2 stack to the\\naws SSM document \\\"AWS-ResizeInstance\\\", then waits until\\nthe SSM document has finished and then checks if the execution was \\nsuccessful. If not, it will fail the subworkflow to provide a restart on error\\nfunctionality to the Parent workflow\\n\\nThis subworkflow Needs subworkflow \\\"subworkflow - aws wait for systems manager document execution\\\"\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"wait-for-ssm-execution-completed\\\") }}\", \"input\": { \"awsregion\": \"us-east-1\", \"instanceid\": \"i-0e831c54dc3f2f0c7\", \"dynatraceawsconnection\": \"awsplayground\", \"resize_to_instance_type\": \"t3.small\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      \n      });\n      subworkflow = data10.id;\n      console.log(subworkflow);\n    \n      let workflow10 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data10.id;\n      endresult[\"subworkflow - aws resize ec2 instance\"] = workflow10; \n     \n    } catch (error: unknown) {\n      console.log(error)\n    }\n\n   try {\n      const data11 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"74a063e4-576a-4955-b477-1c531bcf7ad1\", \"title\": \"subworkflow - dynatrace ingest custom info event\", \"tasks\": { \"ingest-event\": { \"name\": \"ingest-event\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\nimport { EventIngest, EventIngestEventType, eventsClient } from '@dynatrace-sdk/client-classic-environment-v2';\\nimport { getEnvironmentUrl } from \\\"@dynatrace-sdk/app-environment\\\";\\n\\nexport default async function ({ executionId }) {\\n\\n  \\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\\n\\n  console.log(input.entitySelector)\\n\\n\\n  let final: string | undefined | null;\\n  if (input.entitySelector == \\\"\\\") {\\n      const xevent: EventIngest = {\\n        eventType: EventIngestEventType.CustomInfo,\\n        title: input.title,\\n        properties: input.properties, \\n      };\\n      console.log(xevent)\\n      const result = await eventsClient.createEvent({ body: xevent })\\n      while (final  === undefined  || final  === null || final  === \\\"\\\") {\\n          const data = await eventsClient.getEvents({\\n            eventSelector: \\\"correlationId(\\\\\\\"\\\"+result.eventIngestResults[0].correlationId+\\\"\\\\\\\")\\\"\\n          });\\n          final = data.events[0]\\n      }\\n\\n    \\n      return final;\\n   \\n  } else {\\n      const xevent: EventIngest = {\\n            eventType: EventIngestEventType.CustomInfo,\\n            title: input.title,\\n            entitySelector: input.entitySelector,\\n            properties: input.properties,\\n      };\\n      console.log(xevent)\\n      const result = await eventsClient.createEvent({ body: xevent })\\n      while (final  === undefined  || final  === null || final  === \\\"\\\") {\\n          const data = await eventsClient.getEvents({\\n            eventSelector: \\\"correlationId(\\\\\\\"\\\"+result.eventIngestResults[0].correlationId+\\\"\\\\\\\")\\\"\\n          });\\n          final = data.events[0]\\n      }\\n\\n    \\n      return final;\\n  }\\n    \\n\\n  \\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [] } }, \"description\": \"Subworkflow to ingest a custom event into dynatrace without needed to know javascript\\n\\nParameters:\\n(Required) Custom Event Json\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"ingest-event\\\") }}\", \"input\": { \"title\": \"start disk cleanup on host\", \"properties\": { \"workflow\": \"test\", \"remediation_step\": \"start disk cleanup\", \"remediation_host_name\": \"test\", \"remediation_entity_name\": \"test\" }, \"entitySelector\": \"\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data11.id;\n      console.log(subworkflow);\n      let workflow11 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data11.id;\n      endresult[\"subworkflow - dynatrace ingest custom info event\"] = workflow11;\n    } catch (error: unknown) {\n      console.log(error)\n    }\n\n   try {\n      const data12 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"20661ec0-29d5-471f-9973-29679d5fe908\", \"title\": \"subworkflow - aws wait for systems manager  document execution\", \"tasks\": { \"get-status\": { \"name\": \"get-status\", \"input\": { \"region\": \"{{ input()[\\\"awsregion\\\"] }}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"AutomationExecutionId\": \"{{ input()[\\\"AutomationExecutionId\\\"] }}\" }, \"action\": \"dynatrace.aws.connector:ssm-get-automation-execution\", \"active\": true, \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Get detailed information about a particular Automation execution\", \"predecessors\": [] }, \"check-status\": { \"name\": \"check-status\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\n\\nexport default async function ({ execution_id }) {\\n  const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/get-status/result`);\\n  const configBody = await configGet.json();\\n  const status = configBody.AutomationExecution.AutomationExecutionStatus.toUpperCase()\\n  console.log(status)\\n  \\n  if (status ==\\\"INPROGRESS\\\" || status ==\\\"PENDING\\\" ) {\\n        console.log(\\\"Automation still running, restarting again!\\\");\\n        throw new Error(\\\"Automation still running, restarting again!\\\");\\n  } \\n\\n  return configBody;\\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"active\": true, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"get-status\": \"OK\" } }, \"description\": \"Build a custom task running js Code\", \"predecessors\": [ \"get-status\" ] } }, \"description\": \"Subworkflow to wait for aws ssm document execution to finish\\n\\nThis subworkflow is used in subworkflows that execute ssm documents\\nto wait for the execution to finish and check the status of the execution.\\nIf the execution wasnt successful the subworklow will fail so that\\nparent workflows can respond with rerun on error.\\n\\nParameters: \\n\\nawsregion: (Required) Region in which the SSM document runs\\nAutomationExecutionId: (Required) Execution id of the SSM document (Returned by Start SSM actions)\\ndynatraceawsconnection: (Required) Dynatrace oidc connection name\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"check-status\\\").AutomationExecution }}\", \"input\": { \"awsregion\": \"us-east-1\", \"AutomationExecutionId\": \"08093423-3443-4182-8397-12e802518f29\", \"dynatraceawsconnection\": \"awsplayground\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data12.id;\n      console.log(subworkflow);\n      let workflow12 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data12.id;\n      endresult[\"subworkflow - aws wait for systems manager  document execution\"] = workflow12;\n    } catch (error: unknown) {\n      console.log(error)\n    }\n   \n  }   \n\n  if (input[\"AWS-EBS-remediate-low-storage\"][\"install\"] == true){\n   try {    \n      const data5x = await workflowsClient.createWorkflow({\n        body: { \"id\": \"3e5454a4-50ad-4dab-914c-638b6df5b283\", \"title\": \"subworkflow - aws get host data of ec2 instance\", \"tasks\": { \"dql-get-host-info\": { \"name\": \"dql-get-host-info\", \"input\": { \"query\": \"fetch dt.entity.host\\n| filter matchesPhrase(id, \\\"{{input()[\\\"host_entity_id\\\"]}}\\\")\\n| fieldsadd  additionalSystemInfo,belongs_to,ec2_id=runs_on[dt.entity.ec2_instance], entity.name, hostname=entity.detected_name, osArchitecture, osType, cpuCores, autoInjection, bitness, cloudType, clustered_by,  ebpfHasPublicTraffic,  state\\n| lookup  [fetch dt.entity.ebs_volume\\n| fieldsadd arn,instanceid=belongs_to[dt.entity.ec2_instance][0],deviceName,ebsType,entity.name,awsNameTag,tags,belongs_to,boshName,creationTimestamp, lifetime, ebsSnapshotId, entity.type, iops  ] , sourceField:ec2_id, lookupField:instanceid, prefix:\\\"ebs_\\\"\\n| fieldsadd volumeid=ebs_entity.name\\n| lookup  [fetch dt.entity.ec2_instance\\n| fieldsadd awscredentials=accessible_by[dt.entity.aws_credentials], awsInstanceId,awsInstanceType,awsNameTag, awsSecurityGroup, awsVpcName, arn, tags, id, regionName, accessible_by,amiId,balanced_by,beanstalkEnvironmentName,belongs_to,boshName,contains,publicHostName,publicIp,localIp,virtualizedDiskType,entity.name,lifetime, entity.type  ] , sourceField:ec2_id, lookupField:id, prefix:\\\"ec2_\\\"\\n| lookup  [ timeseries max(dt.host.disk.used), by: { dt.entity.host }\\n| fieldsAdd disksizex = arrayLast(`max(dt.host.disk.used)`)/1000000000\\n| fields disksize=round(disksizex), dt.entity.host\\n] , sourceField:id, lookupField:dt.entity.host, prefix:\\\"disk_\\\"\\n| lookup  [ timeseries max(dt.host.disk.avail), by: { dt.entity.host }\\n| fieldsAdd disksizex = arrayLast(`max(dt.host.disk.avail)`)/1000000000\\n| fields disksize=round(disksizex), dt.entity.host\\n] , sourceField:id, lookupField:dt.entity.host, prefix:\\\"disk_avail_\\\"\\n| fieldsadd total_disk_size=disk_disksize + disk_avail_disksize, disk_used=disk_disksize, disk_available=disk_avail_disksize\\n| fieldsremove disk_avail_disksize,disk_disksize\", \"failOnEmptyResult\": true }, \"action\": \"dynatrace.automations:execute-dql-query\", \"active\": true, \"position\": { \"x\": 0, \"y\": 1 }, \"conditions\": { \"states\": {} }, \"description\": \"Executes DQL query\", \"predecessors\": [] } }, \"description\": \"Subworkflow to get data of an aws ec2 instance without needing to know dql\\n\\nAn easy way to get additional data of an aws host\\nsuch as instance id, volume id etc. which is needed\\nto for example resize an aws volume.\\n\\nParameters:\\n\\nhost_entity_id: (Required) Dynatrace Host Entity Id\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"dql-get-host-info\\\").records[0] }}\", \"input\": { \"host_entity_id\": \"HOST-EA0E775A9C448B02\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data5x.id;\n      console.log(subworkflow);\n    \n      let workflow5x = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data5x.id;\n      endresult[\"subworkflow - aws get host data of ec2 instance\"] = workflow5x; \n\n    } catch (error: unknown) {\n      console.log(error)\n    }    \n\n  try {    \n      const data5xx = await workflowsClient.createWorkflow({\n        body: { \"id\": \"a13c2f6f-9e3d-478a-8399-1d17fecf6779\", \"title\": \"subworkflow - aws davis forecast for aws volume usage\", \"tasks\": { \"get-disk-lifetime\": { \"name\": \"get-disk-lifetime\", \"input\": { \"workflowId\": \"3e5454a4-50ad-4dab-914c-638b6df5b283\", \"workflowInput\": \"{\\n  \\\"host_entity_id\\\": \\\"{{input()[\\\"host_entity_id\\\"] }}\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [] }, \"get-total-disk-size\": { \"name\": \"get-total-disk-size\", \"input\": { \"query\": \"fetch dt.entity.host\\n| filter matchesPhrase(id, \\\"{{input()[\\\"host_entity_id\\\"]}}\\\")\\n| lookup  [ timeseries max(dt.host.disk.used), by: { dt.entity.host }\\n| fieldsAdd disksizex = arrayLast(`max(dt.host.disk.used)`)/1000000000\\n| fields disksize=round(disksizex), dt.entity.host\\n] , sourceField:id, lookupField:dt.entity.host, prefix:\\\"disk_\\\"\\n| lookup  [ timeseries max(dt.host.disk.avail), by: { dt.entity.host }\\n| fieldsAdd disksizex = arrayLast(`max(dt.host.disk.avail)`)/1000000000\\n| fields disksize=round(disksizex), dt.entity.host\\n] , sourceField:id, lookupField:dt.entity.host, prefix:\\\"disk_avail_\\\"\\n| fields total_disk_size=disk_disksize + disk_avail_disksize\" }, \"action\": \"dynatrace.automations:execute-dql-query\", \"active\": true, \"position\": { \"x\": 0, \"y\": 6 }, \"conditions\": { \"states\": { \"davis-ai-forecast-disk-size\": \"OK\" } }, \"description\": \"Make use of Dynatrace Grail data in your workflow.\", \"predecessors\": [ \"davis-ai-forecast-disk-size\" ] }, \"get-prediction-result\": { \"name\": \"get-prediction-result\", \"input\": { \"script\": \"import { execution } from '@dynatrace-sdk/automation-utils';\\n\\n\\nexport default async function ({ executionId }) {\\n    const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\\n    const exe = await execution(executionId);\\n    const predResult = await exe.result('davis-ai-forecast-disk-size');\\n    const getTotaldisksizeReult = await exe.result('get-total-disk-size');\\n    //console.log(getTotaldisksizeReult)\\n    //console.log(getTotaldisksizeReult.records[0].total_disk_size)\\n    const result = predResult['result'];\\n    const predictionSummary = { violation: false, violations: new Array<Record<string, string>>() };\\n    //console.log(\\\"Total number of predicted lines: \\\" + result.output.length);\\n    // Check if prediction was successful.\\n    if (result && result.executionStatus == 'COMPLETED' && result.output[0].analysisStatus == \\\"OK\\\") {\\n        console.log('Prediction was successful.')\\n            const lowerPredictions = result.output[0].timeSeriesDataWithPredictions.records[0]['dt.davis.forecast:lower'];\\n            const upperPredictions = result.output[0].timeSeriesDataWithPredictions.records[0]['dt.davis.forecast:upper'];\\n            const pointPredictions = result.output[0].timeSeriesDataWithPredictions.records[0]['dt.davis.forecast:point'];\\n            const lowerPredictions_last = lowerPredictions[lowerPredictions.length - 1];\\n            const upperPredictions_last = upperPredictions[upperPredictions.length - 1];\\n            const pointPredictions_last = pointPredictions[pointPredictions.length - 1];\\n            console.log(lowerPredictions_last/1000000000)\\n            console.log(upperPredictions_last/1000000000)\\n            console.log(pointPredictions_last/1000000000)\\n            var predicted_disk_usage_in_gb=pointPredictions_last/1000000000;\\n            var predicted_disk_usage_in_gb_round = Math.round(predicted_disk_usage_in_gb)\\n            var lower_in_gb=lowerPredictions_last/1000000000;\\n            var lower = Math.round(lower_in_gb)\\n            var upper_in_gb=upperPredictions_last/1000000000;\\n            var upper = Math.round(upper_in_gb)\\n            let prediction_method = predicted_disk_usage_in_gb_round\\n            if (input.forecast_method == \\\"upper\\\") {\\n              prediction_method = upper\\n            } else if (input.forecast_method == \\\"lower\\\") {\\n              prediction_method = upper\\n            } else {\\n              prediction_method = predicted_disk_usage_in_gb_round\\n            }\\n            console.log(\\\"using prediction method \\\"+input.forecast_method )\\n\\n      \\n            if (prediction_method > getTotaldisksizeReult.records[0].total_disk_size) {\\n            return {\\\"predicted_disk_size\\\": prediction_method,\\\"dt.davis.forecast:lower\\\": lower,\\\"dt.davis.forecast:upper\\\": upper, \\\"dt.davis.forecast:point\\\": predicted_disk_usage_in_gb_round };\\n            } else {\\n              console.log('Prediction smaller than total disk size, increase by '+input.on_forecast_failure_increase_by_percentag_of_total_diskspace+\\\"% of total disksize instead\\\")\\n              const total=(getTotaldisksizeReult.records[0].total_disk_size/100*input.on_forecast_failure_increase_by_percentag_of_total_diskspace) + getTotaldisksizeReult.records[0].total_disk_size\\n              return {\\\"predicted_disk_size\\\": total,\\\"dt.davis.forecast:lower\\\": lower,\\\"dt.davis.forecast:upper\\\": upper, \\\"dt.davis.forecast:point\\\": predicted_disk_usage_in_gb_round };\\n\\n            }\\n      \\n\\n    } else {\\n        console.log('Prediction run failed!');\\n        console.log('Increase by ' +input.on_forecast_failure_increase_by_percentag_of_total_diskspace+\\\"% of total disksize\\\");\\n        const total=(getTotaldisksizeReult.records[0].total_disk_size/100*input.on_forecast_failure_increase_by_percentag_of_total_diskspace) + getTotaldisksizeReult.records[0].total_disk_size\\n        return {\\\"predicted_disk_size\\\": total };\\n\\n    }\\n }\" }, \"action\": \"dynatrace.automations:run-javascript\", \"active\": true, \"position\": { \"x\": 0, \"y\": 7 }, \"conditions\": { \"states\": { \"get-total-disk-size\": \"ANY\" } }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [ \"get-total-disk-size\" ] }, \"calculate-lifetime-duration\": { \"name\": \"calculate-lifetime-duration\", \"input\": { \"script\": \"import { execution } from '@dynatrace-sdk/automation-utils';\\nimport { queryExecutionClient } from \\\"@dynatrace-sdk/client-query\\\";\\n\\nexport default async function ({ executionId }) {\\n  const exe = await execution(executionId);\\n  const ebs = await exe.result('get-disk-lifetime');\\n  const disk_starttime = new Date(ebs.ebs_lifetime.start)\\n  const disk_endtime = new Date(ebs.ebs_lifetime.end)\\n  const timestamp1 = disk_starttime.getTime(); // Milliseconds for date1\\n  const timestamp2 = disk_endtime.getTime(); // Milliseconds for date2\\n  const differenceInMilliseconds = timestamp2 - timestamp1;\\n  const differenceInHours = differenceInMilliseconds / (1000 * 60 * 60);\\n  console.log(differenceInHours)\\n  const roundeddiff = Math.floor(differenceInHours);\\n  console.log(roundeddiff)\\n  let difference = roundeddiff\\n  \\n  if (roundeddiff == 0) {\\n    difference = 1\\n  } else {\\n    difference = roundeddiff\\n  }\\n    \\n  return difference;\\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"get-disk-lifetime\": \"OK\" } }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [ \"get-disk-lifetime\" ] }, \"davis-ai-forecast-disk-size\": { \"name\": \"davis-ai-forecast-disk-size\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\nimport { analyzersClient } from '@dynatrace-sdk/client-davis-analyzers';\\n\\n\\nexport default async function ({ executionId }) {\\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\\n  const exe = await execution(executionId);\\n  const duration = await exe.result('caculate-if-recent-or-constant-growth');\\n  console.log(input.host_entity_id)\\n  console.log(duration)\\n\\n\\n  \\n  const query = 'timeseries max(dt.host.disk.used), by: { dt.entity.host }, interval:1m | filter matchesPhrase(dt.entity.host, \\\"'+input.host_entity_id+'\\\")'\\n  const analyzerName = 'dt.statistics.GenericForecastAnalyzer';\\n  const response = await analyzersClient.executeAnalyzer({\\n    analyzerName,\\n    body: {\\n      nPaths: 200,\\n      useModelCache: true,\\n      forecastOffset: 0,\\n      forecastHorizon: 600,\\n      coverageProbability: 0.9,\\n      applyZeroLowerBoundHeuristic: true,\\n      generalParameters: {\\n         timeframe: {\\n             endTime: \\\"now\\\",\\n             startTime: \\\"now-\\\"+duration.key+\\\"\\\"   \\n             //startTime: \\\"now-2h\\\" \\n             },\\n        logVerbosity: \\\"WARNING\\\",  \\n        resolveDimensionalQueryData: false\\n      },\\n      timeSeriesData: {\\n        expression: query,\\n      },\\n    },\\n  });\\n\\n\\n  return response;\\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"active\": true, \"position\": { \"x\": 0, \"y\": 5 }, \"conditions\": { \"states\": { \"caculate-if-recent-or-constant-growth\": \"OK\" } }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [ \"caculate-if-recent-or-constant-growth\" ] }, \"calculate-forecast-timeframes\": { \"name\": \"calculate-forecast-timeframes\", \"input\": { \"query\": \"timeseries full_time_of_existancex=max(dt.host.disk.used), by: { dt.entity.host }, interval:1m, from:now()-{{result(\\\"calculate-lifetime-duration\\\") }}h\\n| fieldsadd full_time_of_existance=arrayRemoveNulls(full_time_of_existancex)\\n| filter matchesPhrase(dt.entity.host, \\\"{{input()[\\\"host_entity_id\\\"] }}\\\")\\n| fieldsadd result_full = (arraylast(full_time_of_existance) - arrayfirst(full_time_of_existance)) / arrayfirst(full_time_of_existance) * 100 / arraySize(full_time_of_existance)\\n| append [timeseries hours1 = max(dt.host.disk.used), by: { dt.entity.host }, interval:1m, from:now()-1h \\n| filter matchesPhrase(dt.entity.host, \\\"{{input()[\\\"host_entity_id\\\"] }}\\\")\\n| fieldsadd result_hours1 = (arraylast(hours1)- arrayfirst(hours1)) / arrayfirst(hours1) * 100 / arraySize(hours1)] \\n| append [timeseries hours2 = max(dt.host.disk.used), by: { dt.entity.host }, interval:1m, from:now()-2h \\n| filter matchesPhrase(dt.entity.host, \\\"{{input()[\\\"host_entity_id\\\"] }}\\\") \\n| fieldsadd result_hours2 = (arraylast(hours2) -arrayfirst(hours2)) / arrayfirst(hours2) * 100 / arraySize(hours2)] \\n| append [timeseries hours3 = max(dt.host.disk.used), by: { dt.entity.host }, interval:1m, from:now()-3h \\n| filter matchesPhrase(dt.entity.host, \\\"{{input()[\\\"host_entity_id\\\"] }}\\\")\\n| fieldsadd result_hours3 = (arraylast(hours3) -arrayfirst(hours3)) / arrayfirst(hours3) * 100 / arraySize(hours3)]  \\n| append [timeseries hours4 = max(dt.host.disk.used), by: { dt.entity.host }, interval:1m, from:now()-4h \\n| filter matchesPhrase(dt.entity.host, \\\"{{input()[\\\"host_entity_id\\\"] }}\\\") \\n| fieldsadd result_hours4 = (arraylast(hours4) -arrayfirst(hours4)) / arrayfirst(hours4) * 100 / arraySize(hours4)]  \\n| append [timeseries hours5 = max(dt.host.disk.used), by: { dt.entity.host }, interval:1m, from:now()-5h \\n| filter matchesPhrase(dt.entity.host, \\\"{{input()[\\\"host_entity_id\\\"] }}\\\") \\n| fieldsadd result_hours5 = (arraylast(hours5) -arrayfirst(hours5)) / arrayfirst(hours5) * 100 / arraySize(hours5)]  \\n| append [timeseries hours6 = max(dt.host.disk.used), by: { dt.entity.host }, interval:1m, from:now()-6h \\n| filter matchesPhrase(dt.entity.host, \\\"{{input()[\\\"host_entity_id\\\"] }}\\\") \\n| fieldsadd result_hours6 = (arraylast(hours6) -arrayfirst(hours6)) / arrayfirst(hours6) * 100 / arraySize(hours6)]  \\n| append [timeseries hours7 = max(dt.host.disk.used), by: { dt.entity.host }, interval:1m, from:now()-7h \\n| filter matchesPhrase(dt.entity.host, \\\"{{input()[\\\"host_entity_id\\\"] }}\\\") \\n| fieldsadd result_hours7 = (arraylast(hours7) -arrayfirst(hours7)) / arrayfirst(hours7) * 100 / arraySize(hours7)]  \\n| append [timeseries hours8 = max(dt.host.disk.used), by: { dt.entity.host }, interval:1m, from:now()-8h \\n| filter matchesPhrase(dt.entity.host, \\\"{{input()[\\\"host_entity_id\\\"] }}\\\") \\n| fieldsadd result_hours8 = (arraylast(hours8) -arrayfirst(hours8)) / arrayfirst(hours8) * 100 / arraySize(hours8)]  \\n| append [timeseries hours9 = max(dt.host.disk.used), by: { dt.entity.host }, interval:1m, from:now()-9h \\n| filter matchesPhrase(dt.entity.host, \\\"{{input()[\\\"host_entity_id\\\"] }}\\\") \\n| fieldsadd result_hours9 = (arraylast(hours9) -arrayfirst(hours9)) / arrayfirst(hours9) * 100 / arraySize(hours9)]  \\n| append [timeseries hours10 = max(dt.host.disk.used), by: { dt.entity.host }, interval:1m, from:now()-10h \\n| filter matchesPhrase(dt.entity.host, \\\"{{input()[\\\"host_entity_id\\\"] }}\\\") \\n| fieldsadd result_hours10 = (arraylast(hours10) -arrayfirst(hours10)) / arrayfirst(hours10) * 100 / arraySize(hours10)]  \\n| summarize alltime=max(result_full), hours1=max(result_hours1), hours2=max(result_hours2), hours3=max(result_hours3), hours4=max(result_hours4), hours5=max(result_hours5), hours6=max(result_hours6), hours7=max(result_hours7), hours8=max(result_hours8), hours9=max(result_hours9), hours10=max(result_hours10)\" }, \"action\": \"dynatrace.automations:execute-dql-query\", \"active\": true, \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"custom\": \"\", \"states\": { \"calculate-lifetime-duration\": \"OK\" } }, \"description\": \"Make use of Dynatrace Grail data in your workflow.\", \"predecessors\": [ \"calculate-lifetime-duration\" ] }, \"caculate-if-recent-or-constant-growth\": { \"name\": \"caculate-if-recent-or-constant-growth\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\n\\nexport default async function ({ executionId }) {\\n\\n  interface NumberDictionary {\\n  [key: string]: number;\\n  }\\n  const growth: NumberDictionary = {};\\n  const exe = await execution(executionId);\\n  const lifetimeduration = await exe.result('calculate-lifetime-duration');\\n  const gap1 = await exe.result('calculate-forecast-timeframes');\\n  // e.g. get the current execution\\n  console.log(gap1.records[0]);\\n  growth[lifetimeduration+\\\"h\\\"] = gap1.records[0].alltime;\\n  growth[\\\"1h\\\"] = gap1.records[0].hours1;\\n  growth[\\\"2h\\\"] = gap1.records[0].hours2;\\n  growth[\\\"3h\\\"] = gap1.records[0].hours3;\\n  growth[\\\"4h\\\"] = gap1.records[0].hours4;\\n  growth[\\\"5h\\\"] = gap1.records[0].hours5;\\n  growth[\\\"6h\\\"] = gap1.records[0].hours6;\\n  growth[\\\"7h\\\"] = gap1.records[0].hours7;\\n  growth[\\\"8h\\\"] = gap1.records[0].hours8;\\n  growth[\\\"9h\\\"] = gap1.records[0].hours9;\\n  growth[\\\"10h\\\"] = gap1.records[0].hours10;\\n\\n  function getHighestKeyValue(obj: { [key: string]: number }): { key: string; value: number } | undefined {\\n  let highestValue: number | undefined;\\n  let highestKey: string | undefined;\\n\\n  for (const key in obj) {\\n      if (obj.hasOwnProperty(key)) {\\n        const value = obj[key];\\n        if (typeof value === 'number') { // Ensure the value is a number for comparison\\n          if (highestValue === undefined || value > highestValue) {\\n            highestValue = value;\\n            highestKey = key;\\n          }\\n        }\\n      }\\n    }\\n  \\n    if (highestKey !== undefined && highestValue !== undefined) {\\n      return { key: highestKey, value: highestValue };\\n    } else {\\n      return undefined; // Handle case of empty object or no numeric values\\n    }\\n  }\\n\\n  const Result = getHighestKeyValue(growth)\\n    \\n  \\n  return Result;\\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"active\": true, \"position\": { \"x\": 0, \"y\": 4 }, \"conditions\": { \"states\": { \"calculate-forecast-timeframes\": \"OK\" } }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [ \"calculate-forecast-timeframes\" ] } }, \"description\": \"Subworkflow: Forecasting AWS Volume Disk Usage\\nThis subworkflow provides a streamlined method for forecasting the disk usage of an AWS EBS volume.\\n\\nSince an AWS volume can only be extended once every 6 hours, this subworkflow estimates the maximum expected usage within that time window.\\nThe forecasted value can then be passed to a workflow task responsible for extending the volume to the predicted size.\\n\\nParameters\\nhost_entity_id (Required):\\nThe Dynatrace Host entity ID associated with the AWS volume.\\n\\nforecast_method (Required):\\npossible values are \\\"point\\\", \\\"upper\\\", \\\"lower\\\" depending on which of the prediction outcomes you would like to use\\npoint = dt.davis.forecast:point\\nupper = dt.davis.forecast:upper\\nlower = dt.davis.forecast:lower\\nYou can find more information about these methods in the documentation:\\nhttps://docs.dynatrace.com/docs/discover-dynatrace/platform/davis-ai/ai-models/forecast-analysis\\nhttps://www.dynatrace.com/news/blog/stay-ahead-of-the-game-forecast-it-capacity-with-dynatrace-grail-and-davis-ai/\\n\\non_forecast_failure_increase_by_percentage_of_total_diskspace (Required):\\nA fallback percentage of the total volume size used to calculate an extension size if the forecast fails or returns a value smaller than the current volume size.\\n\\nWorkflow Logic\\nWhen triggered, the subworkflow uses the host_entity_id to forecast the disk usage 6 hours into the future.\\nIf the forecast fails—due to insufficient data or if the predicted usage is less than the current volume size—the subworkflow performs an alternative calculation using the fallback parameter.\\n\\nAlternative Calculation\\nIf forecasting is unsuccessful, the volume is extended using the following formula:\\nNew Volume Size = Current Volume Size + (Current Volume Size × Fallback Percentage)\\n\\nFor example:\\nIf the current volume size is 100 GB and the fallback percentage is 50%, the new volume size will be:\\n100 GB + (100 GB × 0.50) = 150 GB\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{result(\\\"get-prediction-result\\\")}}\", \"input\": { \"host_entity_id\": \"HOST-584C330971260086\", \"forecast_method\": \"point\", \"on_forecast_failure_increase_by_percentag_of_total_diskspace\": 100 }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data5xx.id;\n      console.log(subworkflow);\n    \n      let workflow5xx = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data5xx.id;\n      endresult[\"subworkflow - aws davis forecast for aws volume usage\"] = workflow5xx; \n\n    } catch (error: unknown) {\n      console.log(error)\n    }  \n\n  try {    \n      const data5xxx = await workflowsClient.createWorkflow({\n      body: { \"id\": \"03659848-380f-425c-8cc6-7a58ced48f87\", \"title\": \"template - aws volume remediation\", \"tasks\": { \"resize-volume\": { \"name\": \"resize-volume\", \"input\": { \"workflowId\": \"5052e41e-caa3-4bc8-a818-5f7b3999dbdb\", \"workflowInput\": \"{\\n  \\\"osType\\\": \\\"{{ input()[\\\"osType\\\"] }}\\\",\\n  \\\"SizeGib\\\": \\\"{{input()[\\\"future_disk_size\\\"]}}\\\",\\n  \\\"VolumeId\\\": \\\"{{input()[\\\"volume_id\\\"] }}\\\",\\n  \\\"awsregion\\\": \\\"{{input()[\\\"aws_region\\\"] }}\\\",\\n  \\\"InstanceId\\\": \\\"{{ input()[\\\"instance_id\\\"] }}\\\",\\n  \\\"MountPoint\\\": \\\"/\\\",\\n  \\\"DriveLetter\\\": \\\"\\\",\\n  \\\"keepSnapShot\\\": \\\"false\\\",\\n  \\\"dynatraceawsconnection\\\":\\\"{{input()[\\\"dynatraceawsconnection\\\"] }}\\\",\\n  \\\"AutomationAssumeRolearn\\\": \\\"\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"custom\": \"\", \"states\": { \"check-if-problem-is-solved-1\": \"ERROR\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"check-if-problem-is-solved-1\" ] }, \"run-standard-cleanup\": { \"name\": \"run-standard-cleanup\", \"input\": { \"workflowId\": \"57fa7bc0-b0ee-406d-b231-b16fe35e4c79\", \"workflowInput\": \"{\\n\\\"commands\\\":[\\\"sudo rm /home/ubuntu/large_file.log || true\\\"],\\n\\\"awsregion\\\":\\\"{{input()[\\\"aws_region\\\"] }}\\\",\\n\\\"instanceid\\\":\\\"{{ input()[\\\"instance_id\\\"] }}\\\",\\n\\\"executionTimeout\\\":\\\"3600\\\",\\n\\\"workingDirectory\\\":\\\"/home/ubuntu\\\",\\n\\\"dynatraceawsconnection\\\":\\\"{{input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": 0, \"y\": 1 }, \"conditions\": { \"states\": {} }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"waitBefore\": 20, \"predecessors\": [] }, \"send-escalation-email\": { \"name\": \"send-escalation-email\", \"input\": { \"cc\": [], \"to\": [ \"{{ input()[\\\"escalation_email\\\"] }}\" ], \"bcc\": [], \"taskId\": \"{{ task().id }}\", \"content\": \"Auto Remediation was not Successful\\nDynatrace Remediation Workflow: {{ environment() }}/ui/apps/dynatrace.automations/executions/{{ execution().id }}\\nProblem id: [code]<a href=\\\"{{environment().url }}/ui/apps/dynatrace.classic.problems/problems/problemdetails;gtf=-6h;gf=all;pid={{input()[\\\"event_id\\\"]}}\\\" target=\\\"_blank\\\">{{input()[\\\"event_id\\\"]}} </a>[/code]\\nProblem id link: [code]<a href=\\\"{{environment().url }}/ui/apps/dynatrace.davis.problems/problem/{{input()[\\\"event_id\\\"]}}\\\" target=\\\"_blank\\\">{{input()[\\\"event_id\\\"]}} </a>[/code]\", \"subject\": \"Auto Remediation was not Successful\", \"executionId\": \"{{ execution().id }}\", \"environmentUrl\": \"{{ environment().url }}\" }, \"action\": \"dynatrace.email:send-email\", \"active\": true, \"position\": { \"x\": 0, \"y\": 5 }, \"conditions\": { \"custom\": \"{{ result(\\\"check-for-recent-remediation\\\").restartinstance == true }}\", \"states\": { \"check-if-problem-is-solved-2\": \"ERROR\" } }, \"description\": \"Send email\", \"predecessors\": [ \"check-if-problem-is-solved-2\" ] }, \"check-if-problem-is-solved-1\": { \"name\": \"check-if-problem-is-solved-1\", \"input\": { \"workflowId\": \"d31cdf5e-f1ca-4583-a850-67af54e3dde7\", \"workflowInput\": \"{\\\"dynatrace_problem_display_id\\\": \\\"{{input()[\\\"display_id\\\"] }}\\\"}\" }, \"retry\": { \"count\": 2, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"custom\": \"\", \"states\": { \"run-standard-cleanup\": \"ANY\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"waitBefore\": 500, \"predecessors\": [ \"run-standard-cleanup\" ] }, \"check-if-problem-is-solved-2\": { \"name\": \"check-if-problem-is-solved-2\", \"input\": { \"workflowId\": \"d31cdf5e-f1ca-4583-a850-67af54e3dde7\", \"workflowInput\": \"{\\\"dynatrace_problem_display_id\\\": \\\"{{input()[\\\"display_id\\\"] }}\\\"}\" }, \"retry\": { \"count\": 10, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"timeout\": 90000, \"position\": { \"x\": 0, \"y\": 4 }, \"conditions\": { \"custom\": \"\", \"states\": { \"resize-volume\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"waitBefore\": 500, \"predecessors\": [ \"resize-volume\" ] }, \"ingest-remediation-event-resize-volume\": { \"name\": \"ingest-remediation-event-resize-volume\", \"input\": { \"workflowId\": \"74a063e4-576a-4955-b477-1c531bcf7ad1\", \"workflowInput\": \"{\\n\\\"title\\\":\\\"Remediation - ({{ input()[\\\"display_id\\\"] }} Low Storage Warning) Start resize disk volume {{input()[\\\"volume_id\\\"] }} from {{ input()[\\\"current_disk_size\\\"] }} gb to {{ input()[\\\"future_disk_size\\\"] }} gb on host {{input()[\\\"host_name\\\"] }}\\\",\\n\\\"properties\\\":{\\n\\\"workflow\\\":\\\"{{ environment().url }}/ui/apps/dynatrace.automations/executions/{{ execution().id }}\\\",\\n\\\"remediation_step\\\":\\\"resize disk volume\\\",\\n\\\"remediation_host_name\\\":\\\"{{input()[\\\"host_name\\\"] }}\\\",\\n\\\"remediation_entity_name\\\":\\\"{{input()[\\\"volume_id\\\"]}}\\\"}\\n}\" }, \"retry\": { \"count\": 5, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": -1, \"y\": 4 }, \"conditions\": { \"custom\": \"\", \"states\": { \"resize-volume\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"resize-volume\" ] }, \"ingest-remediation-event-run-standard-cleanup\": { \"name\": \"ingest-remediation-event-run-standard-cleanup\", \"input\": { \"workflowId\": \"74a063e4-576a-4955-b477-1c531bcf7ad1\", \"workflowInput\": \"{\\n\\\"title\\\":\\\"Remediation - ({{ input()[\\\"display_id\\\"] }} Low Storage Warning) Start disk cleanup on host {{input()[\\\"host_name\\\"] }}\\\",\\n\\\"properties\\\":{\\n\\\"workflow\\\":\\\"{{ environment().url }}/ui/apps/dynatrace.automations/executions/{{ execution().id }}\\\",\\n\\\"remediation_step\\\":\\\"start disk cleanup\\\",\\n\\\"remediation_host_name\\\":\\\"{{input()[\\\"host_name\\\"] }}\\\",\\n\\\"remediation_entity_name\\\":\\\"{{input()[\\\"volume_id\\\"]}}\\\"}\\n}\" }, \"retry\": { \"count\": 5, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": -1, \"y\": 2 }, \"conditions\": { \"states\": { \"run-standard-cleanup\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"waitBefore\": 60, \"predecessors\": [ \"run-standard-cleanup\" ] } }, \"description\": \"Subworkflow example to run a multistep aws volume remediation\\n\\nThis subworkflow uses multiple subworkflows to remediate\\nan aws volume that is running out of diskspace.\\n\\nAs first step it tries a standard cleanup (deleting typical files that grow large over time\\nbut are not needed) then checks if the problem is solved, if its not solved\\nit will run the resize of a volume, then reboot the ec2 instance (needed after resize\\nfor the ec2 instance to detect the new size of the volume)\\nthen checks again if the problem was solved, if not escalates via email.\\n\\nThe workflow also keeps Service now incidents up to date and ingests events for\\nthe remedation steps into dynatrace.\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": null, \"input\": { \"osType\": \"\", \"event_id\": \"dyn.get-aws-system-manager-status\", \"host_name\": \"i-0922ad0641af731f9\", \"volume_id\": \"\", \"aws_region\": \"\", \"display_id\": \"\", \"instance_id\": \"\", \"ec2_entity_id\": \"\", \"host_entity_id\": \"\", \"escalation_email\": \"daniel.braaf@dynatrace.com\", \"future_disk_size\": \"\", \"volume_entity_id\": \"\", \"current_disk_size\": \"\", \"dynatraceawsconnection\": \"awssandbox\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data5xxx.id;\n      console.log(subworkflow);\n    \n      let workflow5xxx = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data5xxx.id;\n      endresult[\"template - aws volume remediation\"] = workflow5xxx; \n\n    } catch (error: unknown) {\n      console.log(error)\n    }  \n\n   try {\n      const data8xx = await workflowsClient.createWorkflow({\n        body: { \"id\": \"57fa7bc0-b0ee-406d-b231-b16fe35e4c79\", \"title\": \"subworkflow - aws run command on ec2 instance\", \"tasks\": { \"wait-for-result\": { \"name\": \"wait-for-result\", \"input\": { \"workflowId\": \"97218693-adf0-4c82-a295-e43d848b0b4d\", \"workflowInput\": \"{\\n  \\\"CommandId\\\":\\\"{{result(\\\"systems_manager_send_command_1\\\")[\\\"Command\\\"].CommandId }}\\\",\\n  \\\"awsregion\\\":\\\"{{input()[\\\"awsregion\\\"] }}\\\",\\n  \\\"awsinstanceid\\\":\\\"{{input()[\\\"instanceid\\\"] }}\\\",\\n  \\\"dynatraceawsconnection\\\": \\\"{{ input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"retry\": { \"count\": 99, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"timeout\": 604800, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"systems_manager_send_command_1\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"systems_manager_send_command_1\" ] }, \"systems_manager_send_command_1\": { \"name\": \"systems_manager_send_command_1\", \"input\": { \"region\": \"{{ input()[\\\"awsregion\\\"] }}\", \"Parameters\": \"{\\n  \\\"commands\\\": {{ input()[\\\"commands\\\"] | replace(\\\"'\\\",'\\\"') }}\\n}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"InstanceIds\": \"{{ input()[\\\"instanceid\\\"] }}\", \"DocumentName\": \"AWS-RunShellScript\" }, \"retry\": { \"count\": 5, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.aws.connector:ssm-send-command\", \"active\": true, \"timeout\": 604800, \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Runs commands on one or more managed nodes\", \"predecessors\": [] } }, \"description\": \"Subworkflow to run a command running on an ec2 instance\\n\\nThis subworkflow provides an easy way to trigger\\nthe execution of a command on a aws ec2 instance\\nwithout needing to know how aws ssm works.\\n\\nThis subworkflow uses the out of the box AWS-RunShellScript\\nSSM document to run scripts on ec2 instances.\\nWaits until the command execution has finished and\\nchecks if the execution was succesful and fails\\nif it wasnt so the parent workflow is able to\\nrestart the subworkflow on error.\\n\\nIn order for this subworkflow to execute successfully the ec2 instance must be a systems manager managed instance:\\nhttps://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-ec2.html\\n\\nParameters \\n\\ncommands: (Required) command to run on the ec2 instance\\nawsregion: (Required) region in which the ec2 instance to run the command on resides\\ninstanceid: (Required) instance id on which the command will run\\nexecutionTimeout: (Required) execution timeout of the command\\nworkingDirectory: (Required) working directory of the command\\ndynatraceawsconnection: (Required) dynatrace aws connection\\n\\nThis subworkflow Needs subworkflow \\\"subworkflow - aws wait for send command execution\\\"\\n\\nThis subworkflow uses the out of the box AWS SSM document AWS-RunShellScript\\nhttps://us-east-1.console.aws.amazon.com/systems-manager/documents/AWS-RunShellScript/description?region=us-east-1\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"wait-for-result\\\") }}\", \"input\": { \"commands\": [ \"echo test\", \"sleep 100\" ], \"awsregion\": \"us-east-1\", \"instanceid\": \"i-0e831c54dc3f2f0c7\", \"executionTimeout\": \"3600\", \"workingDirectory\": \"/home/ubuntu\", \"dynatraceawsconnection\": \"awsplayground\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data8xx.id;\n      console.log(subworkflow);\n    \n      let workflow8xx = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data8xx.id;\n      endresult[\"subworkflow - aws run command on ec2 instance\"] = workflow8xx; \n     \n    } catch (error: unknown) {\n      console.log(error)\n    }\n\n  try {\n      const data7xx = await workflowsClient.createWorkflow({\n        body: { \"id\": \"d31cdf5e-f1ca-4583-a850-67af54e3dde7\", \"title\": \"subworkflow - dynatrace check if davis problem is solved or closed\", \"tasks\": { \"check-if-problem-solved\": { \"name\": \"check-if-problem-solved\", \"input\": { \"query\": \"fetch events, from: now()-7d\\n| filter matchesPhrase(display_id,\\\"{{input()[\\\"dynatrace_problem_display_id\\\"] }}\\\" ) and matchesValue(event.status_transition, \\\"RESOLVED\\\" ) or matchesPhrase(display_id,\\\"{{input()[\\\"dynatrace_problem_display_id\\\"] }}\\\" ) and matchesValue(event.status_transition, \\\"CLOSED\\\" )\", \"failOnEmptyResult\": true }, \"action\": \"dynatrace.automations:execute-dql-query\", \"position\": { \"x\": 0, \"y\": 1 }, \"conditions\": { \"custom\": \"\", \"states\": {} }, \"description\": \"Make use of Dynatrace Grail data in your workflow.\", \"predecessors\": [] } }, \"description\": \"Subworkflow to Check if a Davis Problem is Solved or Closed\\n\\nUse Case:\\nWhen executing multiple remediation steps in a workflow, this subworkflow can be used to validate whether a specific \\nstep has resolved the problem. If the problem is still open, the subworkflow will fail.\\n\\nYou can configure the \\\"retry on error\\\" setting in the parent workflow to retry this subworkflow for a specific duration—for example,\\nrun for 10 minutes and check periodically if the problem has been resolved.\\n\\nIf the problem is not resolved within the defined time window, you can:\\n\\n* Add another remediation step.\\n* Escalate the issue to a human operator.\\n\\nThis approach enables automated, iterative problem resolution while maintaining control over escalation and fallback strategies.\\n\\nParameters:\\n\\ndynatrace_problem_display_id: (Reguired) Davis Problem id (for example P-25051158)\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"check-if-problem-solved\\\") }}\", \"input\": { \"dynatrace_problem_display_id\": \"P-25051158\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data7xx.id;\n      console.log(subworkflow);\n    \n      let workflow7xx = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data7xx.id;\n      endresult[\"subworkflow - dynatrace check if davis problem is solved or closed\"] = workflow7xx; \n    } catch (error: unknown) {\n      console.log(error)\n    }\n\n  try {\n      const data7xy = await workflowsClient.createWorkflow({\n        body: { \"id\": \"5052e41e-caa3-4bc8-a818-5f7b3999dbdb\", \"title\": \"subworkflow - aws extend ebs volume\", \"tasks\": { \"check-status\": { \"name\": \"check-status\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\n\\nexport default async function ({ execution_id }) {\\n  const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/wait-for-ssm-execution-completed/result`);\\n  const configBody = await configGet.json();\\n  const status = configBody.AutomationExecutionStatus.toUpperCase()\\n  console.log(status)\\n  \\n  if (status !=\\\"SUCCESS\\\") {\\n        console.log(\\\"SSM Document Execution has Failed!\\\");\\n        throw new Error(\\\"SSM Document Execution has Failed!\\\");\\n  } \\n\\n  return configBody;\\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"active\": true, \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"states\": { \"wait-for-ssm-execution-completed\": \"OK\" } }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [ \"wait-for-ssm-execution-completed\" ] }, \"wait-for-ssm-execution-completed\": { \"name\": \"wait-for-ssm-execution-completed\", \"input\": { \"workflowId\": \"20661ec0-29d5-471f-9973-29679d5fe908\", \"workflowInput\": \"{\\n\\\"AutomationExecutionId\\\":\\\"{{result(\\\"systems_manager_start_automation_execution_1\\\").AutomationExecutionId }}\\\",\\n\\\"awsregion\\\": \\\"{{input()[\\\"awsregion\\\"] }}\\\",\\n\\\"dynatraceawsconnection\\\": \\\"{{ input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"retry\": { \"count\": 99, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"timeout\": 604800, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"systems_manager_start_automation_execution_1\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"systems_manager_start_automation_execution_1\" ] }, \"systems_manager_start_automation_execution_1\": { \"name\": \"systems_manager_start_automation_execution_1\", \"input\": { \"region\": \"{{ input()[\\\"awsregion\\\"]}}\", \"Parameters\": \"{\\n  \\\"VolumeId\\\": [\\\"{{ input()[\\\"VolumeId\\\"] }}\\\"],\\n  \\\"SizeGib\\\": [\\\"{{ input()[\\\"SizeGib\\\"] }}\\\"],\\n  \\\"MountPoint\\\": [\\\"{{ input()[\\\"MountPoint\\\"] }}\\\"],\\n  \\\"DriveLetter\\\": [\\\"{{ input()[\\\"DriveLetter\\\"] }}\\\"],\\n  \\\"keepSnapShot\\\": [\\\"{{ input()[\\\"keepSnapShot\\\"] }}\\\"], \\n  \\\"InstanceId\\\": [\\\"{{ input()[\\\"InstanceId\\\"] }}\\\"],\\n  \\\"AutomationAssumeRole\\\": [\\\"{{ input()[\\\"AutomationAssumeRolearn\\\"] }}\\\"]\\n}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"DocumentName\": \"AWS-ExtendEbsVolume\" }, \"action\": \"dynatrace.aws.connector:ssm-start-automation-execution\", \"active\": true, \"timeout\": 604800, \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Initiates execution of an Automation runbook\", \"predecessors\": [] } }, \"description\": \"Subworkflow to extend aws volumes (can only be done once every 6 hours).\\n\\nThis subworkflow provides an easy way to trigger\\nthe extension of aws volumes attached to an ec2 instance\\n\\nParameters:\\n\\nosType: (Required) the Operating System type of the Ec2 istance (Windows or Linux)\\nSizeGib: (Required) The target size to increase the volume to (in GiB).\\nVolumeId: (Required) The volume to be extended\\nawsregion: region of volume to extend\\nInstanceId: (Required) The identifier of the instance requiring increase of volume\\nMountPoint: (Optional) The mount point (such as \\\"/\\\", \\\"/data\\\", ...) of the partition which is to be increased(Required for Linux).\\nDriveLetter: (Optional) The drive letter which is to be increased(Required for windows).\\nkeepSnapShot: (Optional) A boolean flag to determine whether to remove the created snapshot after successful resizing of the volume and the file system(True by default).\\ndynatraceawsconnection: (Required) dynatrace aws oidc connection\\nAutomationAssumeRolearn: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf\\n\\n\\nThis subworkflow only works on ssm managed aws ec2 instances:\\nPlease view this aws manual on how to make an ec2 instances ssm managed: https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-ec2.html\\n\\nThis subworkflow needs 2 SSM Documents:\\n\\n1.) Out of the Box AWS Document \\\"aws-extendebsvolume\\\" https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/aws-extendebsvolume.html\\n2.) A Custom Document for which you will find the instructions to import below\\n\\nThe Out of the Box Document \\\"aws-extendebsvolume\\\" provides the following functionality:\\n .) create snapshot (Optional)\\n .) Resize Ebs Volume on AWS\\n .) Resize partitions on Operating systems\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"wait-for-ssm-execution-completed\\\") }}\", \"input\": { \"osType\": \"\", \"SizeGib\": \"90\", \"VolumeId\": \"vol-034b884f20b26576c\", \"awsregion\": \"us-east-1\", \"InstanceId\": \"i-04ea0bc508917a220\", \"MountPoint\": \"/\", \"DriveLetter\": \"\", \"keepSnapShot\": \"false\", \"dynatraceawsconnection\": \"awssandbox\", \"AutomationAssumeRolearn\": \"\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      \n      });\n      subworkflow = data7xy.id;\n      console.log(subworkflow);\n    \n      let workflow7xy = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data7xy.id;\n      endresult[\"subworkflow - aws extend ebs volume\"] = workflow7xy; \n    } catch (error: unknown) {\n      console.log(error)\n    }\n\n   try {\n      const data12xx = await workflowsClient.createWorkflow({\n        body: { \"id\": \"20661ec0-29d5-471f-9973-29679d5fe908\", \"title\": \"subworkflow - aws wait for systems manager  document execution\", \"tasks\": { \"get-status\": { \"name\": \"get-status\", \"input\": { \"region\": \"{{ input()[\\\"awsregion\\\"] }}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"AutomationExecutionId\": \"{{ input()[\\\"AutomationExecutionId\\\"] }}\" }, \"action\": \"dynatrace.aws.connector:ssm-get-automation-execution\", \"active\": true, \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Get detailed information about a particular Automation execution\", \"predecessors\": [] }, \"check-status\": { \"name\": \"check-status\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\n\\nexport default async function ({ execution_id }) {\\n  const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/get-status/result`);\\n  const configBody = await configGet.json();\\n  const status = configBody.AutomationExecution.AutomationExecutionStatus.toUpperCase()\\n  console.log(status)\\n  \\n  if (status ==\\\"INPROGRESS\\\" || status ==\\\"PENDING\\\" ) {\\n        console.log(\\\"Automation still running, restarting again!\\\");\\n        throw new Error(\\\"Automation still running, restarting again!\\\");\\n  } \\n\\n  return configBody;\\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"active\": true, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"get-status\": \"OK\" } }, \"description\": \"Build a custom task running js Code\", \"predecessors\": [ \"get-status\" ] } }, \"description\": \"Subworkflow to wait for aws ssm document execution to finish\\n\\nThis subworkflow is used in subworkflows that execute ssm documents\\nto wait for the execution to finish and check the status of the execution.\\nIf the execution wasnt successful the subworklow will fail so that\\nparent workflows can respond with rerun on error.\\n\\nParameters: \\n\\nawsregion: (Required) Region in which the SSM document runs\\nAutomationExecutionId: (Required) Execution id of the SSM document (Returned by Start SSM actions)\\ndynatraceawsconnection: (Required) Dynatrace oidc connection name\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"check-status\\\").AutomationExecution }}\", \"input\": { \"awsregion\": \"us-east-1\", \"AutomationExecutionId\": \"08093423-3443-4182-8397-12e802518f29\", \"dynatraceawsconnection\": \"awsplayground\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data12xx.id;\n      console.log(subworkflow);\n      let workflow12xx = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data12xx.id;\n      endresult[\"subworkflow - aws wait for systems manager  document execution\"] = workflow12xx;\n    } catch (error: unknown) {\n      console.log(error)\n    }\n\n    \n  }\n\n\n  \ntry {\n  const datax = await workflowsClient.createWorkflow({\n    body: { \"id\": \"e85d9c9e-30a9-44db-a429-0b781bad389a\", \"title\": \"subworkflow - aws create cloudformation stack\", \"tasks\": { \"check-status\": { \"name\": \"check-status\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\n\\nexport default async function ({ execution_id }) {\\n  const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/wait-for-ssm-execution-completed/result`);\\n  const configBody = await configGet.json();\\n  const status = configBody.AutomationExecutionStatus.toUpperCase()\\n  console.log(status)\\n  \\n  if (status !=\\\"SUCCESS\\\") {\\n        console.log(\\\"SSM Document Execution has Failed!\\\");\\n        throw new Error(\\\"SSM Document Execution has Failed!\\\");\\n  } \\n\\n  return configBody;\\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"states\": { \"wait-for-ssm-execution-completed\": \"OK\" } }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [ \"wait-for-ssm-execution-completed\" ] }, \"wait-for-ssm-execution-completed\": { \"name\": \"wait-for-ssm-execution-completed\", \"input\": { \"workflowId\": \"20661ec0-29d5-471f-9973-29679d5fe908\", \"workflowInput\": \"{\\n\\\"AutomationExecutionId\\\":\\\"{{result(\\\"systems_manager_start_automation_execution_1\\\").AutomationExecutionId }}\\\",\\n\\\"awsregion\\\": \\\"{{input()[\\\"awsregion\\\"] }}\\\",\\n\\\"dynatraceawsconnection\\\": \\\"{{ input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"retry\": { \"count\": 99, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"timeout\": 604800, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"systems_manager_start_automation_execution_1\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"systems_manager_start_automation_execution_1\" ] }, \"systems_manager_start_automation_execution_1\": { \"name\": \"systems_manager_start_automation_execution_1\", \"input\": { \"region\": \"{{ input()[\\\"awsregion\\\"]}}\", \"Parameters\": \"{ \\n  \\\"stackname\\\": [\\\"{{input()[\\\"cf_stackname\\\"] }}\\\"],\\n  \\\"cfyamls3url\\\": [\\\"{{input()[\\\"cfyamls3url\\\"] }}\\\"]\\n}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"DocumentName\": \"Dynwf-CreateCloudFormationStack\" }, \"action\": \"dynatrace.aws.connector:ssm-start-automation-execution\", \"active\": true, \"timeout\": 604800, \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Initiates execution of an Automation runbook\", \"predecessors\": [] } }, \"description\": \"Subworkflow to Create an AWS CloudFormation Stack\\n\\nThis subworkflow provides an easy way to trigger the creation of an aws cloudformation stack\\n\\nparameters:\\n\\ncf_stackname: (Required) The name of the CloudFormation stack you want to create.\\ncfyamls3url: (Required) The URL of the CloudFormation YAML file to run (must be stored in S3 and linked to using the following url syntax: https://s3bucket.s3.us-east-1.amazonaws.com/cf.yaml).\\nawsregion: (Required) The AWS region in which you want to create the CloudFormation stack.\\ndynatraceawsconnection: (Required) The connection name of the Dynatrace OIDC connection.\\n\\nThis subworkflow requires the custom SSM Document \\\"Dynwf-CreateCloudFormationStack\\\" to be available in the region specified by the awsregion parameter.\\nPlease refer to the instructions below under \\\"Steps to Import AWS SSM Document/Runbook YAML\\\".\\n\\nSubworkflow will wait for ssm document execution and will fail if ssm document fails.\\n\\nWorkflow-Steps\\n***************\\n\\nThe subworkflow sends the command to create a cloudformation stack to the\\naws SSM document \\\"Dynwf-CreateCloudFormationStack\\\", then waits until\\nthe SSM document has finished and then checks if the creation was \\nsuccessful. If not, it will fail the subworkflow to provide a restart on error\\nfunctionality to the Parent workflow\\n\\nThis subworkflow Needs subworkflow \\\"subworkflow - aws wait for systems manager document execution\\\"\\n\\nSteps to Import AWS SSM Document/Runbook Yaml:\\n***********************************************\\n1.) Open the Following link https://us-east-1.console.aws.amazon.com/systems-manager/documents/create-document?region=us-east-1#documentType=Automation\\n    That will take you to the AWS Management Console (you need to be logged in) and open the Runbook builder to create a new Runbook.\\n\\n2.) If needed change the aws region of the Runbook in the console\\n3.) In the upper left corner Change the Runbook name into \\\"Dynwf-CreateCloudFormationStack\\\"\\n4.) Click on the {} Code button next to the runbook name this will take you to the yaml def. of the runbook\\n5.) Paste the Yaml content below into the code field\\n\\n# yaml file start\\nschemaVersion: '0.3'\\ndescription: |-\\n  *Replace this default text with instructions or other information about your runbook.*\\n\\n  ---\\n  # What is Markdown?\\n  Markdown is a lightweight markup language that converts your content with plain text formatting to structurally valid rich text.\\n  ## You can add headings\\n  You can add *italics* or make the font **bold**.\\n  1. Create numbered lists\\n  * Add bullet points\\n  >Indent `code samples`\\n\\n  You can create a [link to another webpage](https://aws.amazon.com).\\nparameters:\\n  stackname:\\n    type: String\\n  cfyamls3url:\\n    type: String\\nmainSteps:\\n  - name: CreateCloudFormationStack\\n    action: aws:createStack\\n    isEnd: true\\n    inputs:\\n      StackName: '{{ stackname }}'\\n      Capabilities:\\n        - CAPABILITY_NAMED_IAM\\n      TimeoutInMinutes: 120\\n      TemplateURL: '{{ cfyamls3url }}'\\noutputs:\\n  - CreateCloudFormationStack.StackId\\n  - CreateCloudFormationStack.StackStatus\\n  - CreateCloudFormationStack.StackStatusReason\\n  - CreateCloudFormationStack.OutputPayload\\n# yaml file end\\n\\n6.) Click on create runbook\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"wait-for-ssm-execution-completed\\\") }}\", \"input\": { \"awsregion\": \"us-east-1\", \"cfyamls3url\": \"https://serverlessexamples.s3.us-east-1.amazonaws.com/serverless_demo_fail_us_east_2.yaml\", \"cf_stackname\": \"serverless-demo\", \"dynatraceawsconnection\": \"awsplayground\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n    });\n  subworkflow = datax.id;\n  console.log(subworkflow);\n  let workflowx = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + datax.id;\n  endresult[\"subworkflow - aws create cloudformation stack\"] = workflowx;\n} catch (error: unknown) {\n  console.log(error)\n}\n\n try {\n    const data12xx = await workflowsClient.createWorkflow({\n      body: { \"id\": \"20661ec0-29d5-471f-9973-29679d5fe908\", \"title\": \"subworkflow - aws wait for systems manager  document execution\", \"tasks\": { \"get-status\": { \"name\": \"get-status\", \"input\": { \"region\": \"{{ input()[\\\"awsregion\\\"] }}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"AutomationExecutionId\": \"{{ input()[\\\"AutomationExecutionId\\\"] }}\" }, \"action\": \"dynatrace.aws.connector:ssm-get-automation-execution\", \"active\": true, \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Get detailed information about a particular Automation execution\", \"predecessors\": [] }, \"check-status\": { \"name\": \"check-status\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\n\\nexport default async function ({ execution_id }) {\\n  const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/get-status/result`);\\n  const configBody = await configGet.json();\\n  const status = configBody.AutomationExecution.AutomationExecutionStatus.toUpperCase()\\n  console.log(status)\\n  \\n  if (status ==\\\"INPROGRESS\\\" || status ==\\\"PENDING\\\" ) {\\n        console.log(\\\"Automation still running, restarting again!\\\");\\n        throw new Error(\\\"Automation still running, restarting again!\\\");\\n  } \\n\\n  return configBody;\\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"active\": true, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"get-status\": \"OK\" } }, \"description\": \"Build a custom task running js Code\", \"predecessors\": [ \"get-status\" ] } }, \"description\": \"Subworkflow to wait for aws ssm document execution to finish\\n\\nThis subworkflow is used in subworkflows that execute ssm documents\\nto wait for the execution to finish and check the status of the execution.\\nIf the execution wasnt successful the subworklow will fail so that\\nparent workflows can respond with rerun on error.\\n\\nParameters: \\n\\nawsregion: (Required) Region in which the SSM document runs\\nAutomationExecutionId: (Required) Execution id of the SSM document (Returned by Start SSM actions)\\ndynatraceawsconnection: (Required) Dynatrace oidc connection name\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"check-status\\\").AutomationExecution }}\", \"input\": { \"awsregion\": \"us-east-1\", \"AutomationExecutionId\": \"08093423-3443-4182-8397-12e802518f29\", \"dynatraceawsconnection\": \"awsplayground\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n   \n    });\n    subworkflow = data12xx.id;\n    console.log(subworkflow);\n    let workflow12xx = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data12xx.id;\n    endresult[\"subworkflow - aws wait for systems manager  document execution\"] = workflow12xx;\n  } catch (error: unknown) {\n    console.log(error)\n  }\n\n try {\n    const data20xx = await workflowsClient.createWorkflow({\n      body: { \"id\": \"c9f7024c-00db-4067-bc09-a7de20626286\", \"title\": \"subworkflow - dynatrace limit parallel runs of workflow\", \"tasks\": { \"check-max-parallel\": { \"name\": \"check-max-parallel\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\nimport { executionsClient } from \\\"@dynatrace-sdk/client-automation\\\";\\n\\n\\nexport default async function ({ execution_id }) {\\n  // your code goes here\\n  // get own workflow execution details\\n  const { input } = await fetch(`/platform/automation/v1/executions/${execution_id}`).then((res) => res.json());\\n\\n  // get number of currently running parent workflow executions\\n  const ex = await execution(input.parent_workflow_execution_id);\\n  console.log(ex)\\n  console.log(ex.workflow)\\n  // get number of currently running executions of this workflow instance\\n  const data = await executionsClient.getExecutions({\\n    workflow: ex.workflow,\\n    state: \\\"RUNNING\\\"\\n  });\\n  //console.log(data)\\n  //console.log(data.count)\\n  //console.log(typeof(data.count))\\n\\n  var i = data.count - 1\\n\\n  // abort and automatically retry in min defind in retry if a workflow is already active\\n  if (data.count > 1) {\\n    if (data.results[i].id != execution_id) {    \\n     throw new Error(\\\"There are currently \\\"+data.count+\\\" parellel workflows running, try again in 60 seconds\\\");\\n    }   \\n  } \\n  return { \\\"status\\\": \\\"done\\\" };\\n}\" }, \"retry\": { \"count\": 99, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-javascript\", \"timeout\": 604800, \"position\": { \"x\": 0, \"y\": 1 }, \"conditions\": { \"else\": \"STOP\", \"custom\": \"\", \"states\": {} }, \"description\": \"Build a custom task running js Code\", \"predecessors\": [] } }, \"description\": \"Subworkflow to limit the parallel execution of a workflow\\n\\nIn certain scenarios where workflows are triggered\\nmultiple times in parallel you might need a mechanism\\nthat limits the execution and puts them in order.\\n\\nThis task will wait for previous Workflow executions to \\nfinish until it lets a workflow run further.\\n\\nparameters to set are:\\n\\nmax_parallel_runs: (Required) how many runs of the same workflow are allowed at the same time\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": null, \"input\": { \"max_parallel_runs\": 1, \"parent_workflow_id\": \"{{ execution().workflow.id }}\", \"parent_workflow_execution_id\": \"{{ execution().id }}\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n    });\n    subworkflow = data20xx.id;\n    console.log(subworkflow);\n    let workflow20xx = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data20xx.id;\n    endresult[\"subworkflow - dynatrace limit parallel runs of workflow\"] = workflow20xx;\n  } catch (error: unknown) {\n    console.log(error)\n  }\n\n   try {\n    const data22xx = await workflowsClient.createWorkflow({\n      body: { \"id\": \"d383240e-af68-4833-bd4b-d02615b1030d\", \"title\": \"subworkflow - aws delete cloudformation stack\", \"tasks\": { \"check-status\": { \"name\": \"check-status\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\n\\nexport default async function ({ execution_id }) {\\n  const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/wait-for-ssm-execution-completed/result`);\\n  const configBody = await configGet.json();\\n  const status = configBody.AutomationExecutionStatus.toUpperCase()\\n  console.log(status)\\n  \\n  if (status !=\\\"SUCCESS\\\") {\\n        console.log(\\\"SSM Document Execution has Failed!\\\");\\n        throw new Error(\\\"SSM Document Execution has Failed!\\\");\\n  } \\n\\n  return configBody;\\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"states\": { \"wait-for-ssm-execution-completed\": \"OK\" } }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [ \"wait-for-ssm-execution-completed\" ] }, \"wait-for-ssm-execution-completed\": { \"name\": \"wait-for-ssm-execution-completed\", \"input\": { \"workflowId\": \"20661ec0-29d5-471f-9973-29679d5fe908\", \"workflowInput\": \"{\\n\\\"AutomationExecutionId\\\":\\\"{{result(\\\"systems_manager_start_automation_execution_1\\\").AutomationExecutionId }}\\\",\\n\\\"awsregion\\\": \\\"{{input()[\\\"awsregion\\\"] }}\\\",\\n\\\"dynatraceawsconnection\\\": \\\"{{ input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"retry\": { \"count\": 99, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"timeout\": 604800, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"systems_manager_start_automation_execution_1\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"systems_manager_start_automation_execution_1\" ] }, \"systems_manager_start_automation_execution_1\": { \"name\": \"systems_manager_start_automation_execution_1\", \"input\": { \"region\": \"{{ input()[\\\"awsregion\\\"] }}\", \"Parameters\": \"{ \\n  \\\"stackname\\\": [\\\"{{input()[\\\"cf_stackname\\\"] }}\\\"]\\n}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"DocumentName\": \"Dynwf-DeleteCloudFormationStack\" }, \"retry\": { \"count\": 5, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.aws.connector:ssm-start-automation-execution\", \"active\": true, \"timeout\": 604800, \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Initiates execution of an Automation runbook\", \"predecessors\": [] } }, \"description\": \"Subworkflow to Delete an AWS CloudFormation Stack\\n\\nThis subworkflow provides a simple way to trigger the deletion of an AWS CloudFormation stack \\n\\nParameters:\\n\\ncf_stackname: (Required) stackname of the cloudformation stack you want to delete\\nawsregion: (Required) region in which you want to delete the cloudformation stack\\ndynatraceawsconnection: (Required) Dynatrace aws oidc connection name\\n\\nThis subworkflow needs the custom SSM Document \\n\\\"Dynwf-DeleteCloudFormationStack\\\" available in the\\nregion that is handed over by the parameter \\\"awsregion\\\" \\n\\nThe subworkflow sends the command to delete a cloudformation stack to the\\naws SSM document \\\"Dynwf-DeleteCloudFormationStack\\\", then waits until\\nthe SSM document has finished and then checks if the deletion was \\nsuccessful. If not, it will fail the subworkflow to provide a \\nrestart on error functionality to the Parent workflow\\n\\nSteps to Import AWS SSM Document/Runbook Yaml:\\n***********************************************\\n1.) Open the Following link https://us-east-1.console.aws.amazon.com/systems-manager/documents/create-document?region=us-east-1#documentType=Automation\\n    That will take you to the AWS Management Console (you need to be loggin it) and open the Runbook builder to create a new Runbook\\n\\n2.) If needed change the aws region of the Runbook in the console\\n3.) In the upper left corner Change the Runbook name into \\\"Dynwf-DeleteCloudFormationStack\\\"\\n4.) Click on the {} Code button next to the runbook name this will take you to the yaml def. of the runbook\\n5.) Paste the Yaml content below into the code field\\n\\n# yaml file start\\n\\nschemaVersion: '0.3'\\ndescription: |-\\n  *Replace this default text with instructions or other information about your runbook.*\\n\\n  ---\\n  # What is Markdown?\\n  Markdown is a lightweight markup language that converts your content with plain text formatting to structurally valid rich text.\\n  ## You can add headings\\n  You can add *italics* or make the font **bold**.\\n  1. Create numbered lists\\n  * Add bullet points\\n  >Indent `code samples`\\n\\n  You can create a [link to another webpage](https://aws.amazon.com).\\nparameters:\\n  stackname:\\n    type: String\\nmainSteps:\\n  - name: DeleteCloudFormationStack\\n    action: aws:deleteStack\\n    isEnd: true\\n    inputs:\\n      StackName: '{{ stackname }}'\\n# yaml file end\\n      \\n6.) Click on create runbook\\n\\nThis Subworkflow uses and needs the subworkflow \\\"subworkflow - aws wait for systems manager  document execution\\\"\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{{ result(\\\"wait-for-ssm-execution-completed\\\") }}\", \"input\": { \"awsregion\": \"us-east-1\", \"cf_stackname\": \"serverless-demo\", \"dynatraceawsconnection\": \"awsplayground\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n    });\n    subworkflow = data22xx.id;\n    console.log(subworkflow);\n    let workflow22xx = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data22xx.id;\n    endresult[\"subworkflow - dynatrace limit parallel runs of workflow\"] = workflow22xx;\n  } catch (error: unknown) {\n    console.log(error)\n  }\n\n   try {\n    const data24xx = await workflowsClient.createWorkflow({\n      body: { \"id\": \"0c3f9027-6cfe-420e-abc8-b36d88577135\", \"title\": \"Restart Test Instances\", \"tasks\": { \"delete-stack\": { \"name\": \"delete-stack\", \"input\": { \"workflowId\": \"d383240e-af68-4833-bd4b-d02615b1030d\", \"workflowInput\": \"{\\n  \\\"awsregion\\\": \\\"{{ input()[\\\"awsregion\\\"]}}\\\",\\n  \\\"cf_stackname\\\": \\\"dynatrace-chaos-testing-instance-and-ssm-document\\\",\\n  \\\"dynatraceawsconnection\\\": \\\"{{ input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [] }, \"s3_delete_bucket_1\": { \"name\": \"s3_delete_bucket_1\", \"input\": { \"Bucket\": \"dynatraceinstall{{execution().id | replace(\\\"-\\\",\\\"\\\")}}\", \"region\": \"{{ input()[\\\"awsregion\\\"]}}\", \"schema\": \"builtin:hyperscaler-authentication.aws.connection\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\" }, \"action\": \"dynatrace.aws.connector:s3-delete-bucket\", \"position\": { \"x\": 0, \"y\": 6 }, \"conditions\": { \"states\": { \"remove_objects_from_s3\": \"OK\" } }, \"description\": \"Deletes the S3 bucket.\", \"predecessors\": [ \"remove_objects_from_s3\" ] }, \"wait-till-agent-up\": { \"name\": \"wait-till-agent-up\", \"input\": { \"query\": \"timeseries { max(dt.host.disk.used.percent), from:now()-5m,  value.A = avg(dt.host.disk.used.percent, scalar: true) }, by: { host.name, dt.source_entity, dt.entity.host, dt.entity.ec2_instance }, filter: { matchesValue(entityAttr(dt.entity.host, \\\"entity.name\\\"), \\\"Dynatrace-SSM-Action-Demo_{{input()[\\\"awsaccountid\\\"] }}*\\\") }\\n| fieldsAdd dt.entity.host.name = entityName(dt.entity.host)\\n| fieldsAdd dt.entity.ec2_instance.name = entityName(dt.entity.ec2_instance)\", \"failOnEmptyResult\": true }, \"retry\": { \"count\": 99, \"delay\": 60, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:execute-dql-query\", \"position\": { \"x\": 0, \"y\": 7 }, \"conditions\": { \"states\": { \"s3_delete_bucket_1\": \"OK\" } }, \"description\": \"Make use of Dynatrace Grail data in your workflow.\", \"predecessors\": [ \"s3_delete_bucket_1\" ] }, \"reboot-test-instances\": { \"name\": \"reboot-test-instances\", \"input\": { \"workflowId\": \"1accf50e-0ef6-4ab8-853b-d408983ae1da\", \"workflowInput\": \"{\\n  \\\"awsregion\\\": \\\"{{input()[\\\"awsregion\\\"] }}\\\",\\n  \\\"awsaccountid\\\": \\\"{{input()[\\\"awsaccountid\\\"] }}\\\",\\n  \\\"dynatraceawsconnection\\\": \\\"{{ input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"position\": { \"x\": 0, \"y\": 8 }, \"conditions\": { \"custom\": \"\", \"states\": { \"wait-till-agent-up\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"waitBefore\": 30, \"predecessors\": [ \"wait-till-agent-up\" ] }, \"remove_objects_from_s3\": { \"name\": \"remove_objects_from_s3\", \"input\": { \"Key\": \"{{ _.item }}\", \"Bucket\": \"dynatraceinstall{{execution().id | replace(\\\"-\\\",\\\"\\\")}}\", \"region\": \"{{ input()[\\\"awsregion\\\"]}}\", \"schema\": \"builtin:hyperscaler-authentication.aws.connection\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"]  %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\" }, \"action\": \"dynatrace.aws.connector:s3-delete-object\", \"position\": { \"x\": 0, \"y\": 5 }, \"conditions\": { \"states\": { \"create-cf-stack-chaos-testing-instances\": \"OK\" } }, \"withItems\": \"item in [\\\"cloudformation_create_role_for_ssm_execution_ec2.yaml\\\", \\\"create_remediation_demo_instances.yaml\\\", \\\"create_remediation_demo_instances.yaml\\\"]\", \"concurrency\": 1, \"description\": \"Removes an object from a bucket.\", \"predecessors\": [ \"create-cf-stack-chaos-testing-instances\" ] }, \"s3-create-bucket-to-store-yaml\": { \"name\": \"s3-create-bucket-to-store-yaml\", \"input\": { \"Bucket\": \"dynatraceinstall{{execution().id | replace(\\\"-\\\",\\\"\\\")}}\", \"region\": \"{{ input()[\\\"awsregion\\\"]}}\", \"schema\": \"builtin:hyperscaler-authentication.aws.connection\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\" }, \"retry\": { \"count\": 5, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.aws.connector:s3-create-bucket\", \"active\": true, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"else\": \"SKIP\", \"states\": { \"delete-stack\": \"OK\" } }, \"description\": \"This action creates an Amazon S3 bucket.\", \"predecessors\": [ \"delete-stack\" ] }, \"create-cf-stack-chaos-testing-instances\": { \"name\": \"create-cf-stack-chaos-testing-instances\", \"input\": { \"workflowId\": \"e85d9c9e-30a9-44db-a429-0b781bad389a\", \"workflowInput\": \"{\\n  \\\"awsregion\\\": \\\"{{ input()[\\\"awsregion\\\"]}}\\\",\\n  \\\"cfyamls3url\\\": \\\"https://dynatraceinstall{{execution().id | replace(\\\"-\\\",\\\"\\\")}}.s3.{{ input()[\\\"awsregion\\\"]}}.amazonaws.com/create_remediation_demo_instances.yaml\\\",\\n  \\\"cf_stackname\\\": \\\"dynatrace-chaos-testing-instance-and-ssm-document\\\",\\n  \\\"dynatraceawsconnection\\\": \\\"{{ input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"retry\": { \"count\": 5, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": 0, \"y\": 4 }, \"conditions\": { \"else\": \"SKIP\", \"custom\": \"\", \"states\": { \"upload-chaos-testing-instances-yaml-to-s3-bucket\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"waitBefore\": 10, \"predecessors\": [ \"upload-chaos-testing-instances-yaml-to-s3-bucket\" ] }, \"upload-chaos-testing-instances-yaml-to-s3-bucket\": { \"name\": \"upload-chaos-testing-instances-yaml-to-s3-bucket\", \"input\": { \"Key\": \"create_remediation_demo_instances.yaml\", \"Body\": \"AWSTemplateFormatVersion: '2010-09-09'\\nDescription: Create Chaos Testing Instance for Dynatrace\\nParameters:\\n\\n  DTtenant:\\n    Default: {% if \\\"sprint\\\" in environment().url %}{{ environment().url | replace(\\\"apps.\\\", \\\"\\\") }}{% else %}{{ environment().url | replace(\\\"apps.\\\", \\\"live\\\") }}{% endif %}\\n    \\n    Description: Dynatrace Tenant id without url\\n    Type: String\\n  DTtoken:\\n    Default: {{ input()[\\\"DTaccesstoken\\\"] }}\\n    Description: Dynatrace Access Token\\n    Type: String\\n\\n\\n\\nResources:\\n\\n  InstanceSecurityGroup:\\n    Type: AWS::EC2::SecurityGroup\\n    Properties:\\n      Tags:\\n        - Key: environment\\n          Value: !Sub \\\"Dynatrace-SSM-Action-Demo_${AWS::AccountId}\\\"\\n      GroupDescription: Default security group\\n      \\n  EC2Instance:\\n    Type: AWS::EC2::Instance\\n    Properties:\\n      Tags:\\n        - Key: Name\\n          Value: !Sub \\\"Dynatrace-SSM-Action-Demo_${AWS::AccountId}\\\"\\n        - Key: problem\\n          Value: !Sub \\\"cpu_${AWS::AccountId}\\\"\\n      InstanceType: t3.medium\\n      IamInstanceProfile: {{ input()[\\\"AmazonSSMManagedInstanceCore_instance_profile_ec2\\\"] }}\\n      SecurityGroups:\\n        - !Ref InstanceSecurityGroup\\n      ImageId: ami-04b4f1a9cf54c11d0\\n      BlockDeviceMappings:\\n        - DeviceName: /dev/sda1\\n          Ebs:\\n            VolumeSize: 30\\n            Encrypted: true\\n      UserData:\\n        Fn::Base64: !Sub |\\n            #!/bin/bash \\n            sudo apt update -y \\n            sudo apt upgrade -y \\n            sudo systemctl start snap.amazon-ssm-agent.amazon-ssm-agent.service\\n            wget  -O Dynatrace-OneAgent-Linux-1.307.61.20250226-155505.sh \\\"${ DTtenant }/api/v1/deployment/installer/agent/unix/default/latest?arch=x86\\\" --header=\\\"Authorization: Api-Token ${ DTtoken }\\\"\\n            wget https://ca.dynatrace.com/dt-root.cert.pem ; ( echo 'Content-Type: multipart/signed; protocol=\\\"application/x-pkcs7-signature\\\"; micalg=\\\"sha-256\\\"; boundary=\\\"--SIGNED-INSTALLER\\\"'; echo ; echo ; echo '----SIGNED-INSTALLER' ; cat Dynatrace-OneAgent-Linux-1.307.61.20250226-155505.sh ) | openssl cms -verify -CAfile dt-root.cert.pem > /dev/null\\n            /bin/sh Dynatrace-OneAgent-Linux-1.307.61.20250226-155505.sh --set-monitoring-mode=fullstack --set-app-log-content-access=true --set-host-name=Dynatrace-SSM-Action-Demo_${AWS::AccountId}\\n\\n\\n\\n\\n\\n  EC2Instance2:\\n    Type: AWS::EC2::Instance\\n    Properties:\\n      Tags:\\n        - Key: Name\\n          Value: !Sub \\\"Dynatrace-SSM-Action-Demo_${AWS::AccountId}\\\"\\n        - Key: problem\\n          Value: !Sub \\\"disk_${AWS::AccountId}\\\"\\n      InstanceType: t3.medium\\n      IamInstanceProfile: {{ input()[\\\"AmazonSSMManagedInstanceCore_instance_profile_ec2\\\"] }}\\n      SecurityGroups:\\n        - !Ref InstanceSecurityGroup\\n      ImageId: ami-04b4f1a9cf54c11d0\\n      BlockDeviceMappings:\\n        - DeviceName: /dev/sda1\\n          Ebs:\\n            VolumeSize: 30\\n            Encrypted: true\\n      UserData:\\n        Fn::Base64: !Sub |\\n            #!/bin/bash \\n            sudo apt update -y \\n            sudo apt upgrade -y \\n            sudo systemctl start snap.amazon-ssm-agent.amazon-ssm-agent.service\\n            wget  -O Dynatrace-OneAgent-Linux-1.307.61.20250226-155505.sh \\\"${ DTtenant }/api/v1/deployment/installer/agent/unix/default/latest?arch=x86\\\" --header=\\\"Authorization: Api-Token ${ DTtoken }\\\"\\n            wget https://ca.dynatrace.com/dt-root.cert.pem ; ( echo 'Content-Type: multipart/signed; protocol=\\\"application/x-pkcs7-signature\\\"; micalg=\\\"sha-256\\\"; boundary=\\\"--SIGNED-INSTALLER\\\"'; echo ; echo ; echo '----SIGNED-INSTALLER' ; cat Dynatrace-OneAgent-Linux-1.307.61.20250226-155505.sh ) | openssl cms -verify -CAfile dt-root.cert.pem > /dev/null\\n            /bin/sh Dynatrace-OneAgent-Linux-1.307.61.20250226-155505.sh --set-monitoring-mode=fullstack --set-app-log-content-access=true --set-host-name=Dynatrace-SSM-Action-Demo_${AWS::AccountId}\\n  \\n\", \"Bucket\": \"dynatraceinstall{{execution().id | replace(\\\"-\\\",\\\"\\\")}}\", \"region\": \"{{ input()[\\\"awsregion\\\"]}}\", \"schema\": \"builtin:hyperscaler-authentication.aws.connection\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"ContentType\": \"Content-Type: text/html; charset=ISO-8859-4\" }, \"retry\": { \"count\": 5, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.aws.connector:s3-put-object\", \"active\": true, \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"else\": \"SKIP\", \"custom\": \"\", \"states\": { \"s3-create-bucket-to-store-yaml\": \"OK\" } }, \"description\": \"Adds an object to a bucket.\", \"waitBefore\": 20, \"predecessors\": [ \"s3-create-bucket-to-store-yaml\" ] } }, \"description\": \"\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": true, \"trigger\": { \"schedule\": { \"isActive\": false, \"isFaulty\": false, \"trigger\": { \"time\": \"17:00\", \"type\": \"time\" }, \"rule\": null, \"filterParameters\": { \"earliestStart\": \"2025-10-01\" }, \"timezone\": \"America/Los_Angeles\", \"inputs\": {} } }, \"schemaVersion\": 3, \"result\": \"\", \"input\": { \"awsregion\": \"\"+input[ \"awsregion\" ]+\"\", \"awsaccountid\": \"\"+input[ \"awsaccountid\" ]+\"\", \"DTaccesstoken\": \"\"+input[ \"DTaccesstoken\" ]+\"\", \"dynatraceawsconnection\": \"\"+input[ \"create-dynatrace-oidc-connection-settings\" ][ \"dynatraceawsconnection\" ]+\"\", \"AmazonSSMManagedInstanceCore_instance_profile_ec2\": \"\"+input[ \"AmazonSSMManagedInstanceCore_instance_profile_ec2\" ]+\"\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n    });\n    subworkflow = data24xx.id;\n    console.log(subworkflow);\n    let workflow24xx = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data24xx.id;\n    endresult[\"subworkflow - dynatrace limit parallel runs of workflow\"] = workflow24xx;\n  } catch (error: unknown) {\n    console.log(error)\n  }\n  \n\n  \nn  return endresult;\n}"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:run-javascript",
      "active": true,
      "position": {
        "x": 0,
        "y": 3
      },
      "conditions": {
        "else": "SKIP",
        "states": {
          "create-dynatrace-oidc-connection-settings": "OK"
        }
      },
      "description": "Run custom JavaScript code.",
      "waitBefore": 30,
      "predecessors": [
        "create-dynatrace-oidc-connection-settings"
      ]
    },
    "get-dt-oauth-token-2": {
      "name": "get-dt-oauth-token-2",
      "input": {
        "script": "import { execution } from '@dynatrace-sdk/automation-utils';\nimport { executionsClient, actionExecutionsClient  } from '@dynatrace-sdk/client-automation';\nimport { queryExecutionClient } from '@dynatrace-sdk/client-query';\nimport { credentialVaultClient } from '@dynatrace-sdk/client-classic-environment-v2';\nimport { workflowsClient } from \"@dynatrace-sdk/client-automation\";\nimport { getEnvironmentUrl } from '@dynatrace-sdk/app-environment';\n\n\nexport default async function ({ execution_id, action_execution_id }) {\n\n  const { input } = await fetch(`/platform/automation/v1/executions/${execution_id}`).then((res) => res.json());\n\n  const grant_type = encodeURIComponent(\"client_credentials\");\n  const scope = encodeURIComponent(\"iam-policies-management iam:policies:write iam:policies:read iam:bindings:write iam:bindings:read iam:effective-permissions:read iam:service-users:use iam:limits:read iam:boundaries:read iam:boundaries:write account-idm-read iam:users:read iam:groups:read account-idm-write account-env-read account-env-write account-uac-read account-uac-write\");\n  //const scope = encodeURIComponent(\"automation:workflows:read automation:workflows:write\");\n  const client_id = encodeURIComponent(input[\"dt_oauth_client_id\"]);\n  const client_secret = encodeURIComponent(input[\"dt_oauth_client_secret\"]);\n  const options = {\n    method: \"POST\",\n    headers: {\n      'content-type': \"application/x-www-form-urlencoded\",\n    },\n      body: \"grant_type=\" + grant_type + \"&scope=\" + scope + \"&client_id=\" + client_id + \"&client_secret=\" + client_secret\n  };\n\n  let ssourl = \"\"\n  var url = getEnvironmentUrl()\n  if( url.indexOf('sprint') >= 0){\n   ssourl = \"https://sso-sprint.dynatracelabs.com/sso/oauth2/token\"\n  } else {\n   ssourl=\"https://sso.dynatrace.com/sso/oauth2/token\"\n  }\n\n  \n  const resp = await fetch(ssourl,options);\n  console.log(resp.status);\n\n\n  const resp_json = await resp.json();\n  const bearer_token = await resp_json['access_token'];\n  return { \"token\": bearer_token };\n}"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:run-javascript",
      "active": true,
      "position": {
        "x": -1,
        "y": 2
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{input()[\"create_workflow_groups_and_policies\"] == true}}",
        "states": {
          "add-policies-to-group-wf-admin": "OK"
        }
      },
      "description": "Run custom JavaScript code.",
      "predecessors": [
        "add-policies-to-group-wf-admin"
      ]
    },
    "reboot-test-instances": {
      "name": "reboot-test-instances",
      "input": {
        "workflowId": "1accf50e-0ef6-4ab8-853b-d408983ae1da",
        "workflowInput": "{\n  \"awsregion\": \"{{input()[\"awsregion\"] }}\",\n  \"awsaccountid\": \"{{input()[\"awsaccountid\"] }}\",\n  \"dynatraceawsconnection\": \"{{input()[\"create-dynatrace-oidc-connection-settings\"][\"dynatraceawsconnection\"]}}\"\n}"
      },
      "action": "dynatrace.automations:run-workflow",
      "position": {
        "x": 4,
        "y": 3
      },
      "conditions": {
        "custom": "{{ input()[\"AWS-Ec2-remediate-high-cpu-or-memory-consumption-by-processes\"][\"chaos_wf_aws_instances\"] == true or input()[\"AWS-EBS-remediate-low-storage\"][\"chaos_wf_aws_instances\"] == true }}",
        "states": {
          "wait-till-agent-up": "OK"
        }
      },
      "description": "Modularize your workflows, run any existing workflow.",
      "waitBefore": 30,
      "predecessors": [
        "wait-till-agent-up"
      ]
    },
    "create-chaos-workflows": {
      "name": "create-chaos-workflows",
      "input": {
        "script": "// optional import of sdk modules\nimport { execution } from '@dynatrace-sdk/automation-utils';\nimport { workflowsClient } from \"@dynatrace-sdk/client-automation\";\nimport { getEnvironmentUrl } from '@dynatrace-sdk/app-environment';\nimport { documentsClient } from \"@dynatrace-sdk/client-document\";\nimport { getEnvironmentId } from '@dynatrace-sdk/app-environment';\nimport { settingsObjectsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\n\nexport default async function ({ executionId , action_execution_id }) {\n  // your code goes here\n  // e.g. get the current execution\n  const configGet = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/create-service-user/result`);\n  const configBody = await configGet.json();\n\n  const environmentId = getEnvironmentId();\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\n  const actor = configBody.json.uid  \n\n  const configGetx = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/get-users-id/result`);\n  const configBodyx = await configGetx.json();\n  let owner = \"\"\n  for (let items of configBodyx[\"json\"][\"items\"]) {\n    if(items.email == input[\"owner_email\"])\n     owner = items.uid\n  }\n\n  \n\n  let data1 = \"\"\n  let data3 = \"\"\n  let data4 = \"\"\n  let data5 = \"\"\n  let data6 = \"\"\n  let workflow1 = \"\"\n  let workflow3 = \"\"\n  let workflow4 = \"\"\n  let workflow5 = \"\"  \n  let workflow6 = \"\"  \n  let subworkflow = \"\"\n  \n  // import workflows\n  try {\n      data1 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"b1d6e178-1157-413a-8e2c-a79484e242f9\", \"title\": \"Create Cpu Stress on Ec2 Instance with Stress-ng\", \"tasks\": { \"run-stress-ng\": { \"name\": \"run-stress-ng\", \"input\": { \"workflowId\": \"57fa7bc0-b0ee-406d-b231-b16fe35e4c79\", \"workflowInput\": \"{\\n  \\\"commands\\\": [\\n    \\\"sudo apt-get update -y\\\",\\n    \\\"sudo apt install stress-ng -y\\\",\\n    \\\"sudo stress-ng --cpu 2 -t 1000s\\\"\\n  ],\\n  \\\"awsregion\\\": \\\"{{ input()[\\\"awsregion\\\"] }}\\\",\\n  \\\"instanceid\\\": \\\"{{ _.item.ResourceId }}\\\",\\n  \\\"executionTimeout\\\": \\\"3600\\\",\\n  \\\"workingDirectory\\\": \\\"/home/ubuntu\\\",\\n  \\\"dynatraceawsconnection\\\": \\\"{{input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"get-instances-by-tag\": \"OK\" } }, \"withItems\": \"item in {{ result(\\\"get-instances-by-tag\\\").Tags }}\", \"concurrency\": 1, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"get-instances-by-tag\" ] }, \"get-instances-by-tag\": { \"name\": \"get-instances-by-tag\", \"input\": { \"region\": \"{{ input()[\\\"awsregion\\\"] }}\", \"Filters\": [ { \"key\": \"resource-type\", \"value\": \"instance\" }, { \"key\": \"value\", \"value\": \"{{ input()[\\\"problemtag\\\"] }}\" }, { \"key\": \"key\", \"value\": \"problem\" } ], \"MaxResults\": 100, \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\" }, \"action\": \"dynatrace.aws.connector:ec2-describe-tags\", \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Describes the specified tags for your EC2 resources\", \"predecessors\": [] } }, \"description\": \"\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": true, \"trigger\": { \"schedule\": { \"isActive\":  input[ \"AWS-Ec2-remediate-high-cpu-or-memory-consumption-by-processes\" ][ \"chaos_wf_triggers_active\" ], \"isFaulty\": false, \"trigger\": { \"type\": \"interval\", \"intervalMinutes\": 90 }, \"rule\": null, \"filterParameters\": { \"earliestStart\": \"2025-08-31\", \"earliestStartTime\": \"09:15\" }, \"timezone\": \"America/Los_Angeles\", \"inputs\": {} } }, \"schemaVersion\": 3, \"result\": null, \"input\": { \"awsregion\": \"us-east-1\", \"problemtag\": \"cpu_\"+input[ \"awsaccountid\" ]+\"\", \"dynatraceawsconnection\": \"\"+input[ \"create-dynatrace-oidc-connection-settings\" ].dynatraceawsconnection+\"\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data1.id;\n      console.log(subworkflow);\n      workflow1 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data1.id;\n  } catch (error: unknown) {\n  }\n\n  try {\n      data3 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"97ab7c99-346e-49ae-a065-fefc11aa608b\", \"title\": \"Create big logfile and fill disk\", \"tasks\": { \"get-instances-by-tag\": { \"name\": \"get-instances-by-tag\", \"input\": { \"region\": \"{{ input()[\\\"awsregion\\\"] }}\", \"Filters\": [ { \"key\": \"resource-type\", \"value\": \"instance\" }, { \"key\": \"key\", \"value\": \"problem\" }, { \"key\": \"value\", \"value\": \"disk_\"+input.awsaccountid+\"\" } ], \"MaxResults\": 100, \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\" }, \"retry\": { \"count\": 5, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.aws.connector:ec2-describe-tags\", \"active\": true, \"timeout\": 9000, \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Describes the specified tags for your EC2 resources\", \"predecessors\": [] }, \"systems_manager_send_command_1\": { \"name\": \"systems_manager_send_command_1\", \"input\": { \"region\": \"{{ input()[\\\"awsregion\\\"] }}\", \"Parameters\": \"{\\n  \\\"commands\\\": [\\\"fallocate -l 21G /home/ubuntu/large_file.log\\\"]\\n}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"InstanceIds\": \"{{ _.item.ResourceId }}\", \"DocumentName\": \"AWS-RunShellScript\" }, \"action\": \"dynatrace.aws.connector:ssm-send-command\", \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"get-instances-by-tag\": \"OK\" } }, \"withItems\": \"item in {{ result(\\\"get-instances-by-tag\\\").Tags }}\", \"concurrency\": 1, \"description\": \"Runs commands on one or more managed nodes.\", \"predecessors\": [ \"get-instances-by-tag\" ] } }, \"description\": \"\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": { \"schedule\": { \"isActive\": input[ \"AWS-EBS-remediate-low-storage\" ][ \"chaos_wf_triggers_active\" ], \"isFaulty\": false, \"trigger\": { \"type\": \"interval\", \"intervalMinutes\": 120 }, \"rule\": null, \"filterParameters\": { \"earliestStart\": \"2025-09-01\", \"earliestStartTime\": \"09:15\" }, \"timezone\": \"UTC\", \"inputs\": {} } }, \"schemaVersion\": 3, \"result\": null, \"input\": { \"awsregion\": \"us-east-1\", \"dynatraceawsconnection\": \"\"+input[ \"create-dynatrace-oidc-connection-settings\" ].dynatraceawsconnection+\"\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data3.id;\n      console.log(subworkflow);\n      workflow3 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data3.id;\n  } catch (error: unknown) {\n  }\n\n  try {\n      data4 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"3508fe23-37e3-4b8b-8d9f-62bba3b51009\", \"title\": \"Create Low Storage Chaos\", \"tasks\": { \"get-instances-by-tag\": { \"name\": \"get-instances-by-tag\", \"input\": { \"region\": \"{{ input()[\\\"awsregion\\\"] }}\", \"Filters\": [ { \"key\": \"resource-type\", \"value\": \"instance\" }, { \"key\": \"key\", \"value\": \"problem\" }, { \"key\": \"value\", \"value\": \"disk_\"+input.awsaccountid+\"\" } ], \"MaxResults\": 100, \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\" }, \"retry\": { \"count\": 5, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.aws.connector:ec2-describe-tags\", \"active\": true, \"timeout\": 9000, \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Describes the specified tags for your EC2 resources\", \"predecessors\": [] }, \"systems_manager_send_command_1\": { \"name\": \"systems_manager_send_command_1\", \"input\": { \"region\": \"{{ input()[\\\"awsregion\\\"] }}\", \"Parameters\": \"{\\n  \\\"commands\\\": [\\\"fallocate -l 21G /home/ubuntu/{{execution().id }}_file.log\\\"]\\n}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"InstanceIds\": \"{{ _.item.ResourceId }}\", \"DocumentName\": \"AWS-RunShellScript\" }, \"action\": \"dynatrace.aws.connector:ssm-send-command\", \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"get-instances-by-tag\": \"OK\" } }, \"withItems\": \"item in {{ result(\\\"get-instances-by-tag\\\").Tags }}\", \"concurrency\": 1, \"description\": \"Runs commands on one or more managed nodes.\", \"predecessors\": [ \"get-instances-by-tag\" ] } }, \"description\": \"\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": true, \"trigger\": { \"schedule\": { \"isActive\": input[ \"AWS-EBS-remediate-low-storage\" ][ \"chaos_wf_triggers_active\" ], \"isFaulty\": false, \"trigger\": { \"time\": \"08:00\", \"type\": \"time\" }, \"rule\": null, \"filterParameters\": { \"earliestStart\": \"2025-09-03\" }, \"timezone\": \"UTC\", \"inputs\": {} } }, \"schemaVersion\": 3, \"result\": null, \"input\": { \"awsregion\": \"us-east-1\", \"dynatraceawsconnection\": \"\"+input[ \"create-dynatrace-oidc-connection-settings\" ].dynatraceawsconnection+\"\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      \n      });\n      subworkflow = data4.id;\n      console.log(subworkflow);\n      workflow4 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data4.id;\n  } catch (error: unknown) {\n  }\n\n  try {\n      data5 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"3767c70e-5ea5-4642-82cc-3eba516eda54\", \"title\": \"AWS S3 Create Public S3 Bucket Chaos/Test\", \"tasks\": { \"s3_create_bucket_1\": { \"name\": \"s3_create_bucket_1\", \"input\": { \"Bucket\": \"securitydemotestbucket{{execution().id | replace(\\\"-\\\",\\\"\\\")}}{{ _.item }}\", \"region\": \"{{ input()[\\\"awsregion\\\"] }}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\" }, \"action\": \"dynatrace.aws.connector:s3-create-bucket\", \"active\": true, \"position\": { \"x\": 0, \"y\": 1 }, \"withItems\": \"item in [1, 2, 3]\", \"concurrency\": 1, \"description\": \"This action creates an Amazon S3 bucket.\", \"predecessors\": [] }, \"s3_delete_bucket_1\": { \"name\": \"s3_delete_bucket_1\", \"input\": { \"Bucket\": \"securitydemotestbucket{{execution().id | replace(\\\"-\\\",\\\"\\\")}}{{ _.item }}\", \"region\": \"{{input()[\\\"awsregion\\\"]}}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\" }, \"action\": \"dynatrace.aws.connector:s3-delete-bucket\", \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"states\": { \"s3_put_give_public_access\": \"OK\" } }, \"withItems\": \"item in [1, 2, 3]\", \"concurrency\": 1, \"description\": \"Deletes the S3 bucket.\", \"waitBefore\": 5400, \"predecessors\": [ \"s3_put_give_public_access\" ] }, \"s3_put_give_public_access\": { \"name\": \"s3_put_give_public_access\", \"input\": { \"Bucket\": \"securitydemotestbucket{{execution().id | replace(\\\"-\\\",\\\"\\\")}}{{ _.item }}\", \"region\": \"{{ input()[\\\"awsregion\\\"] }}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"PublicAccessBlockConfiguration\": \"{ \\n  \\\"RestrictPublicBuckets\\\": [\\\"{{ input()[\\\"RestrictPublicBuckets\\\"] | lower }}\\\"],\\n  \\\"BlockPublicAcls\\\": [\\\"{{ input()[\\\"BlockPublicAcls\\\"] | lower }}\\\"],\\n  \\\"IgnorePublicAcls\\\": [\\\"{{ input()[\\\"IgnorePublicAcls\\\"] | lower }}\\\"],\\n  \\\"BlockPublicPolicy\\\": [\\\"{{ input()[\\\"BlockPublicPolicy\\\"] | lower }}\\\"]\\n}\" }, \"action\": \"dynatrace.aws.connector:s3-put-public-access-block\", \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"s3_create_bucket_1\": \"OK\" } }, \"withItems\": \"item in [1, 2, 3]\", \"concurrency\": 1, \"description\": \"This operation is not supported for directory buckets.\", \"predecessors\": [ \"s3_create_bucket_1\" ] } }, \"description\": \"\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": true, \"trigger\": { \"schedule\": { \"isActive\": input[ \"create-s3bucket-remediation-workflows\" ][ \"chaos_wf_triggers_active\" ], \"isFaulty\": false, \"trigger\": { \"type\": \"interval\", \"intervalMinutes\": 120 }, \"rule\": null, \"filterParameters\": { \"earliestStart\": \"2025-08-24\", \"earliestStartTime\": \"16:18\" }, \"timezone\": \"America/Los_Angeles\", \"inputs\": {} } }, \"schemaVersion\": 3, \"result\": null, \"input\": { \"awsregion\": \"us-east-1\", \"BlockPublicAcls\": \"true\", \"IgnorePublicAcls\": \"true\", \"BlockPublicPolicy\": \"true\", \"RestrictPublicBuckets\": \"false\", \"dynatraceawsconnection\": \"\"+input[ \"create-dynatrace-oidc-connection-settings\" ].dynatraceawsconnection+\"\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data5.id;\n      console.log(subworkflow);\n      workflow5 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data5.id;\n  } catch (error: unknown) {\n  }\n\n  try {\n      data6 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"5231f6ad-4393-4f02-9853-f4714b08f658\", \"title\": \"AWS Create Public Security group Chaos/Test\", \"tasks\": { \"create-cf-yaml\": { \"name\": \"create-cf-yaml\", \"input\": { \"Key\": \"create_groups.yaml\", \"Body\": \"# Copyright 2022 Amazon.com and its affiliates; all rights reserved. \\n# This file is Amazon Web Services Content and may not be duplicated or distributed without permission.\\nAWSTemplateFormatVersion: '2010-09-09'\\nDescription: Dynatrace Serverless Failover Demo\\n\\nResources:\\n  InstanceSecurityGroup:\\n    Type: AWS::EC2::SecurityGroup\\n    Properties:\\n      GroupName: !Ref AWS::StackName\\n      GroupDescription: !Ref AWS::StackName\\n      SecurityGroupIngress:\\n        - IpProtocol: tcp\\n          CidrIp: 0.0.0.0/0\\n          FromPort: 22\\n          ToPort: 22\\n\", \"Bucket\": \"dynatraceinstall{{execution().id | replace(\\\"-\\\",\\\"\\\")}}\", \"region\": \"{{ input()[\\\"awsregion\\\"]}}\", \"schema\": \"builtin:hyperscaler-authentication.aws.connection\", \"connection\": \"{% set awsconnection = input().dynatraceawsconnection %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"ContentType\": \"Content-Type: text/html; charset=ISO-8859-4\" }, \"action\": \"dynatrace.aws.connector:s3-put-object\", \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"s3_create_bucket\": \"OK\" } }, \"description\": \"Adds an object to a bucket.\", \"predecessors\": [ \"s3_create_bucket\" ] }, \"s3-delete-yaml\": { \"name\": \"s3-delete-yaml\", \"input\": { \"Key\": \"create_groups.yaml\", \"Bucket\": \"dynatraceinstall{{execution().id | replace(\\\"-\\\",\\\"\\\")}}\", \"region\": \"{{ input()[\\\"awsregion\\\"]}}\", \"schema\": \"builtin:hyperscaler-authentication.aws.connection\", \"connection\": \"{% set awsconnection = input().dynatraceawsconnection %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\" }, \"action\": \"dynatrace.aws.connector:s3-delete-object\", \"position\": { \"x\": 0, \"y\": 5 }, \"conditions\": { \"states\": { \"delete-security-groups\": \"OK\" } }, \"description\": \"Removes an object from a bucket.\", \"predecessors\": [ \"delete-security-groups\" ] }, \"s3_create_bucket\": { \"name\": \"s3_create_bucket\", \"input\": { \"Bucket\": \"dynatraceinstall{{execution().id | replace(\\\"-\\\",\\\"\\\")}}\", \"region\": \"{{ input()[\\\"awsregion\\\"]}}\", \"schema\": \"builtin:hyperscaler-authentication.aws.connection\", \"connection\": \"{% set awsconnection = input().dynatraceawsconnection %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\" }, \"action\": \"dynatrace.aws.connector:s3-create-bucket\", \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"This action creates an Amazon S3 bucket.\", \"predecessors\": [] }, \"s3_delete_bucket_1\": { \"name\": \"s3_delete_bucket_1\", \"input\": { \"Bucket\": \"dynatraceinstall{{execution().id | replace(\\\"-\\\",\\\"\\\")}}\", \"region\": \"{{ input()[\\\"awsregion\\\"]}}\", \"schema\": \"builtin:hyperscaler-authentication.aws.connection\", \"connection\": \"{% set awsconnection = input().dynatraceawsconnection %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\" }, \"action\": \"dynatrace.aws.connector:s3-delete-bucket\", \"position\": { \"x\": 0, \"y\": 6 }, \"conditions\": { \"states\": { \"s3-delete-yaml\": \"OK\" } }, \"description\": \"Deletes the S3 bucket.\", \"predecessors\": [ \"s3-delete-yaml\" ] }, \"delete-security-groups\": { \"name\": \"delete-security-groups\", \"input\": { \"workflowId\": \"d383240e-af68-4833-bd4b-d02615b1030d\", \"workflowInput\": \"{\\n  \\\"awsregion\\\": \\\"{{ input()[\\\"awsregion\\\"]}}\\\",\\n  \\\"cf_stackname\\\": \\\"demopublicsecuritygroup-{{ _.item }}\\\",\\n  \\\"dynatraceawsconnection\\\": \\\"{{ input()[\\\"dynatraceawsconnection\\\"]}}\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"timeout\": 599999, \"position\": { \"x\": 0, \"y\": 4 }, \"conditions\": { \"states\": { \"create-public-security-groups\": \"OK\" } }, \"withItems\": \"item in [1, 2]\", \"concurrency\": 1, \"description\": \"Modularize your workflows, run any existing workflow.\", \"waitBefore\": 5400, \"predecessors\": [ \"create-public-security-groups\" ] }, \"create-public-security-groups\": { \"name\": \"create-public-security-groups\", \"input\": { \"workflowId\": \"e85d9c9e-30a9-44db-a429-0b781bad389a\", \"workflowInput\": \"{\\n  \\\"awsregion\\\": \\\"{{ input()[\\\"awsregion\\\"]}}\\\",\\n  \\\"cfyamls3url\\\": \\\"https://dynatraceinstall{{execution().id | replace(\\\"-\\\",\\\"\\\")}}.s3.{{ input()[\\\"awsregion\\\"]}}.amazonaws.com/create_groups.yaml\\\",\\n  \\\"cf_stackname\\\": \\\"demopublicsecuritygroup-{{ _.item }}\\\",\\n  \\\"dynatraceawsconnection\\\": \\\"{{ input()[\\\"dynatraceawsconnection\\\"]}}\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"states\": { \"create-cf-yaml\": \"OK\" } }, \"withItems\": \"item in [1, 2]\", \"concurrency\": 1, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"create-cf-yaml\" ] } }, \"description\": \"\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": { \"schedule\": { \"isActive\":  input[ \"create-aws-security-group-remediation-workflows\" ][ \"chaos_wf_triggers_active\" ], \"isFaulty\": false, \"trigger\": { \"type\": \"interval\", \"intervalMinutes\": 120 }, \"rule\": null, \"filterParameters\": { \"earliestStart\": \"2025-09-29\", \"earliestStartTime\": \"15:44\" }, \"timezone\": \"America/Los_Angeles\", \"inputs\": {} } }, \"schemaVersion\": 3, \"result\": null, \"input\": { \"awsregion\": \"us-east-1\", \"dynatraceawsconnection\": \"\"+input[ \"create-dynatrace-oidc-connection-settings\" ].dynatraceawsconnection+\"\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data6.id;\n      console.log(subworkflow);\n      workflow6 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data6.id;\n  } catch (error: unknown) {\n  }\n\nn  return {  \"Create Cpu Stress on Ec2 Instance with Stress-ng\": workflow1, \"Create big logfile and fill disk\": workflow3, \"Create Low Storage Chaos\": workflow4, \"AWS S3 Create Public S3 Bucket\": workflow5, \"AWS Create Public Security group Chaos/Test\": workflow6 };\n}"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:run-javascript",
      "active": true,
      "position": {
        "x": 2,
        "y": 3
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{ input()[\"AWS-Ec2-remediate-high-cpu-or-memory-consumption-by-processes\"][\"install_chaos_workflows\"] == true}}",
        "states": {
          "create-cf-stack-chaos-testing-instances": "OK"
        }
      },
      "description": "Run custom JavaScript code.",
      "waitBefore": 120,
      "predecessors": [
        "create-cf-stack-chaos-testing-instances"
      ]
    },
    "create-delete-workflow": {
      "name": "create-delete-workflow",
      "input": {
        "script": "import { execution } from '@dynatrace-sdk/automation-utils';\nimport { executionsClient, actionExecutionsClient  } from '@dynatrace-sdk/client-automation';\nimport { queryExecutionClient } from '@dynatrace-sdk/client-query';\nimport { credentialVaultClient } from '@dynatrace-sdk/client-classic-environment-v2';\nimport { workflowsClient } from \"@dynatrace-sdk/client-automation\";\nimport { getEnvironmentId } from '@dynatrace-sdk/app-environment';\nimport { getEnvironmentUrl } from '@dynatrace-sdk/app-environment';\n\nexport default async function ({ executionId, action_execution_id }) {\n\n  const configGetdelete = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/print-delete-array/result`);\n  const configBodydelete = await configGetdelete.json();\n\n  const configGetoidc = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/create-dynatrace-oidc-connection-settings/result`);\n  const configBodyoidc = await configGetoidc.json();\n\n  const configlowstorage = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/create-aws-ebs-remediate-low-storage-remediation-wf/result`);\n  const configbodylowstorage  = await configlowstorage.json();\n\n  const configcpu = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/create-aws-ec2-remediate-high-cpu-or-memory-consumption-by-processes-workflow/result`);\n  const configBodycpu = await configcpu.json();\n\n  \n  \n  const configGet = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/create-service-user/result`);\n  const configBody = await configGet.json();\n  //const actor = configBody.json.uid   \n  const environmentId = getEnvironmentId();\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\n  let actor = configBody.json.uid  \n  console.log(actor)\n  console.log(input[\"create-dynatrace-oidc-connection-settings\"].dynatraceawsconnection)\n  const configGetx = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/get-users-id/result`);\n  const configBodyx = await configGetx.json();\n  let owner = \"\"\n  for (let items of configBodyx[\"json\"][\"items\"]) {\n    if(items.email == input[\"owner_email\"])\n     owner = items.uid\n     actor = items.uid\n  }\n  \n  let data1 = \"\"\n  let workflow1 = \"\"\n  let data2 = \"\"\n  let workflow2 = \"\"\n  // import workflow\n  try {\n      data1 = await workflowsClient.createWorkflow({\n        body: { \"title\": \"Delete AWS Use Cases \"+executionId+\"\", \"tasks\": { \"delete-policies\": { \"name\": \"delete-policies\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies/{{_.item}}\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies/{{_.item}}\\n{% endif %}\", \"method\": \"DELETE\", \"headers\": { \"authorization\": \"Bearer {{ result(\\\"get-dt-oauth-token\\\").token }}\" }, \"failOnResponseCodes\": \"400-599\" }, \"retry\": { \"count\": 5, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": 0, \"y\": 5 }, \"conditions\": { \"states\": { \"delete-user-groups\": \"OK\" } }, \"withItems\": \"item in {{input()[\\\"policies_uuid_array\\\"]}}\", \"concurrency\": 1, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [ \"delete-user-groups\" ] }, \"delete-cf-stacks\": { \"name\": \"delete-cf-stacks\", \"input\": { \"workflowId\": \"d383240e-af68-4833-bd4b-d02615b1030d\", \"workflowInput\": \"{\\n  \\\"awsregion\\\": \\\"{{input()[\\\"awsregion\\\"] }}\\\",\\n  \\\"cf_stackname\\\": \\\"{{_.item }}\\\",\\n  \\\"dynatraceawsconnection\\\": \\\"{{input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": 0, \"y\": 1 }, \"conditions\": { \"states\": {} }, \"withItems\": \"item in [\\\"dynatrace-chaos-testing-instance-and-ssm-document\\\", \\\"dynatrace-active-gate-instance\\\", \\\"dynatrace-smm-role-and-policy\\\" ]\", \"concurrency\": 1, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [] }, \"delete-workflows\": { \"name\": \"delete-workflows\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\nimport { workflowsClient } from \\\"@dynatrace-sdk/client-automation\\\";\\nimport { getEnvironmentUrl } from '@dynatrace-sdk/app-environment';\\nimport { documentsClient } from \\\"@dynatrace-sdk/client-document\\\";\\nimport { getEnvironmentId } from '@dynatrace-sdk/app-environment';\\nimport { settingsObjectsClient } from \\\"@dynatrace-sdk/client-classic-environment-v2\\\";\\n\\n\\nexport default async function ({ executionId , action_execution_id }) {\\n  // your code goes here\\n\\n  //const actor = configBody.json.uid   \\n  //const environmentId = getEnvironmentId();\\n  //const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\\n\\n  // import workflow\\n\\n  const workflowids = [\\\"c9f7024c-00db-4067-bc09-a7de20626286\\\",\\\"9a868582-bf92-4d2c-aea5-90898f7e86b8\\\",\\\"c96bdcad-64b6-45a8-a4d1-ed247c4beac0\\\",\\\"c96bdcad-64b6-45a8-a4d1-ed247c4beac0\\\",\\\"0c3f9027-6cfe-420e-abc8-b36d88577135\\\",\\\"bfde0033-a2dd-4471-a866-7ce4832264e8\\\",\\\"1accf50e-0ef6-4ab8-853b-d408983ae1da\\\",\\\"3767c70e-5ea5-4642-82cc-3eba516eda54\\\",\\\"d383240e-af68-4833-bd4b-d02615b1030d\\\",\\\"7c5d0a2d-127e-4b6f-abee-842c98008eb9\\\",\\\"97ab7c99-346e-49ae-a065-fefc11aa608b\\\",\\\"45b907ff-076a-4aad-8733-7159b7fed89e\\\", \\\"74a063e4-576a-4955-b477-1c531bcf7ad1\\\", \\\"4486e1fc-6862-4a42-a6e8-39f080f57ff1\\\", \\\"20661ec0-29d5-471f-9973-29679d5fe908\\\", \\\"67df876f-6e4a-4942-b565-7f40c502daec\\\", \\\"3e5454a4-50ad-4dab-914c-638b6df5b283\\\", \\\"cba39ee3-78da-4bb9-9caa-f42a3990cf3d\\\", \\\"d31cdf5e-f1ca-4583-a850-67af54e3dde7\\\", \\\"57fa7bc0-b0ee-406d-b231-b16fe35e4c79\\\", \\\"f8fdc88c-9a8c-4f3b-8198-9a021996515e\\\", \\\"5231f6ad-4393-4f02-9853-f4714b08f658\\\", \\\"97218693-adf0-4c82-a295-e43d848b0b4d\\\",\\\"b9de7879-6723-43a0-92ca-5bae8294da4b\\\", \\\"e1ef703b-88ac-496a-a4a0-38805fe6e91c\\\", \\\"e85d9c9e-30a9-44db-a429-0b781bad389a\\\", \\\"67ddb318-e932-449a-840c-b90f8fb6a028\\\", \\\"770b3c17-d17e-4414-9137-58801b275f71\\\", \\\"0062aae7-ab57-47e3-80de-faade47d4d52\\\", \\\"b1d6e178-1157-413a-8e2c-a79484e242f9\\\",\\\"dd59f7b0-1154-4c06-b677-b3c64a17d475\\\",  \\\"a13c2f6f-9e3d-478a-8399-1d17fecf6779\\\", \\\"03659848-380f-425c-8cc6-7a58ced48f87\\\", \\\"5052e41e-caa3-4bc8-a818-5f7b3999dbdb\\\"]\\n\\n  for (let id  of workflowids) {\\n    console.log(id)\\n    try {   \\n        const data = await workflowsClient.deleteWorkflow({\\n          id: \\\"\\\"+id+\\\"\\\",\\n        });\\n    \\n        console.log(data)\\n    } catch (error: unknown) {\\n      console.log(error)\\n    }\\n    \\n  }\\n  \\n\\n\\n\\n\\n\\n\\n\\n\\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"active\": true, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"delete-cf-stacks\": \"OK\" } }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [ \"delete-cf-stacks\" ] }, \"delete-user-groups\": { \"name\": \"delete-user-groups\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/accounts/{{input()[\\\"dtaccountuid\\\"] }}/groups/{{_.item}}\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/accounts/{{input()[\\\"dtaccountuid\\\"] }}/groups/{{_.item}}\\n{% endif %}\", \"method\": \"DELETE\", \"headers\": { \"authorization\": \"Bearer {{ result(\\\"get-dt-oauth-token\\\").token }}\" }, \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": 0, \"y\": 4 }, \"conditions\": { \"states\": { \"get-dt-oauth-token\": \"OK\" } }, \"withItems\": \"item in {{input()[\\\"group_uuid_array\\\"]}}\", \"concurrency\": 1, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [ \"get-dt-oauth-token\" ] }, \"get-dt-oauth-token\": { \"name\": \"get-dt-oauth-token\", \"input\": { \"script\": \"import { execution } from '@dynatrace-sdk/automation-utils';\\nimport { executionsClient, actionExecutionsClient  } from '@dynatrace-sdk/client-automation';\\nimport { queryExecutionClient } from '@dynatrace-sdk/client-query';\\nimport { credentialVaultClient } from '@dynatrace-sdk/client-classic-environment-v2';\\nimport { workflowsClient } from \\\"@dynatrace-sdk/client-automation\\\";\\nimport { getEnvironmentUrl } from '@dynatrace-sdk/app-environment';\\n\\n\\nexport default async function ({ execution_id, action_execution_id }) {\\n\\n  const { input } = await fetch(`/platform/automation/v1/executions/${execution_id}`).then((res) => res.json());\\n\\n  const grant_type = encodeURIComponent(\\\"client_credentials\\\");\\n  const scope = encodeURIComponent(\\\"iam-policies-management iam:policies:write iam:policies:read iam:bindings:write iam:bindings:read iam:effective-permissions:read iam:service-users:use iam:limits:read iam:boundaries:read iam:boundaries:write account-idm-read iam:users:read iam:groups:read account-idm-write account-env-read account-env-write account-uac-read account-uac-write\\\");\\n  //const scope = encodeURIComponent(\\\"automation:workflows:read automation:workflows:write\\\");\\n  const client_id = encodeURIComponent(input[\\\"dt_oauth_client_id\\\"]);\\n  const client_secret = encodeURIComponent(input[\\\"dt_oauth_client_secret\\\"]);\\n  const options = {\\n    method: \\\"POST\\\",\\n    headers: {\\n      'content-type': \\\"application/x-www-form-urlencoded\\\",\\n    },\\n      body: \\\"grant_type=\\\" + grant_type + \\\"&scope=\\\" + scope + \\\"&client_id=\\\" + client_id + \\\"&client_secret=\\\" + client_secret\\n  };\\n\\n  let ssourl = \\\"\\\"\\n  var url = getEnvironmentUrl()\\n  if( url.indexOf('sprint') >= 0){\\n   ssourl = \\\"https://sso-sprint.dynatracelabs.com/sso/oauth2/token\\\"\\n  } else {\\n   ssourl=\\\"https://sso.dynatrace.com/sso/oauth2/token\\\"\\n  }\\n\\n  \\n  const resp = await fetch(ssourl,options);\\n  console.log(resp.status);\\n\\n\\n  const resp_json = await resp.json();\\n  const bearer_token = await resp_json['access_token'];\\n  return { \\\"token\\\": bearer_token };\\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"active\": true, \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"states\": { \"delete-workflows\": \"OK\" } }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [ \"delete-workflows\" ] }, \"delete-aws-connection\": { \"name\": \"delete-aws-connection\", \"input\": { \"script\": \"// optional import of sdk modules\\nimport { execution } from '@dynatrace-sdk/automation-utils';\\nimport { settingsObjectsClient } from \\\"@dynatrace-sdk/client-classic-environment-v2\\\";\\n\\nexport default async function ({ executionId }) {\\n\\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\\n\\n\\n  const data =\\n  await settingsObjectsClient.deleteSettingsObjectByObjectId(\\n    { objectId: \\\"\\\"+input.settingsobjectid+\\\"\\\" },\\n  );\\n\\n  const data3 =\\n  await settingsObjectsClient.deleteSettingsObjectByObjectId(\\n    { objectId: \\\"\\\"+input.cpuanomalie+\\\"\\\" },\\n  );\\n\\n  const data2 =\\n  await settingsObjectsClient.deleteSettingsObjectByObjectId(\\n    { objectId: \\\"\\\"+input.storageanomalie+\\\"\\\" },\\n  );\\n\\n\\n  return data ;\\n}\" }, \"action\": \"dynatrace.automations:run-javascript\", \"position\": { \"x\": 0, \"y\": 6 }, \"conditions\": { \"states\": { \"delete-policies\": \"OK\" } }, \"description\": \"Run custom JavaScript code.\", \"predecessors\": [ \"delete-policies\" ] } }, \"description\": \"\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": true, \"trigger\": {}, \"schemaVersion\": 3, \"result\": null, \"input\": { \"awsregion\": \"\"+input[ \"awsregion\" ]+\"\", \"cpuanomalie\": \"\"+configBodycpu.objectid+\"\", \"dtaccountuid\": \"\"+input[ \"dtaccountuid\" ]+\"\", \"storageanomalie\": \"\"+configbodylowstorage.objectid+\"\", \"group_uuid_array\": configBodydelete[ 0 ].groups, \"settingsobjectid\": \"\"+configBodyoidc[ 0 ].objectId+\"\", \"dt_oauth_client_id\": \"\"+input[ \"dt_oauth_client_id\" ]+\"\", \"policies_uuid_array\": configBodydelete[ 0 ].policies, \"dt_oauth_client_secret\": \"\"+input[ \"dt_oauth_client_secret\" ]+\"\", \"dynatraceawsconnection\": \"\"+input[ \"create-dynatrace-oidc-connection-settings\" ][ \"dynatraceawsconnection\" ]+\"\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      let subworkflow = data1.id;\n      console.log(subworkflow);\n      workflow1 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data1.id;\n  } catch (error: unknown) {\n  }\n\n  try {\n      data2 = await workflowsClient.createWorkflow({\n        body: { \"actor\": \"\"+actor+\"\", \"description\": \"\", \"hourlyExecutionLimit\": 1000, \"id\": \"1accf50e-0ef6-4ab8-853b-d408983ae1da\", \"input\": { \"awsaccountid\": \"\"+input.awsaccountid+\"\", \"awsregion\": \"us-east-1\", \"dynatraceawsconnection\": \"\"+input[ \"create-dynatrace-oidc-connection-settings\" ].dynatraceawsconnection+\"\" }, \"isPrivate\": false, \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"result\": null, \"schemaVersion\": 3, \"tasks\": { \"ec2_reboot_instances_1\": { \"action\": \"dynatrace.aws.connector:ec2-reboot-instances\", \"active\": true, \"concurrency\": 1, \"conditions\": { \"states\": { \"get-instances-by-tag\": \"OK\" } }, \"description\": \"Requests a reboot of the specified instances\", \"input\": { \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"InstanceIds\": \"{{ _.item.ResourceId }}\", \"region\": \"{{ input()[\\\"awsregion\\\"]}}\" }, \"name\": \"ec2_reboot_instances_1\", \"position\": { \"x\": 0, \"y\": 2 }, \"predecessors\": [ \"get-instances-by-tag\" ], \"timeout\": 9000, \"withItems\": \"item in {{ result(\\\"get-instances-by-tag\\\").Tags }}\" }, \"get-instances-by-tag\": { \"action\": \"dynatrace.aws.connector:ec2-describe-tags\", \"active\": true, \"description\": \"Describes the specified tags for your EC2 resources\", \"input\": { \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"Filters\": [ { \"key\": \"resource-type\", \"value\": \"instance\" }, { \"key\": \"value\", \"value\": \"Dynatrace-SSM-Action-Demo_{{input()[\\\"awsaccountid\\\"]}}\" } ], \"MaxResults\": 200, \"region\": \"{{ input()[\\\"awsregion\\\"]}}\" }, \"name\": \"get-instances-by-tag\", \"position\": { \"x\": 0, \"y\": 1 }, \"predecessors\": [] } }, \"title\": \"aws reboot instances\", \"trigger\": {}, \"type\": \"STANDARD\" }\n      });\n      let subworkflow = data2.id;\n      console.log(subworkflow);\n      workflow2 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data2.id;\n  } catch (error: unknown) {\n  }\n\n  return \"done\";\n}"
      },
      "action": "dynatrace.automations:run-javascript",
      "position": {
        "x": 4,
        "y": 1
      },
      "conditions": {
        "states": {
          "s3_delete_bucket_1": "OK"
        }
      },
      "description": "Run custom JavaScript code.",
      "predecessors": [
        "s3_delete_bucket_1"
      ]
    },
    "create-policy-workflow": {
      "name": "create-policy-workflow",
      "input": {
        "script": "import { execution } from '@dynatrace-sdk/automation-utils';\nimport { executionsClient, actionExecutionsClient  } from '@dynatrace-sdk/client-automation';\nimport { queryExecutionClient } from '@dynatrace-sdk/client-query';\nimport { credentialVaultClient } from '@dynatrace-sdk/client-classic-environment-v2';\nimport { workflowsClient } from \"@dynatrace-sdk/client-automation\";\nimport { getEnvironmentId } from '@dynatrace-sdk/app-environment';\nimport { getEnvironmentUrl } from '@dynatrace-sdk/app-environment';\n\nexport default async function ({ executionId, action_execution_id }) {\n\n  const configGet = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/create-service-user/result`);\n  const configBody = await configGet.json();\n  //const actor = configBody.json.uid   \n  const environmentId = getEnvironmentId();\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\n  let actor = configBody.json.uid  \n  console.log(actor)\n  console.log(input[\"create-dynatrace-oidc-connection-settings\"].dynatraceawsconnection)\n  const configGetx = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/get-users-id/result`);\n  const configBodyx = await configGetx.json();\n  let owner = \"\"\n  for (let items of configBodyx[\"json\"][\"items\"]) {\n    if(items.email == input[\"owner_email\"])\n     owner = items.uid\n     actor = items.uid\n  }\n  \n  let data1 = \"\"\n  let workflow1 = \"\"\n  // import workflow\n  try {\n      data1 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"45b907ff-076a-4aad-8733-7159b7fed89e\", \"title\": \"create-policies\", \"tasks\": { \"davis\": { \"name\": \"davis\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n  \\\"name\\\": \\\"davis_anomaly_detection\\\",\\n  \\\"tags\\\": [],\\n  \\\"category\\\": \\\"CUSTOM\\\",\\n  \\\"statements\\\": [\\n    {\\n      \\\"effect\\\": \\\"ALLOW\\\",\\n      \\\"conditions\\\": null,\\n      \\\"permissions\\\": [\\n        \\\"davis:analyzers:execute\\\"\\n      ]\\n    },\\n    {\\n      \\\"effect\\\": \\\"ALLOW\\\",\\n      \\\"conditions\\\": null,\\n      \\\"permissions\\\": [\\n        \\\"davis:analyzers:read\\\"\\n      ]\\n    },\\n    {\\n      \\\"effect\\\": \\\"ALLOW\\\",\\n      \\\"conditions\\\": null,\\n      \\\"permissions\\\": [\\n        \\\"davis-copilot:conversations:execute\\\"\\n      ]\\n    },\\n    {\\n      \\\"effect\\\": \\\"ALLOW\\\",\\n      \\\"conditions\\\": null,\\n      \\\"permissions\\\": [\\n        \\\"davis-copilot:nl2dql:execute\\\"\\n      ]\\n    },\\n    {\\n      \\\"effect\\\": \\\"ALLOW\\\",\\n      \\\"conditions\\\": null,\\n      \\\"permissions\\\": [\\n        \\\"davis-copilot:dql2nl:execute\\\"\\n      ]\\n    },\\n    {\\n      \\\"effect\\\": \\\"ALLOW\\\",\\n      \\\"conditions\\\": null,\\n      \\\"permissions\\\": [\\n        \\\"davis-copilot:document-search:execute\\\"\\n      ]\\n    },\\n    {\\n      \\\"effect\\\": \\\"ALLOW\\\",\\n      \\\"conditions\\\": null,\\n      \\\"permissions\\\": [\\n        \\\"settings:objects:read\\\"\\n      ]\\n    },\\n    {\\n      \\\"effect\\\": \\\"ALLOW\\\",\\n      \\\"conditions\\\": null,\\n      \\\"permissions\\\": [\\n        \\\"settings:objects:write\\\"\\n      ]\\n    },\\n    {\\n      \\\"effect\\\": \\\"ALLOW\\\",\\n      \\\"conditions\\\": null,\\n      \\\"permissions\\\": [\\n        \\\"settings:objects:read\\\"\\n      ]\\n    },\\n    {\\n      \\\"effect\\\": \\\"ALLOW\\\",\\n      \\\"conditions\\\": null,\\n      \\\"permissions\\\": [\\n        \\\"settings:schemas:read\\\"\\n      ]\\n    },\\n    {\\n      \\\"effect\\\": \\\"ALLOW\\\",\\n      \\\"conditions\\\": null,\\n      \\\"permissions\\\": [\\n        \\\"storage:buckets:read\\\",\\n        \\\"storage:logs:read\\\",\\n        \\\"storage:metrics:read\\\",\\n        \\\"storage:spans:read\\\",\\n        \\\"storage:bizevents:read\\\",\\n        \\\"storage:events:read\\\",\\n        \\\"storage:system:read\\\",\\n        \\\"storage:spans:read\\\",\\n        \\\"storage:entities:read\\\",\\n        \\\"storage:user.events:read\\\",\\n        \\\"storage:application.snapshots:read\\\"\\n      ]\\n    }\\n  ],\\n  \\\"description\\\": \\\"\\\",\\n  \\\"statementQuery\\\": \\\"ALLOW davis:analyzers:execute;\\\\nALLOW davis:analyzers:read;\\\\nALLOW davis-copilot:conversations:execute;\\\\nALLOW davis-copilot:nl2dql:execute;\\\\nALLOW davis-copilot:dql2nl:execute;\\\\nALLOW davis-copilot:document-search:execute;\\\\nALLOW settings:objects:read;\\\\nALLOW settings:objects:write;\\\\nALLOW settings:objects:read;\\\\nALLOW settings:schemas:read;\\\\nALLOW storage:buckets:read,\\\\nstorage:logs:read,\\\\nstorage:metrics:read,\\\\nstorage:spans:read,\\\\nstorage:bizevents:read,\\\\nstorage:events:read,\\\\nstorage:system:read,\\\\nstorage:spans:read,\\\\nstorage:entities:read,\\\\nstorage:user.events:read,\\\\nstorage:application.snapshots:read;\\\"\\n}\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"position\": { \"x\": -2, \"y\": 1 }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [] }, \"workflows-admin\": { \"name\": \"workflows-admin\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-admin\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"automation:workflows:admin\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants permission to become workflow admin which gives read, write and execute access to all workflows in the tenant \\\",\\n    \\\"statementQuery\\\": \\\"ALLOW automation:workflows:admin;\\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": -1, \"y\": 1 }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [] }, \"workflows-read-logs\": { \"name\": \"workflows-read-logs\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-read-logs\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"storage:logs:read\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants permission to read logs from workflow tasks\\\",\\n    \\\"statementQuery\\\": \\\"ALLOW storage:logs:read;\\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": 1, \"y\": 2 }, \"conditions\": { \"states\": { \"workflows-read-aws-action-connections\": \"OK\" } }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [ \"workflows-read-aws-action-connections\" ] }, \"workflows-read-spans\": { \"name\": \"workflows-read-spans\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \" {\\n    \\\"name\\\": \\\"workflows-read-spans\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"storage:spans:read\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants permission to read records from the spans-table from workflow tasks\\\",\\n    \\\"statementQuery\\\": \\\"ALLOW storage:spans:read;\\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": 2, \"y\": 3 }, \"conditions\": { \"states\": { \"workflows-read-metrics\": \"OK\" } }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [ \"workflows-read-metrics\" ] }, \"workflows-write-logs\": { \"name\": \"workflows-write-logs\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-write-logs\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"storage:logs:write\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants permission to write logs from workflow tasks\\\",\\n    \\\"statementQuery\\\": \\\"ALLOW storage:logs:write;\\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": -2, \"y\": 4 }, \"conditions\": { \"states\": { \"workflows-run-send-emails\": \"OK\" } }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [ \"workflows-run-send-emails\" ] }, \"workflows-read-events\": { \"name\": \"workflows-read-events\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-read-events\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"storage:events:read\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants permission to read records from the events-table. Needed for Event Triggers, DQL and Javascript Tasks that read events!\\\",\\n    \\\"statementQuery\\\": \\\"ALLOW storage:events:read;\\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": -1, \"y\": 2 }, \"conditions\": { \"states\": { \"workflows-admin\": \"OK\" } }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [ \"workflows-admin\" ] }, \"workflows-run-general\": { \"name\": \"workflows-run-general\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-run-general\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"automation:workflows:run\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants permission to run workflows\\\",\\n    \\\"statementQuery\\\": \\\"ALLOW automation:workflows:run;\\\\n\\\"\\n}\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"states\": { \"workflows-read-general\": \"OK\" } }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [ \"workflows-read-general\" ] }, \"workflows-read-general\": { \"name\": \"workflows-read-general\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-read-general\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"app-engine:apps:run\\\",\\n          \\\"app-engine:functions:run\\\"\\n        ]\\n      },\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"automation:workflows:read\\\",\\n          \\\"automation:rules:read\\\",\\n          \\\"automation:calendars:read\\\"\\n        ]\\n      },\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": [\\n          {\\n            \\\"name\\\": \\\"storage:event.provider\\\",\\n            \\\"values\\\": [\\n              \\\"AUTOMATION_ENGINE\\\"\\n            ],\\n            \\\"operator\\\": \\\"EQ\\\"\\n          }\\n        ],\\n        \\\"permissions\\\": [\\n          \\\"storage:system:read\\\"\\n        ]\\n      },\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": [\\n          {\\n            \\\"name\\\": \\\"storage:table-name\\\",\\n            \\\"values\\\": [\\n              \\\"dt.system.events\\\"\\n            ],\\n            \\\"operator\\\": \\\"EQ\\\"\\n          }\\n        ],\\n        \\\"permissions\\\": [\\n          \\\"storage:buckets:read\\\"\\n        ]\\n      },\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"storage:buckets:read\\\"\\n        ]\\n      },\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"state:app-states:read\\\"\\n        ]\\n      },\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"app-settings:objects:read\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants permission to the workflows app,\\\\nRead permissions for workflows of which the user has ownership (through user or group) or workflows that are shared with them! Read Access to General workflow Actions Execute DQL Query, Http Request and Run Javascript.\\\\nAlso Allow access to read Calendars, Rules and access to Automation and System Events. Allows read access to storage buckets (events, logs and metrics need separate permissions)\\\",\\n    \\\"statementQuery\\\": \\\"ALLOW app-engine:apps:run;\\\\n ALLOW app-engine:functions:run;\\\\n ALLOW automation:workflows:read, automation:rules:read,automation:calendars:read;\\\\nALLOW storage:system:read where storage:event.provider = \\\\\\\"AUTOMATION_ENGINE\\\\\\\";ALLOW storage:buckets:read where storage:table-name = \\\\\\\"dt.system.events\\\\\\\";\\\\nALLOW storage:buckets:read;\\\\nALLOW state:app-states:read;\\\\nALLOW app-settings:objects:read;\\\\n\\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"workflows-read-allworkflowactions\": \"OK\" } }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [ \"workflows-read-allworkflowactions\" ] }, \"workflows-read-metrics\": { \"name\": \"workflows-read-metrics\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-read-metrics\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"storage:metrics:read\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants permission to read metrics (timeseries) from workflow tasks\\\",\\n    \\\"statementQuery\\\": \\\"ALLOW storage:metrics:read;\\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": 2, \"y\": 2 }, \"conditions\": { \"states\": { \"workflows-read-bizevents\": \"OK\" } }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [ \"workflows-read-bizevents\" ] }, \"workflows-service-user\": { \"name\": \"workflows-service-user\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-service-user\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": [\\n          {\\n            \\\"name\\\": \\\"iam:service-user-email\\\",\\n            \\\"values\\\": [\\n              \\\"{{input()[\\\"serviceuseremail\\\"] }}\\\"\\n            ],\\n            \\\"operator\\\": \\\"IN\\\"\\n          }\\n        ],\\n        \\\"permissions\\\": [\\n          \\\"iam:service-users:use\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Gants permission to set service user as actor in workflows\\\",\\n    \\\"statementQuery\\\": \\\"ALLOW iam:service-users:use WHERE iam:service-user-email IN (\\\\\\\"{{input()[\\\"serviceuseremail\\\"] }}\\\\\\\");\\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": 2, \"y\": 4 }, \"conditions\": { \"states\": { \"workflows-read-spans\": \"OK\" } }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [ \"workflows-read-spans\" ] }, \"workflows-write-events\": { \"name\": \"workflows-write-events\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-write-events\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"storage:events:write\\\"\\n        ]\\n      },\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"environment:roles:viewer\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants permission to write/ingest events with workflow tasks \\\",\\n    \\\"statementQuery\\\": \\\"ALLOW storage:events:write;\\\\nALLOW environment:roles:viewer; \\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": 1, \"y\": 4 }, \"conditions\": { \"states\": { \"workflows-run-functions\": \"OK\" } }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [ \"workflows-run-functions\" ] }, \"workflows-read-entities\": { \"name\": \"workflows-read-entities\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-read-entities\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"storage:entities:read\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants permission to read records from entities from workfow tasks\\\",\\n    \\\"statementQuery\\\": \\\"ALLOW storage:entities:read;\\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": -2, \"y\": 2 }, \"conditions\": { \"states\": { \"davis\": \"OK\" } }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [ \"davis\" ] }, \"workflows-run-functions\": { \"name\": \"workflows-run-functions\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-run-functions\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"app-engine:functions:run\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants permissions to run javascript tasks in workflows\\\",\\n    \\\"statementQuery\\\": \\\"ALLOW app-engine:functions:run;\\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": 1, \"y\": 3 }, \"conditions\": { \"states\": { \"workflows-read-logs\": \"OK\" } }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [ \"workflows-read-logs\" ] }, \"workflows-write-general\": { \"name\": \"workflows-write-general\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-write-general\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"automation:workflows:write\\\",\\n          \\\"automation:rules:write\\\",\\n          \\\"automation:calendars:write\\\",\\n          \\\"app-settings:objects:write\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants permission to save workflows, calendars and rules\\\",\\n    \\\"statementQuery\\\": \\\"ALLOW automation:workflows:write,automation:rules:write,automation:calendars:write, app-settings:objects:write;\\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": -1, \"y\": 4 }, \"conditions\": { \"states\": { \"workflows-run-readsettings\": \"OK\" } }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [ \"workflows-run-readsettings\" ] }, \"workflows-write-metrics\": { \"name\": \"workflows-write-metrics\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-write-metrics\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"storage:metrics:write\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants permission to write metrics from workflow tasks\\\",\\n    \\\"statementQuery\\\": \\\"ALLOW storage:metrics:write;\\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": 0, \"y\": 4 }, \"conditions\": { \"states\": { \"workflows-run-general\": \"OK\" } }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [ \"workflows-run-general\" ] }, \"workflows-read-bizevents\": { \"name\": \"workflows-read-bizevents\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-read-bizevents\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"storage:bizevents:read\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants permission to read records from the bizevents-table from workflow tasks\\\",\\n    \\\"statementQuery\\\": \\\"ALLOW storage:bizevents:read;\\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": 2, \"y\": 1 }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [] }, \"workflows-run-send-emails\": { \"name\": \"workflows-run-send-emails\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-run-send-emails\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"email:emails:send\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants permission to send emails from tasks\\\",\\n    \\\"statementQuery\\\": \\\"ALLOW email:emails:send;\\\\n\\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": -2, \"y\": 3 }, \"conditions\": { \"states\": { \"workflows-read-entities\": \"OK\" } }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [ \"workflows-read-entities\" ] }, \"workflows-smartscape-read\": { \"name\": \"workflows-smartscape-read\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-smartscape-read\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"storage:smartscape:read\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants permission to query smarscape from workflow tasks\\\",\\n    \\\"statementQuery\\\": \\\"ALLOW storage:smartscape:read;\\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"position\": { \"x\": -2, \"y\": 5 }, \"conditions\": { \"states\": { \"workflows-write-logs\": \"OK\" } }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [ \"workflows-write-logs\" ] }, \"workflows-run-readsettings\": { \"name\": \"workflows-run-readsettings\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-run-readsettings\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"settings:objects:read\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants access to settings from workflow tasks\\\",\\n    \\\"statementQuery\\\": \\\"AllOW settings:objects:read;\\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": -1, \"y\": 3 }, \"conditions\": { \"states\": { \"workflows-read-events\": \"OK\" } }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [ \"workflows-read-events\" ] }, \"workflows-read-allworkflowactions\": { \"name\": \"workflows-read-allworkflowactions\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-read-allworkflowactions\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"app-engine:apps:run\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants permission to additional workflow actions like aws, github etc.\\\",\\n    \\\"statementQuery\\\": \\\"ALLOW app-engine:apps:run;\\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [] }, \"workflows-read-aws-action-connections\": { \"name\": \"workflows-read-aws-action-connections\", \"input\": { \"url\": \"{% if 'sprint' in environment().url %}\\nhttps://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% else %}\\nhttps://api.dynatrace.com/iam/v1/repo/account/{{input()[\\\"dtaccountuid\\\"] }}/policies\\n{% endif %}\", \"method\": \"POST\", \"headers\": { \"authorization\": \"Bearer {{ input()[\\\"token\\\"] }}\" }, \"payload\": \"{\\n    \\\"name\\\": \\\"workflows-read-aws-action-connections\\\",\\n    \\\"tags\\\": [],\\n    \\\"category\\\": \\\"CUSTOM\\\",\\n    \\\"statements\\\": [\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": [\\n          {\\n            \\\"name\\\": \\\"settings:schemaId\\\",\\n            \\\"values\\\": [\\n              \\\"builtin:hyperscaler-authentication.aws.connection\\\"\\n            ],\\n            \\\"operator\\\": \\\"EQ\\\"\\n          }\\n        ],\\n        \\\"permissions\\\": [\\n          \\\"settings:objects:read\\\",\\n          \\\"settings:objects:write\\\",\\n          \\\"settings:schemas:read\\\"\\n        ]\\n      },\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": [\\n          {\\n            \\\"name\\\": \\\"settings:schemaId\\\",\\n            \\\"values\\\": [\\n              \\\"builtin:dt-javascript-runtime.allowed-outbound-connections\\\"\\n            ],\\n            \\\"operator\\\": \\\"EQ\\\"\\n          }\\n        ],\\n        \\\"permissions\\\": [\\n          \\\"settings:objects:read\\\",\\n          \\\"settings:objects:write\\\",\\n          \\\"settings:schemas:read\\\"\\n        ]\\n      },\\n      {\\n        \\\"effect\\\": \\\"ALLOW\\\",\\n        \\\"conditions\\\": null,\\n        \\\"permissions\\\": [\\n          \\\"hyperscaler-authentication:aws:authenticate\\\"\\n        ]\\n      }\\n    ],\\n    \\\"description\\\": \\\"Grants permission to set AWS Connections in Workflow Actions\\\",\\n    \\\"statementQuery\\\": \\\"ALLOW settings:objects:read, settings:objects:write, settings:schemas:read WHERE settings:schemaId = \\\\\\\"builtin:hyperscaler-authentication.aws.connection\\\\\\\";\\\\nALLOW settings:objects:read, settings:objects:write, settings:schemas:read WHERE settings:schemaId = \\\\\\\"builtin:dt-javascript-runtime.allowed-outbound-connections\\\\\\\";\\\\nALLOW hyperscaler-authentication:aws:authenticate;\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\"\\n  }\", \"failOnResponseCodes\": \"400-599\" }, \"action\": \"dynatrace.automations:http-function\", \"active\": true, \"position\": { \"x\": 1, \"y\": 1 }, \"description\": \"Issue an HTTP request to any API.\", \"predecessors\": [] } }, \"description\": \"\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": true, \"trigger\": {}, \"schemaVersion\": 3, \"result\": \"{\\n{% if result(\\\"davis\\\") is defined %}\\n\\\"davis\\\": \\\"{{result(\\\"davis\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-admin\\\") is defined %}\\n\\\"workflows-admin\\\": \\\"{{result(\\\"workflows-admin\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-read-allworkflowactions\\\") is defined %}\\n\\\"workflows-read-allworkflowactions\\\": \\\"{{result(\\\"workflows-read-allworkflowactions\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-read-aws-action-connections\\\") is defined %}\\n\\\"workflows-read-aws-action-connections\\\": \\\"{{result(\\\"workflows-read-aws-action-connections\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-read-bizevents\\\") is defined %}\\n\\\"workflows-read-bizevents\\\": \\\"{{result(\\\"workflows-read-bizevents\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-read-entities\\\") is defined %}\\n\\\"workflows-read-entities\\\": \\\"{{result(\\\"workflows-read-entities\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-read-events\\\") is defined %}\\n\\\"workflows-read-events\\\": \\\"{{result(\\\"workflows-read-events\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-read-general\\\") is defined %}\\n\\\"workflows-read-general\\\": \\\"{{result(\\\"workflows-read-general\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-read-logs\\\") is defined %}\\n\\\"workflows-read-logs\\\": \\\"{{result(\\\"workflows-read-logs\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-read-metrics\\\") is defined %}\\n\\\"workflows-read-metrics\\\": \\\"{{result(\\\"workflows-read-metrics\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-run-send-emails\\\") is defined %}\\n\\\"workflows-run-send-emails\\\": \\\"{{result(\\\"workflows-run-send-emails\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-run-readsettings\\\") is defined %}\\n\\\"workflows-run-readsettings\\\": \\\"{{result(\\\"workflows-run-readsettings\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-run-functions\\\") is defined %}\\n\\\"workflows-run-functions\\\": \\\"{{result(\\\"workflows-run-functions\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-run-general\\\") is defined %}\\n\\\"workflows-run-general\\\": \\\"{{result(\\\"workflows-run-general\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-read-spans\\\") is defined %}\\n\\\"workflows-read-spans\\\": \\\"{{result(\\\"workflows-read-spans\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-write-logs\\\") is defined %}\\n\\\"workflows-write-logs\\\": \\\"{{result(\\\"workflows-write-logs\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-write-general\\\") is defined %}\\n\\\"workflows-write-general\\\": \\\"{{result(\\\"workflows-write-general\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-write-metrics\\\") is defined %}\\n\\\"workflows-write-metrics\\\": \\\"{{result(\\\"workflows-write-metrics\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-write-events\\\") is defined %}\\n\\\"workflows-write-events\\\": \\\"{{result(\\\"workflows-write-events\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-service-user\\\") is defined %}\\n\\\"workflows-service-user\\\": \\\"{{result(\\\"workflows-service-user\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\",\\n{% else %}\\n{% endif %}\\n{% if result(\\\"workflows-smartscape-read\\\") is defined %}\\n\\\"workflows-smartscape-read\\\": \\\"{{result(\\\"workflows-smartscape-read\\\").json.uuid | replace(\\\"'\\\",'\\\"') }}\\\"\\n{% else %}\\n{% endif %}\\n}\", \"input\": { \"token\": \"\", \"dtaccountuid\": \"\", \"serviceuseremail\": \"\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      let subworkflow = data1.id;\n      console.log(subworkflow);\n      workflow1 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data1.id;\n  } catch (error: unknown) {\n    console.log(error)\n  }\n\n  return \"done\";\n}"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:run-javascript",
      "position": {
        "x": -3,
        "y": 4
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{input()[\"create_workflow_groups_and_policies\"] == true}}",
        "states": {
          "get-users-id": "OK"
        }
      },
      "description": "Run custom JavaScript code.",
      "predecessors": [
        "get-users-id"
      ]
    },
    "create-workflow-groups": {
      "name": "create-workflow-groups",
      "input": {
        "url": "{% if 'sprint' in environment().url %}https://api-hardening.internal.dynatracelabs.com/iam/v1/accounts/{{input()[\"dtaccountuid\"] }}/groups{% else %}https://api.dynatrace.com/iam/v1/accounts/{{input()[\"dtaccountuid\"] }}/groups{% endif %}",
        "method": "POST",
        "headers": {
          "authorization": "Bearer {{ result(\"get-dt-oauth-token\").token }}"
        },
        "payload": "[{\n  \"name\": \"{{_.item }}\",\n  \"owner\": \"LOCAL\",\n  \"description\": \"{{_.item }}\"\n}]",
        "failOnResponseCodes": "400-599"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:http-function",
      "active": true,
      "position": {
        "x": -2,
        "y": 2
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{input()[\"create_workflow_groups_and_policies\"] == true}}",
        "states": {
          "create-policies": "OK"
        }
      },
      "withItems": "item in [\"workflow-builder\", \"workflow-admin\", \"Workflow-User\"]",
      "concurrency": 1,
      "description": "Issue an HTTP request to any API.",
      "predecessors": [
        "create-policies"
      ]
    },
    "remove_objects_from_s3": {
      "name": "remove_objects_from_s3",
      "input": {
        "Key": "{{ _.item }}",
        "Bucket": "dynatraceinstall{{execution().id | replace(\"-\",\"\")}}",
        "region": "{{ input()[\"awsregion\"]}}",
        "schema": "builtin:hyperscaler-authentication.aws.connection",
        "connection": "{% set awsconnection = input()[\"create-dynatrace-oidc-connection-settings\"][\"dynatraceawsconnection\"] %}\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}"
      },
      "action": "dynatrace.aws.connector:s3-delete-object",
      "position": {
        "x": 3,
        "y": 3
      },
      "conditions": {
        "states": {
          "print-delete-array": "OK"
        }
      },
      "withItems": "item in [\"cloudformation_create_role_for_ssm_execution_ec2.yaml\", \"create_remediation_demo_instances.yaml\", \"create_remediation_demo_instances.yaml\"]",
      "concurrency": 1,
      "description": "Removes an object from a bucket.",
      "predecessors": [
        "print-delete-array"
      ]
    },
    "add-policies-to-group-wf-user": {
      "name": "add-policies-to-group-wf-user",
      "input": {
        "url": "{% if 'sprint' in environment().url %}https://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\"dtaccountuid\"] }}/bindings/groups/{{result(\"create-workflow-groups\")[2].json[0].uuid}}{% else %}https://api.dynatrace.com/iam/v1/repo/account/{{input()[\"dtaccountuid\"] }}/bindings/groups/{{result(\"create-workflow-groups\")[2].json[0].uuid}}{% endif %}",
        "method": "PUT",
        "headers": {
          "authorization": "Bearer {{ result(\"get-dt-oauth-token\").token }}"
        },
        "payload": "{\n  \"policyUuids\": [\n    \"{{result(\"create-policies\")[\"workflows-read-general\"]  }}\",\n    \"{{result(\"create-policies\")[\"workflows-run-general\"] }}\",\n    \"{{result(\"create-policies\")[\"davis\"]  }}\"\n  ]\n}",
        "failOnResponseCodes": "400-599"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:http-function",
      "active": true,
      "position": {
        "x": -2,
        "y": 4
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{input()[\"create_workflow_groups_and_policies\"] == true}}",
        "states": {
          "add-policies-to-group-wf-builder": "OK"
        }
      },
      "description": "Issue an HTTP request to any API.",
      "predecessors": [
        "add-policies-to-group-wf-builder"
      ]
    },
    "add-policies-to-group-wf-admin": {
      "name": "add-policies-to-group-wf-admin",
      "input": {
        "url": "{% if 'sprint' in environment().url %}https://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\"dtaccountuid\"] }}/bindings/groups/{{result(\"create-workflow-groups\")[1].json[0].uuid}}{% else %}https://api.dynatrace.com/iam/v1/repo/account/{{input()[\"dtaccountuid\"] }}/bindings/groups/{{result(\"create-workflow-groups\")[1].json[0].uuid}}{% endif %}",
        "method": "PUT",
        "headers": {
          "authorization": "Bearer {{ result(\"get-dt-oauth-token\").token }}"
        },
        "payload": "{\n  \"policyUuids\": [\n    \"{{result(\"create-policies\")[\"workflows-admin\"]  }}\",\n    \"{{result(\"create-policies\")[\"workflows-read-allworkflowactions\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-read-aws-action-connections\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-read-bizevents\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-read-entities\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-read-events\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-read-general\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-read-logs\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-read-metrics\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-read-spans\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-run-general\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-service-user\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-write-general\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-write-events\"] }}\",\n    \"{{result(\"create-policies\")[\"davis\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-smartscape-read\"] }}\"\n  ]\n}",
        "failOnResponseCodes": "400-599"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:http-function",
      "active": true,
      "position": {
        "x": -1,
        "y": 1
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{input()[\"create_workflow_groups_and_policies\"] == true}}",
        "states": {
          "add-policies-to-group-wf-user": "OK"
        }
      },
      "description": "Issue an HTTP request to any API.",
      "predecessors": [
        "add-policies-to-group-wf-user"
      ]
    },
    "s3-create-bucket-to-store-yaml": {
      "name": "s3-create-bucket-to-store-yaml",
      "input": {
        "Bucket": "dynatraceinstall{{execution().id | replace(\"-\",\"\")}}",
        "region": "{{ input()[\"awsregion\"]}}",
        "connection": "{% set awsconnection = input()[\"create-dynatrace-oidc-connection-settings\"][\"dynatraceawsconnection\"] %}\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.aws.connector:s3-create-bucket",
      "active": true,
      "position": {
        "x": 1,
        "y": 2
      },
      "conditions": {
        "else": "SKIP",
        "states": {
          "create-security-group-remediation-workflows": "OK"
        }
      },
      "description": "This action creates an Amazon S3 bucket.",
      "predecessors": [
        "create-security-group-remediation-workflows"
      ]
    },
    "add-policies-to-group-wf-builder": {
      "name": "add-policies-to-group-wf-builder",
      "input": {
        "url": "{% if 'sprint' in environment().url %}https://api-hardening.internal.dynatracelabs.com/iam/v1/repo/account/{{input()[\"dtaccountuid\"] }}/bindings/groups/{{result(\"create-workflow-groups\")[0].json[0].uuid}}{% else %}https://api.dynatrace.com/iam/v1/repo/account/{{input()[\"dtaccountuid\"] }}/bindings/groups/{{result(\"create-workflow-groups\")[0].json[0].uuid}}{% endif %}",
        "method": "PUT",
        "headers": {
          "authorization": "Bearer {{ result(\"get-dt-oauth-token\").token }}"
        },
        "payload": "{\n  \"policyUuids\": [\n    \"{{result(\"create-policies\")[\"workflows-read-allworkflowactions\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-read-aws-action-connections\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-read-general\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-run-general\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-service-user\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-write-general\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-write-events\"] }}\",\n    \"{{result(\"create-policies\")[\"davis\"] }}\",\n    \"{{result(\"create-policies\")[\"workflows-smartscape-read\"] }}\"\n  ]\n}",
        "failOnResponseCodes": "400-599"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:http-function",
      "active": true,
      "position": {
        "x": -2,
        "y": 3
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{input()[\"create_workflow_groups_and_policies\"] == true}}",
        "states": {
          "create-workflow-groups": "OK"
        }
      },
      "description": "Issue an HTTP request to any API.",
      "predecessors": [
        "create-workflow-groups"
      ]
    },
    "add-policies-to-service-user-group": {
      "name": "add-policies-to-service-user-group",
      "input": {
        "url": "{% if 'sprint' in environment().url %}https://api-hardening.internal.dynatracelabs.com/iam/v1/accounts/{{input()[\"dtaccountuid\"] }}/users/{{result(\"create-service-user\").json.email}}{% else %}https://api.dynatrace.com/iam/v1/accounts/{{input()[\"dtaccountuid\"] }}/users/{{result(\"create-service-user\").json.email}}{% endif %}",
        "method": "POST",
        "headers": {
          "authorization": "Bearer {{ result(\"get-dt-oauth-token-2\").token }}"
        },
        "payload": "[\"{{_.item.json[0].uuid }}\"]",
        "failOnResponseCodes": "400-599"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:http-function",
      "active": true,
      "position": {
        "x": -1,
        "y": 3
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{input()[\"create_workflow_groups_and_policies\"] == true}}",
        "states": {
          "get-dt-oauth-token-2": "OK"
        }
      },
      "withItems": "item in {{result(\"create-workflow-groups\")}}",
      "concurrency": 1,
      "description": "Issue an HTTP request to any API.",
      "predecessors": [
        "get-dt-oauth-token-2"
      ]
    },
    "create-s3bucket-remediation-workflows": {
      "name": "create-s3bucket-remediation-workflows",
      "input": {
        "script": "// optional import of sdk modules\nimport { execution } from '@dynatrace-sdk/automation-utils';\nimport { workflowsClient } from \"@dynatrace-sdk/client-automation\";\nimport { getEnvironmentUrl } from '@dynatrace-sdk/app-environment';\nimport { documentsClient } from \"@dynatrace-sdk/client-document\";\nimport { getEnvironmentId } from '@dynatrace-sdk/app-environment';\n\nexport default async function ({ executionId , action_execution_id }) {\n  // your code goes here\n  // e.g. get the current execution\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\n  const configGet = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/create-service-user/result`);\n  const configBody = await configGet.json();\n\n  const environmentId = getEnvironmentId();\n  const actor = configBody.json.uid  \n\n  const configGetx = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/get-users-id/result`);\n  const configBodyx = await configGetx.json();\n  let owner = \"\"\n  for (let items of configBodyx[\"json\"][\"items\"]) {\n    if(items.email == input[\"owner_email\"])\n     owner = items.uid\n  }\n\n  let workflow1 = \"\"\n  let subworkflow = \"\" \n  try {  \n      const data1 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"67ddb318-e932-449a-840c-b90f8fb6a028\", \"title\": \"AWS Security remediate public S3 Bucket\", \"tasks\": { \"close-alert\": { \"name\": \"close-alert\", \"input\": { \"workflowId\": \"4486e1fc-6862-4a42-a6e8-39f080f57ff1\", \"workflowInput\": \"{\\n  \\\"event.id\\\": \\\"{{event()[\\\"event.id\\\"]}}\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": 0, \"y\": 4 }, \"conditions\": { \"states\": { \"ingest-remediation-event\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"ingest-remediation-event\" ] }, \"ingest-remediation-event\": { \"name\": \"ingest-remediation-event\", \"input\": { \"workflowId\": \"74a063e4-576a-4955-b477-1c531bcf7ad1\", \"workflowInput\": \"{\\n\\\"title\\\":\\\"Remediation - ({{event()[\\\"display_id\\\"]}} {{event()[\\\"event.name\\\"]}}) block public access for S3 Bucket {{result(\\\"get-additional-event-fields\\\").records[0].S3bucketname}} in {{result(\\\"get-additional-event-fields\\\").records[0].aws_region}}\\\",\\n\\\"properties\\\":{\\n\\\"workflow\\\":\\\"{{ environment().url }}/ui/apps/dynatrace.automations/executions/{{ execution().id }}\\\",\\n\\\"remediation_step\\\":\\\"block public access to S3 Bucket\\\",\\n\\\"aws_region\\\":\\\"{{result(\\\"get-additional-event-fields\\\").records[0].aws_region}}\\\"\\n}\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"custom\": \"\", \"states\": { \"s3-put-public-access-block\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"s3-put-public-access-block\" ] }, \"s3-put-public-access-block\": { \"name\": \"s3-put-public-access-block\", \"input\": { \"Bucket\": \"{{result(\\\"get-additional-event-fields\\\").records[0].S3bucketname}}\", \"region\": \"{{result(\\\"get-additional-event-fields\\\").records[0].aws_region}}\", \"connection\": \"{% set awsconnection = input()[\\\"dynatraceawsconnection\\\"] %}\\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}\", \"PublicAccessBlockConfiguration\": \"{ \\n  \\\"RestrictPublicBuckets\\\": [\\\"{{ input()[\\\"RestrictPublicBuckets\\\"] | lower }}\\\"],\\n  \\\"BlockPublicAcls\\\": [\\\"{{ input()[\\\"BlockPublicAcls\\\"] | lower }}\\\"],\\n  \\\"IgnorePublicAcls\\\": [\\\"{{ input()[\\\"IgnorePublicAcls\\\"] | lower }}\\\"],\\n  \\\"BlockPublicPolicy\\\": [\\\"{{ input()[\\\"BlockPublicPolicy\\\"] | lower }}\\\"]\\n}\" }, \"action\": \"dynatrace.aws.connector:s3-put-public-access-block\", \"active\": true, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"get-additional-event-fields\": \"OK\" } }, \"description\": \"This operation is not supported for directory buckets.\", \"predecessors\": [ \"get-additional-event-fields\" ] }, \"get-additional-event-fields\": { \"name\": \"get-additional-event-fields\", \"input\": { \"query\": \"Fetch dt.davis.events\\n| filter event.id == \\\"{{event()[\\\"event.id\\\"] | replace(\\\"V2\\\", \\\"\\\") }}\\\"\", \"failOnEmptyResult\": true }, \"retry\": { \"count\": 99, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:execute-dql-query\", \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Make use of Dynatrace Grail data in your workflow.\", \"predecessors\": [] } }, \"description\": \"Parent workflow to Block Public Access to an S3 Bucket\\n\\nParameters:\\n\\ndynatraceawsconnection: (Required) the connection name of the Dynatrace OIDC Connection\\nRestrictPublicBuckets: (Optional) Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy\\nBlockPublicAcls: (Optional) Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket and objects in this bucket\\nIgnorePublicAcls: (Optional) Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on this bucket and objects in this bucket\\nBlockPublicPolicy: (Optional) Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access\\n\\nDependencies:\\n*************\\nThis Workflow needs Dynatrace to receive Security Hub findings\\nhttps://docs.dynatrace.com/docs/secure/threat-observability/security-events-ingest/ingest-aws-security-hub\\nhttps://docs.dynatrace.com/docs/discover-dynatrace/references/semantic-dictionary/model/security-events\\n\\nSecurity Hub needs to be activated in AWS and AWS config rule configured to send Public S3 Bucket scan results on configuration change \\nhttps://docs.aws.amazon.com/config/latest/developerguide/s3-bucket-level-public-access-prohibited.html\\nhttps://us-east-1.console.aws.amazon.com/config/home?region=us-east-1#/rules\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": true, \"trigger\": { \"eventTrigger\": { \"isActive\": input[ \"create-s3bucket-remediation-workflows\" ][ \"wf_triggers_active\" ], \"filterQuery\": \"event.kind == \\\"DAVIS_PROBLEM\\\" AND event.status == \\\"ACTIVE\\\" AND (event.status_transition == \\\"CREATED\\\" OR event.status_transition == \\\"UPDATED\\\" OR event.status_transition == \\\"REOPENED\\\") AND (event.category == \\\"CUSTOM_ALERT\\\") AND (matchesPhrase(event.name, \\\"*S3 Bucket with Block Public Access set to false detected*\\\"))\", \"uniqueExpression\": \"{{ event()[\\\"event.id\\\"] }}-{{ \\\"open\\\" if event()[\\\"event.status_transition\\\"] in (\\\"CREATED\\\", \\\"UPDATED\\\", \\\"REOPENED\\\", \\\"REFRESHED\\\") else \\\"resolved\\\" }}-{{ event()[\\\"dt.davis.last_reopen_timestamp\\\"] }}\", \"triggerConfiguration\": { \"type\": \"davis-problem\", \"value\": { \"categories\": { \"custom\": true }, \"entityTags\": {}, \"customFilter\": \"matchesPhrase(event.name, \\\"*S3 Bucket with Block Public Access set to false detected*\\\")\", \"onProblemClose\": false, \"entityTagsMatch\": \"all\" } } } }, \"schemaVersion\": 3, \"result\": null, \"input\": { \"BlockPublicAcls\": \"true\", \"IgnorePublicAcls\": \"true\", \"BlockPublicPolicy\": \"true\", \"RestrictPublicBuckets\": \"true\", \"dynatraceawsconnection\":  \"\"+input[ \"create-dynatrace-oidc-connection-settings\" ].dynatraceawsconnection+\"\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data1.id;\n      console.log(subworkflow);\n      workflow1 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data1.id;\n  } catch (error: unknown) {\n    // Handle the error\n  }\n  let workflow4 = \"\"\n  try {  \n      const data4 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"770b3c17-d17e-4414-9137-58801b275f71\", \"title\": \"AWS Security create Alert for public S3 Buckets\", \"tasks\": { \"create-alert\": { \"name\": \"create-alert\", \"input\": { \"workflowId\": \"9a868582-bf92-4d2c-aea5-90898f7e86b8\", \"workflowInput\": \"{%set region = _.item.object.configuration.bucketRegion %}\\n{%set account = _.item[\\\"aws.account.id\\\"] %}\\n{\\n  \\\"title\\\": \\\"S3 Bucket with Block Public Access set to false detected ({{_.item[\\\"aws.resource.name\\\"]}})\\\",\\n  \\\"dt.smartscape_source.id\\\": \\\"{{_.item.id }}\\\",\\n  \\\"event.description\\\": \\\"S3 Bucket with Block Public Access set to false detected\\\",\\n  \\\"properties\\\": {\\n    \\\"dt.smartscape_source.id\\\": \\\"{{_.item.id }}\\\",\\n    \\\"aws_region\\\": \\\"{{region}}\\\",\\n    \\\"S3bucket\\\": \\\"{{_.item.id }}\\\",\\n    \\\"S3bucketarn\\\": \\\"{{_.item[\\\"aws.arn\\\"]}}\\\",\\n    \\\"S3bucketname\\\": \\\"{{_.item[\\\"aws.resource.name\\\"]}}\\\",\\n    \\\"awsaccountid\\\": \\\"{{ account }}\\\"\\n}\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"states\": { \"get-source-entity\": \"OK\" } }, \"withItems\": \"item in {{result(\\\"get-source-entity\\\").records}}\", \"concurrency\": 1, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"get-source-entity\" ] }, \"get-source-entity\": { \"name\": \"get-source-entity\", \"input\": { \"query\": \"smartscapeNodes \\\"AWS_S3_BUCKET\\\"\\n| fieldsAdd name\\n| parse aws.object,\\\"JSON:object\\\"\\n| fieldsadd configuration=object[configuration], supplementary_configuration=object[supplementary_configuration]\\n| fieldsadd serverSideEncryptionConfiguration=supplementary_configuration[serverSideEncryptionConfiguration], publicAccessBlockConfiguration=supplementary_configuration[publicAccessBlockConfiguration]\\n| fieldsadd publicAccessBlockConfiguration\\n| filter publicAccessBlockConfiguration[restrictPublicBuckets] == false\\n| filter matchesPhrase(name,\\\"securitydemotestbucket*\\\") // only for testing remove for go live\\n| filter aws.account.id == \\\"\"+input.awsaccountid+\"\\\" // only for testing remove for go live\\n//| limit 1 // only for testing remove for go live\", \"failOnEmptyResult\": false }, \"retry\": { \"count\": 5, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:execute-dql-query\", \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"max-parallel-runs\": \"OK\" } }, \"description\": \"Make use of Dynatrace Grail data in your workflow.\", \"predecessors\": [ \"max-parallel-runs\" ] }, \"max-parallel-runs\": { \"name\": \"max-parallel-runs\", \"input\": { \"workflowId\": \"c9f7024c-00db-4067-bc09-a7de20626286\", \"workflowInput\": \"{\\\"max_parallel_runs\\\":1,\\\"parent_workflow_id\\\":\\\"{{ execution().workflow.id }}\\\",\\\"parent_workflow_execution_id\\\":\\\"{{ execution().id }}\\\"}\" }, \"retry\": { \"count\": 99, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [] } }, \"description\": \"Parent workflow to Block Public Access to an S3 Bucket\\n\\nParameters:\\n\\ndynatraceawsconnection: (Required) the connection name of the Dynatrace OIDC Connection\\nRestrictPublicBuckets: (Optional) Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy\\nBlockPublicAcls: (Optional) Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket and objects in this bucket\\nIgnorePublicAcls: (Optional) Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on this bucket and objects in this bucket\\nBlockPublicPolicy: (Optional) Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": { \"schedule\": { \"isActive\": input[ \"create-s3bucket-remediation-workflows\" ][ \"wf_triggers_active\" ], \"isFaulty\": false, \"trigger\": { \"type\": \"interval\", \"intervalMinutes\": 5 }, \"rule\": null, \"filterParameters\": { \"earliestStart\": \"2025-09-27\", \"earliestStartTime\": \"20:42\" }, \"timezone\": \"America/Los_Angeles\", \"inputs\": {} } }, \"schemaVersion\": 3, \"result\": null, \"input\": { \"BlockPublicAcls\": \"true\", \"IgnorePublicAcls\": \"true\", \"BlockPublicPolicy\": \"true\", \"RestrictPublicBuckets\": \"true\", \"dynatraceawsconnection\": \"\"+input[ \"create-dynatrace-oidc-connection-settings\" ].dynatraceawsconnection+\"\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      \n      });\n      subworkflow = data4.id;\n      console.log(subworkflow);\n      workflow4 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data4.id;\n  } catch (error: unknown) {\n    // Handle the error\n  }\n\n  \n  \n  return { \"AWS Security hub create Alert for public S3 Buckets\": workflow4,  \"AWS Security hub remediate public S3 Bucket\": workflow1 };\n}"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:run-javascript",
      "active": true,
      "position": {
        "x": 0,
        "y": 4
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{ input()[\"create-s3bucket-remediation-workflows\"][\"install\"] == true}}",
        "states": {
          "create-subworkflows": "OK"
        }
      },
      "description": "Run custom JavaScript code.",
      "waitBefore": 120,
      "predecessors": [
        "create-subworkflows"
      ]
    },
    "create-cf-stack-chaos-testing-instances": {
      "name": "create-cf-stack-chaos-testing-instances",
      "input": {
        "workflowId": "e85d9c9e-30a9-44db-a429-0b781bad389a",
        "workflowInput": "{\n  \"awsregion\": \"{{ input()[\"awsregion\"]}}\",\n  \"cfyamls3url\": \"https://dynatraceinstall{{execution().id | replace(\"-\",\"\")}}.s3.{{ input()[\"awsregion\"]}}.amazonaws.com/create_remediation_demo_instances.yaml\",\n  \"cf_stackname\": \"dynatrace-chaos-testing-instance-and-ssm-document\",\n  \"dynatraceawsconnection\": \"{{ input()[\"create-dynatrace-oidc-connection-settings\"][\"dynatraceawsconnection\"]}}\"\n}"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:run-workflow",
      "active": true,
      "position": {
        "x": 2,
        "y": 2
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{ input()[\"AWS-Ec2-remediate-high-cpu-or-memory-consumption-by-processes\"][\"chaos_wf_aws_instances\"] == true or input()[\"AWS-EBS-remediate-low-storage\"][\"chaos_wf_aws_instances\"] == true }}",
        "states": {
          "upload-chaos-testing-instances-yaml-to-s3-bucket": "OK"
        }
      },
      "description": "Modularize your workflows, run any existing workflow.",
      "waitBefore": 10,
      "predecessors": [
        "upload-chaos-testing-instances-yaml-to-s3-bucket"
      ]
    },
    "create-dynatrace-oidc-connection-settings": {
      "name": "create-dynatrace-oidc-connection-settings",
      "input": {
        "script": "// optional import of sdk modules\nimport { execution } from '@dynatrace-sdk/automation-utils';\nimport { settingsObjectsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\nexport default async function ({ executionId }) {\n\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\n\n  const data =\n    await settingsObjectsClient.postSettingsObjects({\n      adminAccess: false,\n      body: [\n        {\n          schemaId:\n            \"builtin:hyperscaler-authentication.aws.connection\",\n          value: {\n            \"name\": \"\"+input[\"create-dynatrace-oidc-connection-settings\"][\"dynatraceawsconnection\"]+\"\",\n            \"type\": \"webIdentity\",\n            \"webIdentity\": {\n              \"roleArn\": \"arn:aws:iam::\"+input[\"awsaccountid\"]+\":role/dynatrace_oidc_conn_for_workflows\",\n              \"policyArns\": []\n           }\n          }\n        }\n      ]\n  });\n  console.log(data)\n  console.log(data[0].objectId)\n\n  const data3 = await settingsObjectsClient.addPermission({\n    objectId: data[0].objectId,\n    body:   {\n      \"accessor\": {\n        \"type\": \"all-users\"\n      },\n      \"permissions\": [\n        \"r\",\n        \"w\"\n      ]\n    },\n  });\n  console.log(data3)\n\n\n\n  return data ;\n}"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:run-javascript",
      "active": true,
      "position": {
        "x": 0,
        "y": 2
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{ input()[\"create-dynatrace-oidc-connection-settings\"][\"install\"] == true}}",
        "states": {
          "create-dashboards": "OK"
        }
      },
      "description": "Run custom JavaScript code.",
      "predecessors": [
        "create-dashboards"
      ]
    },
    "create-security-group-remediation-workflows": {
      "name": "create-security-group-remediation-workflows",
      "input": {
        "script": "// optional import of sdk modules\nimport { execution } from '@dynatrace-sdk/automation-utils';\nimport { workflowsClient } from \"@dynatrace-sdk/client-automation\";\nimport { getEnvironmentUrl } from '@dynatrace-sdk/app-environment';\nimport { documentsClient } from \"@dynatrace-sdk/client-document\";\nimport { getEnvironmentId } from '@dynatrace-sdk/app-environment';\n\nexport default async function ({ executionId , action_execution_id }) {\n  // your code goes here\n  // e.g. get the current execution\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\n  const configGet = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/create-service-user/result`);\n  const configBody = await configGet.json();\n\n  const environmentId = getEnvironmentId();\n  const actor = configBody.json.uid  \n\n  const configGetx = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/get-users-id/result`);\n  const configBodyx = await configGetx.json();\n  let owner = \"\"\n  for (let items of configBodyx[\"json\"][\"items\"]) {\n    if(items.email == input[\"owner_email\"])\n     owner = items.uid\n  }\n\n  let workflow1 = \"\"\n  let subworkflow = \"\" \n  try {  \n      const data1 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"bfde0033-a2dd-4471-a866-7ce4832264e8\", \"title\": \"AWS remediate public security groups\", \"tasks\": { \"close-problem\": { \"name\": \"close-problem\", \"input\": { \"workflowId\": \"4486e1fc-6862-4a42-a6e8-39f080f57ff1\", \"workflowInput\": \"{\\n  \\\"event.id\\\": \\\"{{event()[\\\"event.id\\\"] }}\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"custom\": \"\", \"states\": { \"disable-public-access-for-security-group\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"disable-public-access-for-security-group\" ] }, \"get-all-event-info\": { \"name\": \"get-all-event-info\", \"input\": { \"query\": \"Fetch dt.davis.events\\n| filter event.id == \\\"{{event()[\\\"event.id\\\"] | replace(\\\"V2\\\", \\\"\\\") }}\\\"\", \"failOnEmptyResult\": true }, \"retry\": { \"count\": 5, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:execute-dql-query\", \"active\": true, \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Make use of Dynatrace Grail data in your workflow.\", \"predecessors\": [] }, \"ingest-remediation-event\": { \"name\": \"ingest-remediation-event\", \"input\": { \"workflowId\": \"74a063e4-576a-4955-b477-1c531bcf7ad1\", \"workflowInput\": \"{\\n\\\"title\\\":\\\"Remediation - ({{event()[\\\"display_id\\\"]}}) disable public-access for security group {{result(\\\"get-all-event-info\\\")[\\\"records\\\"][0][\\\"GroupId\\\"] }}/{{result(\\\"get-all-event-info\\\")[\\\"records\\\"][0][\\\"GroupName\\\"] }} in {{result(\\\"get-all-event-info\\\")[\\\"records\\\"][0][\\\"region\\\"] }}\\\",\\n\\\"properties\\\":{\\n\\\"workflow\\\":\\\"{{ environment().url }}/ui/apps/dynatrace.automations/executions/{{ execution().id }}\\\",\\n\\\"remediation_step\\\":\\\"disable public-access for security group\\\",\\n\\\"aws_region\\\":\\\"{{result(\\\"get-all-event-info\\\")[\\\"records\\\"][0][\\\"region\\\"] }}\\\"\\n}\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": 0, \"y\": 4 }, \"conditions\": { \"custom\": \"\", \"states\": { \"close-problem\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"close-problem\" ] }, \"disable-public-access-for-security-group\": { \"name\": \"disable-public-access-for-security-group\", \"input\": { \"workflowId\": \"f8fdc88c-9a8c-4f3b-8198-9a021996515e\", \"workflowInput\": \"{\\n  \\\"awsregion\\\": \\\"{{result(\\\"get-all-event-info\\\")[\\\"records\\\"][0][\\\"region\\\"] }}\\\",\\n  \\\"ipaddresstoblock\\\": \\\"{{result(\\\"get-all-event-info\\\")[\\\"records\\\"][0][\\\"cidrIp\\\"] }}\\\",\\n  \\\"awssecuritygroupid\\\": \\\"{{result(\\\"get-all-event-info\\\")[\\\"records\\\"][0][\\\"GroupId\\\"] }}\\\",\\n  \\\"dynatraceawsconnection\\\": \\\"{{input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"custom\": \"\", \"states\": { \"get-all-event-info\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"get-all-event-info\" ] } }, \"description\": \"\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": { \"eventTrigger\": { \"isActive\": false, \"filterQuery\": \"event.kind == \\\"DAVIS_PROBLEM\\\" AND event.status == \\\"ACTIVE\\\" AND (event.status_transition == \\\"CREATED\\\" OR event.status_transition == \\\"UPDATED\\\" OR event.status_transition == \\\"REOPENED\\\") AND (event.category == \\\"CUSTOM_ALERT\\\") AND (matchesPhrase(event.name, \\\"AWS Security group*\\\") and matchesPhrase(event.name, \\\"allows traffic on*\\\"))\", \"uniqueExpression\": \"{{ event()[\\\"event.id\\\"] }}-{{ \\\"open\\\" if event()[\\\"event.status_transition\\\"] in (\\\"CREATED\\\", \\\"UPDATED\\\", \\\"REOPENED\\\", \\\"REFRESHED\\\") else \\\"resolved\\\" }}-{{ event()[\\\"dt.davis.last_reopen_timestamp\\\"] }}\", \"triggerConfiguration\": { \"type\": \"davis-problem\", \"value\": { \"categories\": { \"custom\": true }, \"entityTags\": {}, \"customFilter\": \"matchesPhrase(event.name, \\\"AWS Security group*\\\") and matchesPhrase(event.name, \\\"allows traffic on*\\\")\", \"onProblemClose\": false, \"entityTagsMatch\": \"all\" } } } }, \"schemaVersion\": 3, \"result\": null, \"input\": { \"dynatraceawsconnection\":  \"\"+input[ \"create-dynatrace-oidc-connection-settings\" ].dynatraceawsconnection+\"\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data1.id;\n      console.log(subworkflow);\n      workflow1 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data1.id;\n  } catch (error: unknown) {\n    // Handle the error\n  }\n  let workflow4 = \"\"\n  try {  \n      const data4 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"c96bdcad-64b6-45a8-a4d1-ed247c4beac0\", \"title\": \"AWS Security create Alert for public security groups\", \"tasks\": { \"max-parallel-runs\": { \"name\": \"max-parallel-runs\", \"input\": { \"workflowId\": \"c9f7024c-00db-4067-bc09-a7de20626286\", \"workflowInput\": \"{\\\"max_parallel_runs\\\":1,\\\"parent_workflow_id\\\":\\\"{{ execution().workflow.id }}\\\",\\\"parent_workflow_execution_id\\\":\\\"{{ execution().id }}\\\"}\" }, \"retry\": { \"count\": 99, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"timeout\": 600000, \"position\": { \"x\": 0, \"y\": 1 }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [] }, \"create-custom-alert\": { \"name\": \"create-custom-alert\", \"input\": { \"workflowId\": \"9a868582-bf92-4d2c-aea5-90898f7e86b8\", \"workflowInput\": \"{\\n  \\\"title\\\": \\\"AWS Security group {{_.item.groupName }} with id {{_.item.groupId }} allows traffic on {{_.item.cidrIp }} from port {{_.item.fromPort }} to port {{_.item.toPort }}\\\",\\n  \\\"event.description\\\": \\\"AWS Security group {{_.item.groupName }} with id {{_.item.groupId }} allows traffic on {{_.item.cidrIp }} from port {{_.item.fromPort }} to port {{_.item.toPort }}\\\",\\n  \\\"properties\\\": {\\n    \\\"dt.smartscape_source.id\\\": \\\"{{_.item.id }}\\\",\\n    \\\"GroupId\\\": \\\"{{_.item.groupId}}\\\",\\n    \\\"GroupName\\\": \\\"{{_.item.groupName}}\\\",\\n    \\\"Description\\\": \\\"{{_.item.description}}\\\",\\n    \\\"SecurityGroupArn\\\": \\\"{{_.item.securityGroupArn}}\\\",\\n    \\\"region\\\": \\\"{{_.item[\\\"aws.region\\\"]}}\\\",\\n    \\\"cidrIp\\\": \\\"{{_.item.cidrIp }}\\\",\\n    \\\"fromPort\\\": \\\"{{_.item.fromPort}}\\\",\\n    \\\"toPort\\\": \\\"{{_.item.toPort}}\\\",\\n    \\\"awsaccountid\\\": \\\"{{ _.item[\\\"aws.account.id\\\"] }}\\\"\\n  }\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"timeout\": 9999, \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"custom\": \"{{result(\\\"find-security-groups\\\")|length > 0  }}\", \"states\": { \"find-security-groups\": \"OK\" } }, \"withItems\": \"item in {{result(\\\"find-security-groups\\\").records}}\", \"concurrency\": 1, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"find-security-groups\" ] }, \"find-security-groups\": { \"name\": \"find-security-groups\", \"input\": { \"query\": \"smartscapeNodes \\\"AWS_EC2_SECURITYGROUP\\\"\\n| parse aws.object,\\\"JSON:object\\\"\\n| fieldsadd object\\n| fieldsadd configuration=object[configuration]\\n| fieldsadd ipPermissions=configuration[ipPermissions]\\n| expand ipPermissions\\n| fieldsadd ipRanges=ipPermissions[ipRanges]\\n| expand ipRanges\\n| fields aws.account.id,aws.vpc.id, aws.region, id,groupId=configuration[groupId], vpcId=configuration[vpcId], securityGroupArn=configuration[securityGroupArn], ownerId=configuration[ownerId], groupName=configuration[groupName],description=configuration[description], ipProtocol=ipPermissions[ipProtocol], fromPort=ipPermissions[fromPort], toPort=ipPermissions[toPort],cidrIp=ipRanges[cidrIp],tags\\n| filter cidrIp == \\\"0.0.0.0/0\\\"\\n| filter aws.account.id == \\\"\"+input.awsaccountid+\"\\\" // only for testing remove for go live\\n| filter  matchesphrase(groupName,\\\"demopublicsecuritygroup*\\\" ) // only for testing remove for go live\\n//| limit 1 // only for testing remove for go live\" }, \"action\": \"dynatrace.automations:execute-dql-query\", \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"max-parallel-runs\": \"OK\" } }, \"description\": \"Make use of Dynatrace Grail data in your workflow.\", \"predecessors\": [ \"max-parallel-runs\" ] } }, \"description\": \"\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": { \"schedule\": { \"isActive\": false, \"isFaulty\": false, \"trigger\": { \"type\": \"interval\", \"intervalMinutes\": 5 }, \"rule\": null, \"filterParameters\": { \"earliestStart\": \"2025-06-03\", \"earliestStartTime\": \"00:13\" }, \"timezone\": \"America/Los_Angeles\", \"inputs\": {} } }, \"schemaVersion\": 3, \"result\": null, \"input\": {}, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      subworkflow = data4.id;\n      console.log(subworkflow);\n      workflow4 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data4.id;\n  } catch (error: unknown) {\n    // Handle the error\n  }\n\n  \n  \n  return { \"AWS remediate public security groups\": workflow4,  \"AWS Security create Alert for public security groups\": workflow1 };\n}"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:run-javascript",
      "position": {
        "x": 1,
        "y": 1
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{ input()[\"create-aws-security-group-remediation-workflows\"][\"install\"] == true}}",
        "states": {
          "create-s3bucket-remediation-workflows": "OK"
        }
      },
      "description": "Run custom JavaScript code.",
      "predecessors": [
        "create-s3bucket-remediation-workflows"
      ]
    },
    "add-ssm-role-and-instance-profile-creation-yaml": {
      "name": "add-ssm-role-and-instance-profile-creation-yaml",
      "input": {
        "Key": "cloudformation_create_role_for_ssm_execution_ec2.yaml",
        "Body": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Role for SSM to manage ec2\n\nResources:\n  DynatraceSsmrole:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      RoleName: !Join \n        - ''\n        - - 'AmazonSSMManagedInstanceCore'\n          \n      Description: Role for SSM to manage ec2\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - ec2.amazonaws.com\n            Action:\n              - 'sts:AssumeRole'\n      Path: /\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n\n  DynatraceSSmRoleProfile:\n    Type: 'AWS::IAM::InstanceProfile'\n    Properties:\n      InstanceProfileName: !Join \n        - ''\n        - - 'AmazonSSMManagedInstanceCore'\n          \n      Roles:\n        - Ref: DynatraceSsmrole\n    DependsOn:\n      - DynatraceSsmrole",
        "Bucket": "dynatraceinstall{{execution().id | replace(\"-\",\"\")}}",
        "region": "{{ input()[\"awsregion\"]}}",
        "schema": "builtin:hyperscaler-authentication.aws.connection",
        "connection": "{% set awsconnection = input()[\"create-dynatrace-oidc-connection-settings\"][\"dynatraceawsconnection\"] %}\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}",
        "ContentType": "Content-Type: text/html; charset=ISO-8859-4"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.aws.connector:s3-put-object",
      "active": true,
      "position": {
        "x": 1,
        "y": 3
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{ input()[\"create_aws_systems_manager_roles_for_ec2\"] == true}}",
        "states": {
          "s3-create-bucket-to-store-yaml": "OK"
        }
      },
      "description": "Adds an object to a bucket.",
      "predecessors": [
        "s3-create-bucket-to-store-yaml"
      ]
    },
    "upload-chaos-testing-instances-yaml-to-s3-bucket": {
      "name": "upload-chaos-testing-instances-yaml-to-s3-bucket",
      "input": {
        "Key": "create_remediation_demo_instances.yaml",
        "Body": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Chaos Testing Instance for Dynatrace\nParameters:\n\n  DTtenant:\n    Default: {% if \"sprint\" in environment().url %}{{ environment().url | replace(\"apps.\", \"\") }}{% else %}{{ environment().url | replace(\"apps.\", \"live\") }}{% endif %}\n    \n    Description: Dynatrace Tenant id without url\n    Type: String\n  DTtoken:\n    Default: {{ input()[\"DTaccesstoken\"] }}\n    Description: Dynatrace Access Token\n    Type: String\n\n\n\nResources:\n\n  InstanceSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      Tags:\n        - Key: environment\n          Value: !Sub \"Dynatrace-SSM-Action-Demo_${AWS::AccountId}\"\n      GroupDescription: Default security group\n      \n{% if input()[\"AWS-Ec2-remediate-high-cpu-or-memory-consumption-by-processes\"][\"chaos_wf_aws_instances\"] == true %}\n  EC2Instance:\n    Type: AWS::EC2::Instance\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Sub \"Dynatrace-SSM-Action-Demo_${AWS::AccountId}\"\n        - Key: problem\n          Value: !Sub \"cpu_${AWS::AccountId}\"\n      InstanceType: t3.medium\n      IamInstanceProfile: {{ input()[\"AmazonSSMManagedInstanceCore_instance_profile_ec2\"] }}\n      SecurityGroups:\n        - !Ref InstanceSecurityGroup\n      ImageId: ami-04b4f1a9cf54c11d0\n      BlockDeviceMappings:\n        - DeviceName: /dev/sda1\n          Ebs:\n            VolumeSize: 30\n            Encrypted: true\n      UserData:\n        Fn::Base64: !Sub |\n            #!/bin/bash \n            sudo apt update -y \n            sudo apt upgrade -y \n            sudo systemctl start snap.amazon-ssm-agent.amazon-ssm-agent.service\n            wget  -O Dynatrace-OneAgent-Linux-1.307.61.20250226-155505.sh \"${ DTtenant }/api/v1/deployment/installer/agent/unix/default/latest?arch=x86\" --header=\"Authorization: Api-Token ${ DTtoken }\"\n            wget https://ca.dynatrace.com/dt-root.cert.pem ; ( echo 'Content-Type: multipart/signed; protocol=\"application/x-pkcs7-signature\"; micalg=\"sha-256\"; boundary=\"--SIGNED-INSTALLER\"'; echo ; echo ; echo '----SIGNED-INSTALLER' ; cat Dynatrace-OneAgent-Linux-1.307.61.20250226-155505.sh ) | openssl cms -verify -CAfile dt-root.cert.pem > /dev/null\n            /bin/sh Dynatrace-OneAgent-Linux-1.307.61.20250226-155505.sh --set-monitoring-mode=fullstack --set-app-log-content-access=true --set-host-name=Dynatrace-SSM-Action-Demo_${AWS::AccountId}\n\n\n{% endif %}\n{% if input()[\"AWS-EBS-remediate-low-storage\"][\"chaos_wf_aws_instances\"] == true %}\n\n  EC2Instance2:\n    Type: AWS::EC2::Instance\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Sub \"Dynatrace-SSM-Action-Demo_${AWS::AccountId}\"\n        - Key: problem\n          Value: !Sub \"disk_${AWS::AccountId}\"\n      InstanceType: t3.medium\n      IamInstanceProfile: {{ input()[\"AmazonSSMManagedInstanceCore_instance_profile_ec2\"] }}\n      SecurityGroups:\n        - !Ref InstanceSecurityGroup\n      ImageId: ami-04b4f1a9cf54c11d0\n      BlockDeviceMappings:\n        - DeviceName: /dev/sda1\n          Ebs:\n            VolumeSize: 30\n            Encrypted: true\n      UserData:\n        Fn::Base64: !Sub |\n            #!/bin/bash \n            sudo apt update -y \n            sudo apt upgrade -y \n            sudo systemctl start snap.amazon-ssm-agent.amazon-ssm-agent.service\n            wget  -O Dynatrace-OneAgent-Linux-1.307.61.20250226-155505.sh \"${ DTtenant }/api/v1/deployment/installer/agent/unix/default/latest?arch=x86\" --header=\"Authorization: Api-Token ${ DTtoken }\"\n            wget https://ca.dynatrace.com/dt-root.cert.pem ; ( echo 'Content-Type: multipart/signed; protocol=\"application/x-pkcs7-signature\"; micalg=\"sha-256\"; boundary=\"--SIGNED-INSTALLER\"'; echo ; echo ; echo '----SIGNED-INSTALLER' ; cat Dynatrace-OneAgent-Linux-1.307.61.20250226-155505.sh ) | openssl cms -verify -CAfile dt-root.cert.pem > /dev/null\n            /bin/sh Dynatrace-OneAgent-Linux-1.307.61.20250226-155505.sh --set-monitoring-mode=fullstack --set-app-log-content-access=true --set-host-name=Dynatrace-SSM-Action-Demo_${AWS::AccountId}\n  \n{% endif %}",
        "Bucket": "dynatraceinstall{{execution().id | replace(\"-\",\"\")}}",
        "region": "{{ input()[\"awsregion\"]}}",
        "connection": "{% set awsconnection = input()[\"create-dynatrace-oidc-connection-settings\"][\"dynatraceawsconnection\"] %}\n{{ connection('builtin:hyperscaler-authentication.aws.connection', awsconnection) }}",
        "ContentType": "Content-Type: text/html; charset=ISO-8859-4"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.aws.connector:s3-put-object",
      "active": true,
      "position": {
        "x": 2,
        "y": 1
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{ input()[\"AWS-Ec2-remediate-high-cpu-or-memory-consumption-by-processes\"][\"chaos_wf_aws_instances\"] == true or input()[\"AWS-EBS-remediate-low-storage\"][\"chaos_wf_aws_instances\"] == true }}",
        "states": {
          "create-cf-stack-ssm-role-and-instance-profile-creation": "OK"
        }
      },
      "description": "Adds an object to a bucket.",
      "waitBefore": 10,
      "predecessors": [
        "create-cf-stack-ssm-role-and-instance-profile-creation"
      ]
    },
    "create-aws-ebs-remediate-low-storage-remediation-wf": {
      "name": "create-aws-ebs-remediate-low-storage-remediation-wf",
      "input": {
        "script": "// optional import of sdk modules\nimport { execution } from '@dynatrace-sdk/automation-utils';\nimport { workflowsClient } from \"@dynatrace-sdk/client-automation\";\nimport { getEnvironmentUrl } from '@dynatrace-sdk/app-environment';\nimport { documentsClient } from \"@dynatrace-sdk/client-document\";\nimport { getEnvironmentId } from '@dynatrace-sdk/app-environment';\nimport { settingsObjectsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\n\nexport default async function ({ executionId , action_execution_id }) {\n  // your code goes here\n  // e.g. get the current execution\n  const configGet = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/create-service-user/result`);\n  const configBody = await configGet.json();\n  //const actor = configBody.json.uid   \n  const environmentId = getEnvironmentId();\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\n  let actor = configBody.json.uid  \n  console.log(actor)\n  console.log(input[\"create-dynatrace-oidc-connection-settings\"].dynatraceawsconnection)\n  const configGetx = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/get-users-id/result`);\n  const configBodyx = await configGetx.json();\n  let owner = \"\"\n  for (let items of configBodyx[\"json\"][\"items\"]) {\n    if(items.email == input[\"owner_email\"])\n     owner = items.uid\n  }\n  \n\n  let data1 = \"\"\n  let workflow1 = \"\"\n  // import workflow\n  try {\n      data1 = await workflowsClient.createWorkflow({\n        body: { \"id\": \"dd59f7b0-1154-4c06-b677-b3c64a17d475\", \"title\": \"AWS EBS remediate low storage\", \"tasks\": { \"get-aws-host-data\": { \"name\": \"get-aws-host-data\", \"input\": { \"workflowId\": \"3e5454a4-50ad-4dab-914c-638b6df5b283\", \"workflowInput\": \"{\\\"host_entity_id\\\":\\\"{{event()[\\\"dt.entity.host\\\"][0] }}\\\"}\" }, \"retry\": { \"count\": 10, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"position\": { \"x\": 0, \"y\": 1 }, \"conditions\": { \"states\": {} }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [] }, \"davis-disk-forcast\": { \"name\": \"davis-disk-forcast\", \"input\": { \"workflowId\": \"a13c2f6f-9e3d-478a-8399-1d17fecf6779\", \"workflowInput\": \"{\\n  \\\"host_entity_id\\\":\\\"{{event()[\\\"dt.entity.host\\\"][0] }}\\\",\\n  \\\"forecast_method\\\": \\\"upper\\\",\\n  \\\"on_forecast_failure_increase_by_percentag_of_total_diskspace\\\": 100\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"get-aws-host-data\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"get-aws-host-data\" ] }, \"remedate-low-disk-space\": { \"name\": \"remedate-low-disk-space\", \"input\": { \"workflowId\": \"03659848-380f-425c-8cc6-7a58ced48f87\", \"workflowInput\": \"{\\n  \\\"event_id\\\": \\\"{{event()[\\\"event.id\\\"] }}\\\",\\n  \\\"host_name\\\": \\\"{{ event()[\\\"host.name\\\"][0] }}\\\",\\n  \\\"volume_id\\\": \\\"{{result(\\\"get-aws-host-data\\\").volumeid }}\\\",\\n  \\\"display_id\\\": \\\"{{event()[\\\"display_id\\\"] }}\\\",\\n  \\\"instance_id\\\": \\\"{{result(\\\"get-aws-host-data\\\")['ec2_awsInstanceId']}}\\\",\\n  \\\"escalation_email\\\": \\\"daniel.braaf@dynatrace.com\\\",\\n  \\\"future_disk_size\\\": \\\"{{result(\\\"davis-disk-forcast\\\").predicted_disk_size }}\\\",\\n  \\\"current_disk_size\\\": \\\"{{result(\\\"get-aws-host-data\\\")['total_disk_size']}}\\\", \\n  \\\"ec2_entity_id\\\": \\\"{{result(\\\"get-aws-host-data\\\")['ec2_id']  }}\\\",\\n  \\\"volume_entity_id\\\": \\\"{{result(\\\"get-aws-host-data\\\")['ebs_id']  }}\\\",\\n  \\\"host_entity_id\\\": \\\"{{result(\\\"get-aws-host-data\\\")['id']  }}\\\",\\n  \\\"aws_region\\\": \\\"{{ result(\\\"get-aws-host-data\\\")['ec2_regionName']  }}\\\",\\n  \\\"osType\\\" : \\\"{{result(\\\"get-aws-host-data\\\").osType}}\\\",\\n  \\\"dynatraceawsconnection\\\": \\\"{{input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\\n\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"states\": { \"davis-disk-forcast\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"davis-disk-forcast\" ] } }, \"description\": \"\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": true, \"trigger\": { \"eventTrigger\": { \"isActive\": input[ \"AWS-Ec2-remediate-high-cpu-or-memory-consumption-by-processes\" ][ \"wf_triggers_active\" ], \"filterQuery\": \"event.kind == \\\"DAVIS_PROBLEM\\\" AND event.status == \\\"ACTIVE\\\" AND (event.status_transition == \\\"CREATED\\\" OR event.status_transition == \\\"UPDATED\\\" OR event.status_transition == \\\"REOPENED\\\") AND (event.category == \\\"RESOURCE_CONTENTION\\\") AND (matchesPhrase(cloud.provider, \\\"aws\\\") and matchesPhrase(event.name, \\\"Low storage warning\\\") and maintenance.is_under_maintenance==false and dt.davis.is_duplicate==false )\", \"uniqueExpression\": \"{{ event()[\\\"event.id\\\"] }}-{{ \\\"open\\\" if event()[\\\"event.status_transition\\\"] in (\\\"CREATED\\\", \\\"UPDATED\\\", \\\"REOPENED\\\", \\\"REFRESHED\\\") else \\\"resolved\\\" }}-{{ event()[\\\"dt.davis.last_reopen_timestamp\\\"] }}\", \"triggerConfiguration\": { \"type\": \"davis-problem\", \"value\": { \"categories\": { \"resource\": true }, \"entityTags\": {}, \"customFilter\": \"matchesPhrase(cloud.provider, \\\"aws\\\") and matchesPhrase(event.name, \\\"Low storage warning\\\") and maintenance.is_under_maintenance==false and dt.davis.is_duplicate==false \", \"onProblemClose\": false, \"entityTagsMatch\": \"all\" } } } }, \"schemaVersion\": 3, \"result\": null, \"input\": { \"dynatraceawsconnection\": \"\"+input[ \"create-dynatrace-oidc-connection-settings\" ].dynatraceawsconnection+\"\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n      });\n      let subworkflow = data1.id;\n      console.log(subworkflow);\n      workflow1 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data1.id;\n  } catch (error: unknown) {\n  }\n  const wfid = data1.id;\n  // create anomaly detection\n  //actor = configBody.json.uid \n  const envurl = getEnvironmentUrl()\n  const data2=\n    await settingsObjectsClient.postSettingsObjects({\n      body: [\n        { \"summary\": \"Low Storage Warning\", \"searchSummary\": \"Low Storage Warning\", \"author\": \"Dynatrace support user #179488294\", \"scope\": \"environment\", \"schemaId\": \"builtin:davis.anomaly-detectors\", \"schemaVersion\": \"1.0.10\", \"resourceContext\": { \"operations\": [ \"read\", \"write\", \"delete\" ], \"modifications\": { \"modifiablePaths\": [], \"nonModifiablePaths\": [] } }, \"value\": { \"enabled\": true, \"title\": \"Low Storage Warning\", \"description\": \"\", \"source\": \"Davis Anomaly Detection\", \"executionSettings\": { \"actor\": \"\"+ actor +\"\" }, \"analyzer\": { \"name\": \"dt.statistics.ui.anomaly_detection.StaticThresholdAnomalyDetectionAnalyzer\", \"input\": [ { \"key\": \"query\", \"value\": \"timeseries max(dt.host.disk.used.percent), by: { dt.entity.host }, interval:1m\\n| filter matchesPhrase(entityAttr(dt.entity.host, \\\"entity.name\\\"), \\\"Dynatrace-SSM-Action-Demo_\"+input.awsaccountid+\"\\\")\" }, { \"key\": \"threshold\", \"value\": \"80\" }, { \"key\": \"alertCondition\", \"value\": \"ABOVE\" }, { \"key\": \"alertOnMissingData\", \"value\": \"false\" }, { \"key\": \"violatingSamples\", \"value\": \"2\" }, { \"key\": \"slidingWindow\", \"value\": \"3\" }, { \"key\": \"dealertingSamples\", \"value\": \"3\" } ] }, \"eventTemplate\": { \"properties\": [ { \"key\": \"dt.source_entity\", \"value\": \"{dims:dt.entity.host}\" }, { \"key\": \"event.type\", \"value\": \"RESOURCE_CONTENTION_EVENT\" }, { \"key\": \"event.name\", \"value\": \"Low Storage Warning\" }, { \"key\": \"dt.davis.is_merging_allowed\", \"value\": \"false\" }, { \"key\": \"dt.davis.is_problem_suppressed\", \"value\": \"false\" }, { \"key\": \"dt.davis.is_rootcause_relevant\", \"value\": \"true\" }, { \"key\": \"severity\", \"value\": \"{severity}\" }, { \"key\": \"remediation workflow\", \"value\": \"\"+envurl+\"/ui/apps/dynatrace.automations/workflows/4cc1d810-1646-4498-8953-871d11745678\" + wfid +\"\" }, { \"key\": \"event.description\", \"value\": \"The Disk Usage by Host {dims:dt.entity.host.name} was above normal behaviour (larger than {threshold}%)\\nDisk usage at time of Alert: {severity}\\n\\nActivate the following automation workflow to remediate the problem https://\"+environmentId+\".apps.dynatrace.com/ui/apps/dynatrace.automations/workflows/\" + wfid +\"\" }, { \"key\": \"dt.davis.is_frequent_issue_detection_allowed\", \"value\": \"false\" }, { \"key\": \"dt.davis.analysis_trigger_delay\", \"value\": \"60\" }, { \"key\": \"dt.davis.analysis_time_budget\", \"value\": \"120\" } ] } } }\n      ]\n  });\n\n  console.log(data2)\nn  return { \"id\": \"\"+data1.id+\"\", \"AWS EBS remediate low storage\": workflow1, \"General Davis Anomaly Detection link\": \"\"+getEnvironmentUrl()+\"/ui/apps/dynatrace.davis.anomalydetection/\", \"objectid\": \"\"+data2[0].objectId+\"\"};\n}"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:run-javascript",
      "active": true,
      "position": {
        "x": 3,
        "y": 1
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{ input()[\"AWS-EBS-remediate-low-storage\"][\"install\"] == true}}",
        "states": {
          "create-aws-ec2-remediate-high-cpu-or-memory-consumption-by-processes-workflow": "OK"
        }
      },
      "description": "Run custom JavaScript code.",
      "predecessors": [
        "create-aws-ec2-remediate-high-cpu-or-memory-consumption-by-processes-workflow"
      ]
    },
    "create-cf-stack-ssm-role-and-instance-profile-creation": {
      "name": "create-cf-stack-ssm-role-and-instance-profile-creation",
      "input": {
        "workflowId": "e85d9c9e-30a9-44db-a429-0b781bad389a",
        "workflowInput": "{\n  \"awsregion\": \"{{ input()[\"awsregion\"]}}\",\n  \"cfyamls3url\": \"https://dynatraceinstall{{execution().id | replace(\"-\",\"\")}}.s3.{{ input()[\"awsregion\"]}}.amazonaws.com/cloudformation_create_role_for_ssm_execution_ec2.yaml\",\n  \"cf_stackname\": \"dynatrace-smm-role-and-policy\",\n  \"dynatraceawsconnection\": \"{{ input()[\"create-dynatrace-oidc-connection-settings\"][\"dynatraceawsconnection\"]}}\"\n}"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:run-workflow",
      "active": true,
      "position": {
        "x": 1,
        "y": 4
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{ input()[\"create_aws_systems_manager_roles_for_ec2\"] == true}}",
        "states": {
          "add-ssm-role-and-instance-profile-creation-yaml": "OK"
        }
      },
      "description": "Modularize your workflows, run any existing workflow.",
      "predecessors": [
        "add-ssm-role-and-instance-profile-creation-yaml"
      ]
    },
    "create-aws-ec2-remediate-high-cpu-or-memory-consumption-by-processes-workflow": {
      "name": "create-aws-ec2-remediate-high-cpu-or-memory-consumption-by-processes-workflow",
      "input": {
        "script": "// optional import of sdk modules\nimport { execution } from '@dynatrace-sdk/automation-utils';\nimport { workflowsClient } from \"@dynatrace-sdk/client-automation\";\nimport { getEnvironmentUrl } from '@dynatrace-sdk/app-environment';\nimport { documentsClient } from \"@dynatrace-sdk/client-document\";\nimport { getEnvironmentId } from '@dynatrace-sdk/app-environment';\nimport { settingsObjectsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\n\nexport default async function ({ executionId , action_execution_id }) {\n  // your code goes here\n  // e.g. get the current execution\n  const configGet = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/create-service-user/result`);\n  const configBody = await configGet.json();\n  const environmentId = getEnvironmentId();\n  const { input } = await fetch(`/platform/automation/v1/executions/${executionId}`).then((res) => res.json());\n  let actor = configBody.json.uid   \n  const configGetx = await fetch(`/platform/automation/v1/executions/${executionId}/tasks/get-users-id/result`);\n  const configBodyx = await configGetx.json();\n  let owner = \"\"\n  for (let items of configBodyx[\"json\"][\"items\"]) {\n    if(items.email == input[\"owner_email\"])\n     owner = items.uid\n  }\n\n  console.log(input[\"create-dynatrace-oidc-connection-settings\"].dynatraceawsconnection)\n  let data1 = \"\"\n  let workflow1 = \"\"\n  // import workflow\n  try {\n      data1 = await workflowsClient.createWorkflow({\n        body:  { \"id\": \"0062aae7-ab57-47e3-80de-faade47d4d52\", \"title\": \"AWS Ec2 remediate high cpu or memory consumption by processes\", \"tasks\": { \"get-problem-info\": { \"name\": \"get-problem-info\", \"input\": { \"workflowId\": \"67df876f-6e4a-4942-b565-7f40c502daec\", \"workflowInput\": \"{\\\"event.id\\\":\\\"{{event()[\\\"event.id\\\"] }}\\\"}\" }, \"retry\": { \"count\": 99, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"position\": { \"x\": 0, \"y\": 1 }, \"conditions\": { \"states\": {} }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [] }, \"get-aws-host-data\": { \"name\": \"get-aws-host-data\", \"input\": { \"workflowId\": \"3e5454a4-50ad-4dab-914c-638b6df5b283\", \"workflowInput\": \"{\\\"host_entity_id\\\":\\\"{{event()[\\\"dt.entity.host\\\"][0] }}\\\"}\" }, \"retry\": { \"count\": 99, \"delay\": 30, \"failedLoopIterationsOnly\": true }, \"action\": \"dynatrace.automations:run-workflow\", \"position\": { \"x\": 0, \"y\": 2 }, \"conditions\": { \"states\": { \"get-problem-info\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"get-problem-info\" ] }, \"run-aws-ec2-process-saturation-remediation\": { \"name\": \"run-aws-ec2-process-saturation-remediation\", \"input\": { \"workflowId\": \"cba39ee3-78da-4bb9-9caa-f42a3990cf3d\", \"workflowInput\": \"{\\n  \\\"event_id\\\": \\\"{{event()[\\\"event.id\\\"] }}\\\",\\n  \\\"display_id\\\": \\\"{{event()[\\\"display_id\\\"] }}\\\",\\n  \\\"event_name\\\": \\\"{{event()[\\\"event.name\\\"] }}\\\",\\n  \\\"instance_id\\\": \\\"{{result(\\\"get-aws-host-data\\\")['ec2_awsInstanceId'] }}\\\",\\n  \\\"process_name\\\": \\\"{{result(\\\"get-problem-info\\\").affectedEntities[0].name }}\\\",\\n  \\\"process_entity_id\\\": \\\"{{result(\\\"get-problem-info\\\").affectedEntities[0].entityId.id }}\\\",\\n  \\\"process_host_name\\\": \\\"{{result(\\\"get-aws-host-data\\\")['entity.name'] }}\\\",\\n  \\\"process_host_entity_id\\\": \\\"{{result(\\\"get-aws-host-data\\\")['id'] }}\\\", \\n  \\\"ec2_instance_type\\\": \\\"{{result(\\\"get-aws-host-data\\\")['ec2_awsInstanceType'] }}\\\",\\n  \\\"aws_region_name\\\": \\\"{{result(\\\"get-aws-host-data\\\")['ec2_regionName'] }}\\\",\\n  \\\"dynatraceawsconnection\\\": \\\"{{input()[\\\"dynatraceawsconnection\\\"] }}\\\"\\n}\" }, \"action\": \"dynatrace.automations:run-workflow\", \"active\": true, \"position\": { \"x\": 0, \"y\": 3 }, \"conditions\": { \"states\": { \"get-aws-host-data\": \"OK\" } }, \"description\": \"Modularize your workflows, run any existing workflow.\", \"predecessors\": [ \"get-aws-host-data\" ] } }, \"description\": \"Remediate CPU Saturation by Process on host\", \"actor\": \"\"+actor+\"\", \"owner\": \"\"+owner+\"\", \"ownerType\": \"USER\", \"isPrivate\": false, \"trigger\": { \"eventTrigger\": { \"isActive\": input[ \"AWS-Ec2-remediate-high-cpu-or-memory-consumption-by-processes\" ][ \"wf_triggers_active\" ], \"filterQuery\": \"event.kind == \\\"DAVIS_PROBLEM\\\" AND event.status == \\\"ACTIVE\\\" AND (event.status_transition == \\\"CREATED\\\" OR event.status_transition == \\\"UPDATED\\\" OR event.status_transition == \\\"REOPENED\\\") AND (event.category == \\\"RESOURCE_CONTENTION\\\") AND (matchesPhrase(cloud.provider, \\\"aws\\\") and matchesPhrase(event.name, \\\"Process Cpu Saturation\\\") and maintenance.is_under_maintenance==false and dt.davis.is_duplicate==false or matchesPhrase(cloud.provider, \\\"aws\\\") and matchesPhrase(event.name, \\\"Process Memory Saturation\\\") and maintenance.is_under_maintenance==false and dt.davis.is_duplicate==false )\", \"uniqueExpression\": \"{{ event()[\\\"event.id\\\"] }}-{{ \\\"open\\\" if event()[\\\"event.status_transition\\\"] in (\\\"CREATED\\\", \\\"UPDATED\\\", \\\"REOPENED\\\", \\\"REFRESHED\\\") else \\\"resolved\\\" }}-{{ event()[\\\"dt.davis.last_reopen_timestamp\\\"] }}\", \"triggerConfiguration\": { \"type\": \"davis-problem\", \"value\": { \"categories\": { \"resource\": true }, \"entityTags\": {}, \"customFilter\": \"matchesPhrase(cloud.provider, \\\"aws\\\") and matchesPhrase(event.name, \\\"Process Cpu Saturation\\\") and maintenance.is_under_maintenance==false and dt.davis.is_duplicate==false or matchesPhrase(cloud.provider, \\\"aws\\\") and matchesPhrase(event.name, \\\"Process Memory Saturation\\\") and maintenance.is_under_maintenance==false and dt.davis.is_duplicate==false \", \"onProblemClose\": false, \"entityTagsMatch\": \"all\" } } } }, \"schemaVersion\": 3, \"result\": null, \"input\": { \"dynatraceawsconnection\": \"\"+input[ \"create-dynatrace-oidc-connection-settings\" ].dynatraceawsconnection+\"\" }, \"hourlyExecutionLimit\": 1000, \"type\": \"STANDARD\" }\n       \n      });\n      let subworkflow = data1.id;\n      console.log(subworkflow);\n      workflow1 = getEnvironmentUrl() + \"/ui/apps/dynatrace.automations/workflows/\" + data1.id;\n  } catch (error: unknown) {\n    console.log(error)\n  }\n  const wfid = data1.id;\n  // create anomaly detection\n  const envurl = getEnvironmentUrl()\n  const data2=\n    await settingsObjectsClient.postSettingsObjects({\n      body: [\n          { \"summary\": \"Process Cpu Saturation\", \"searchSummary\": \"Process Cpu Saturation\", \"author\": \"Dynatrace Remediation\", \"scope\": \"environment\", \"schemaId\": \"builtin:davis.anomaly-detectors\", \"schemaVersion\": \"1.0.10\", \"resourceContext\": { \"operations\": [ \"read\", \"write\", \"delete\" ], \"modifications\": { \"modifiablePaths\": [], \"nonModifiablePaths\": [] } }, \"value\": { \"enabled\": true, \"title\": \"Process Cpu Saturation\", \"description\": \"Process Cpu Saturation\", \"source\": \"Davis Anomaly Detection\", \"executionSettings\": { \"actor\": \"\"+ actor +\"\" }, \"analyzer\": { \"name\": \"dt.statistics.ui.anomaly_detection.StaticThresholdAnomalyDetectionAnalyzer\", \"input\": [ { \"key\": \"query\", \"value\": \"timeseries max=max(dt.process.cpu.usage), by: { dt.entity.process_group_instance,dt.entity.host },interval:1m\\n| filter matchesPhrase(entityAttr(dt.entity.host, \\\"entity.name\\\"), \\\"Dynatrace-SSM-Action-Demo_\"+input.awsaccountid+\"\\\")\\n| fieldsAdd dt.entity.process_group_instance.name = entityName(dt.entity.process_group_instance)\\n| filter not matchesPhrase(dt.entity.process_group_instance.name,\\\"oneagent\\\")\" }, { \"key\": \"threshold\", \"value\": \"70\" }, { \"key\": \"alertCondition\", \"value\": \"ABOVE\" }, { \"key\": \"alertOnMissingData\", \"value\": \"false\" }, { \"key\": \"violatingSamples\", \"value\": \"2\" }, { \"key\": \"slidingWindow\", \"value\": \"2\" }, { \"key\": \"dealertingSamples\", \"value\": \"2\" } ] }, \"eventTemplate\": { \"properties\": [ { \"key\": \"dt.source_entity\", \"value\": \"{dims:dt.entity.process_group_instance}\" }, { \"key\": \"event.type\", \"value\": \"RESOURCE_CONTENTION_EVENT\" }, { \"key\": \"event.name\", \"value\": \"Process CPU Saturation\" }, { \"key\": \"dt.davis.is_merging_allowed\", \"value\": \"false\" }, { \"key\": \"dt.davis.is_problem_suppressed\", \"value\": \"false\" }, { \"key\": \"dt.davis.is_rootcause_relevant\", \"value\": \"true\" }, { \"key\": \"severity\", \"value\": \"{severity}\" }, { \"key\": \"remediation workflow\", \"value\": \"\"+envurl+\"ui/apps/dynatrace.automations/workflows/\" + wfid +\"\" }, { \"key\": \"event.description\", \"value\": \"The CPU Usage by Process {dims:dt.entity.process_group_instance.name} was above normal behaviour (larger than {threshold}%)\\n\\n Activate the following automation workflow to remediate the problem https://\"+environmentId+\".apps.dynatrace.com/ui/apps/dynatrace.automations/workflows/\" + wfid +\"\" }, { \"key\": \"dt.davis.is_frequent_issue_detection_allowed\", \"value\": \"false\" }, { \"key\": \"dt.davis.timeout\", \"value\": \"7\" }, { \"key\": \"dt.davis.analysis_trigger_delay\", \"value\": \"60\" }, { \"key\": \"dt.davis.analysis_time_budget\", \"value\": \"120\" } ] } } }\n      ]\n    \n    });\n  console.log(data2)\n  \n  return {  \"AWS Ec2 remediate high cpu or memory consumption by processes\": workflow1, \"General Davis Anomaly Detection link\": \"\"+getEnvironmentUrl()+\"/ui/apps/dynatrace.davis.anomalydetection/\", \"objectid\": \"\"+data2[0].objectId+\"\"};\n}"
      },
      "retry": {
        "count": 5,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "action": "dynatrace.automations:run-javascript",
      "active": true,
      "position": {
        "x": 2,
        "y": 4
      },
      "conditions": {
        "else": "SKIP",
        "custom": "{{ input()[\"AWS-Ec2-remediate-high-cpu-or-memory-consumption-by-processes\"][\"install\"] == true}}",
        "states": {
          "create-chaos-workflows": "OK"
        }
      },
      "description": "Run custom JavaScript code.",
      "predecessors": [
        "create-chaos-workflows"
      ]
    }
  },
  "description": "",
  "ownerType": "USER",
  "isPrivate": true,
  "trigger": {},
  "schemaVersion": 3,
  "result": "{{result(\"print-delete-array\")}}",
  "input": {
    "awsregion": "us-east-1",
    "owner_email": "",
    "awsaccountid": "",
    "dtaccountuid": "",
    "DTaccesstoken": "",
    "create_dashboards": true,
    "dt_oauth_client_id": "",
    "InstallOIDCconnection": true,
    "dt_oauth_client_secret": "",
    "AWS-EBS-remediate-low-storage": {
      "install": true,
      "wf_triggers_active": true,
      "chaos_wf_aws_instances": true,
      "install_chaos_workflows": true,
      "chaos_wf_triggers_active": false
    },
    "create_workflow_groups_and_policies": true,
    "create-s3bucket-remediation-workflows": {
      "install": true,
      "wf_triggers_active": false,
      "install_chaos_workflows": true,
      "chaos_wf_triggers_active": false
    },
    "create_aws_systems_manager_roles_for_ec2": true,
    "create-dynatrace-oidc-connection-settings": {
      "install": true,
      "dynatraceawsconnection": ""
    },
    "create-aws-security-group-remediation-workflows": {
      "install": true,
      "wf_triggers_active": false,
      "install_chaos_workflows": true,
      "chaos_wf_triggers_active": false
    },
    "AmazonSSMManagedInstanceCore_instance_profile_ec2": "AmazonSSMManagedInstanceCore",
    "AWS-Ec2-remediate-high-cpu-or-memory-consumption-by-processes": {
      "install": true,
      "wf_triggers_active": true,
      "chaos_wf_aws_instances": true,
      "install_chaos_workflows": true,
      "chaos_wf_triggers_active": false
    }
  },
  "hourlyExecutionLimit": 1000,
  "type": "STANDARD"
}
